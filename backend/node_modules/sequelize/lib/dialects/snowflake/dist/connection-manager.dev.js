"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;

var __defNormalProp = function __defNormalProp(obj, key, value) {
  return key in obj ? __defProp(obj, key, {
    enumerable: true,
    configurable: true,
    writable: true,
    value: value
  }) : obj[key] = value;
};

var __spreadValues = function __spreadValues(a, b) {
  for (var prop in b || (b = {})) {
    if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);
  }

  if (__getOwnPropSymbols) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = __getOwnPropSymbols(b)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var prop = _step.value;
        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }

  return a;
};

var AbstractConnectionManager = require("../abstract/connection-manager");

var SequelizeErrors = require("../../errors");

var _require = require("../../utils/logger"),
    logger = _require.logger;

var DataTypes = require("../../data-types").snowflake;

var debug = logger.debugContext("connection:snowflake");

var parserStore = require("../parserStore")("snowflake");

var ConnectionManager =
/*#__PURE__*/
function (_AbstractConnectionMa) {
  _inherits(ConnectionManager, _AbstractConnectionMa);

  function ConnectionManager(dialect, sequelize) {
    var _this;

    _classCallCheck(this, ConnectionManager);

    sequelize.config.port = sequelize.config.port || 3306;
    _this = _possibleConstructorReturn(this, _getPrototypeOf(ConnectionManager).call(this, dialect, sequelize));
    _this.lib = _this._loadDialectModule("snowflake-sdk");

    _this.refreshTypeParser(DataTypes);

    return _this;
  }

  _createClass(ConnectionManager, [{
    key: "_refreshTypeParser",
    value: function _refreshTypeParser(dataType) {
      parserStore.refresh(dataType);
    }
  }, {
    key: "_clearTypeParser",
    value: function _clearTypeParser() {
      parserStore.clear();
    }
  }, {
    key: "connect",
    value: function connect(config) {
      var _this2 = this;

      var connectionConfig, connection, tzOffset, isNamedTzOffset;
      return regeneratorRuntime.async(function connect$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              connectionConfig = __spreadValues({
                account: config.host,
                username: config.username,
                password: config.password,
                database: config.database,
                warehouse: config.warehouse,
                role: config.role
              }, config.dialectOptions);
              _context.prev = 1;
              _context.next = 4;
              return regeneratorRuntime.awrap(new Promise(function (resolve, reject) {
                _this2.lib.createConnection(connectionConfig).connect(function (err, conn) {
                  if (err) {
                    console.log(err);
                    reject(err);
                  } else {
                    resolve(conn);
                  }
                });
              }));

            case 4:
              connection = _context.sent;
              debug("connection acquired");

              if (this.sequelize.config.keepDefaultTimezone) {
                _context.next = 15;
                break;
              }

              tzOffset = this.sequelize.options.timezone === "+00:00" ? "Etc/UTC" : this.sequelize.options.timezone;
              isNamedTzOffset = /\//.test(tzOffset);

              if (!isNamedTzOffset) {
                _context.next = 14;
                break;
              }

              _context.next = 12;
              return regeneratorRuntime.awrap(new Promise(function (resolve, reject) {
                connection.execute({
                  sqlText: "ALTER SESSION SET timezone = '".concat(tzOffset, "'"),
                  complete: function complete(err) {
                    if (err) {
                      console.log(err);
                      reject(err);
                    } else {
                      resolve();
                    }
                  }
                });
              }));

            case 12:
              _context.next = 15;
              break;

            case 14:
              throw Error("only support time zone name for snowflake!");

            case 15:
              return _context.abrupt("return", connection);

            case 18:
              _context.prev = 18;
              _context.t0 = _context["catch"](1);
              _context.t1 = _context.t0.code;
              _context.next = _context.t1 === "ECONNREFUSED" ? 23 : _context.t1 === "ER_ACCESS_DENIED_ERROR" ? 24 : _context.t1 === "ENOTFOUND" ? 25 : _context.t1 === "EHOSTUNREACH" ? 26 : _context.t1 === "EINVAL" ? 27 : 28;
              break;

            case 23:
              throw new SequelizeErrors.ConnectionRefusedError(_context.t0);

            case 24:
              throw new SequelizeErrors.AccessDeniedError(_context.t0);

            case 25:
              throw new SequelizeErrors.HostNotFoundError(_context.t0);

            case 26:
              throw new SequelizeErrors.HostNotReachableError(_context.t0);

            case 27:
              throw new SequelizeErrors.InvalidConnectionError(_context.t0);

            case 28:
              throw new SequelizeErrors.ConnectionError(_context.t0);

            case 29:
            case "end":
              return _context.stop();
          }
        }
      }, null, this, [[1, 18]]);
    }
  }, {
    key: "disconnect",
    value: function disconnect(connection) {
      return regeneratorRuntime.async(function disconnect$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (connection.isUp()) {
                _context2.next = 3;
                break;
              }

              debug("connection tried to disconnect but was already at CLOSED state");
              return _context2.abrupt("return");

            case 3:
              return _context2.abrupt("return", new Promise(function (resolve, reject) {
                connection.destroy(function (err) {
                  if (err) {
                    console.error("Unable to disconnect: ".concat(err.message));
                    reject(err);
                  } else {
                    console.log("Disconnected connection with id: ".concat(connection.getId()));
                    resolve(connection.getId());
                  }
                });
              }));

            case 4:
            case "end":
              return _context2.stop();
          }
        }
      });
    }
  }, {
    key: "validate",
    value: function validate(connection) {
      return connection.isUp();
    }
  }], [{
    key: "_typecast",
    value: function _typecast(field, next) {
      if (parserStore.get(field.type)) {
        return parserStore.get(field.type)(field, this.sequelize.options, next);
      }

      return next();
    }
  }]);

  return ConnectionManager;
}(AbstractConnectionManager);

module.exports = ConnectionManager;
module.exports.ConnectionManager = ConnectionManager;
module.exports["default"] = ConnectionManager;
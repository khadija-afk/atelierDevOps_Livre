// This file was modified by Oracle on July 5, 2021.
// Errors generated by asynchronous authentication plugins are now being
// handled and subsequently emitted at the command level.
// Modifications copyright (c) 2021, Oracle and/or its affiliates.
'use strict';

var Packets = require('../packets/index.js');

var sha256_password = require('../auth_plugins/sha256_password');

var caching_sha2_password = require('../auth_plugins/caching_sha2_password.js');

var mysql_native_password = require('../auth_plugins/mysql_native_password.js');

var mysql_clear_password = require('../auth_plugins/mysql_clear_password.js');

var standardAuthPlugins = {
  sha256_password: sha256_password({}),
  caching_sha2_password: caching_sha2_password({}),
  mysql_native_password: mysql_native_password({}),
  mysql_clear_password: mysql_clear_password({})
};

function warnLegacyAuthSwitch() {
  console.warn('WARNING! authSwitchHandler api is deprecated, please use new authPlugins api');
}

function authSwitchPluginError(error, command) {
  // Authentication errors are fatal
  error.code = 'AUTH_SWITCH_PLUGIN_ERROR';
  error.fatal = true;
  command.emit('error', error);
}

function authSwitchRequest(packet, connection, command) {
  var _Packets$AuthSwitchRe = Packets.AuthSwitchRequest.fromPacket(packet),
      pluginName = _Packets$AuthSwitchRe.pluginName,
      pluginData = _Packets$AuthSwitchRe.pluginData;

  var authPlugin = connection.config.authPlugins && connection.config.authPlugins[pluginName]; // legacy plugin api don't allow to override mysql_native_password
  // if pluginName is mysql_native_password it's using standard auth4.1 auth

  if (connection.config.authSwitchHandler && pluginName !== 'mysql_native_password') {
    var legacySwitchHandler = connection.config.authSwitchHandler;
    warnLegacyAuthSwitch();
    legacySwitchHandler({
      pluginName: pluginName,
      pluginData: pluginData
    }, function (err, data) {
      if (err) {
        return authSwitchPluginError(err, command);
      }

      connection.writePacket(new Packets.AuthSwitchResponse(data).toPacket());
    });
    return;
  }

  if (!authPlugin) {
    authPlugin = standardAuthPlugins[pluginName];
  }

  if (!authPlugin) {
    throw new Error("Server requests authentication using unknown plugin ".concat(pluginName, ". See ", 'TODO: add plugins doco here', " on how to configure or author authentication plugins."));
  }

  connection._authPlugin = authPlugin({
    connection: connection,
    command: command
  });
  Promise.resolve(connection._authPlugin(pluginData)).then(function (data) {
    if (data) {
      connection.writePacket(new Packets.AuthSwitchResponse(data).toPacket());
    }
  })["catch"](function (err) {
    authSwitchPluginError(err, command);
  });
}

function authSwitchRequestMoreData(packet, connection, command) {
  var _Packets$AuthSwitchRe2 = Packets.AuthSwitchRequestMoreData.fromPacket(packet),
      data = _Packets$AuthSwitchRe2.data;

  if (connection.config.authSwitchHandler) {
    var legacySwitchHandler = connection.config.authSwitchHandler;
    warnLegacyAuthSwitch();
    legacySwitchHandler({
      pluginData: data
    }, function (err, data) {
      if (err) {
        return authSwitchPluginError(err, command);
      }

      connection.writePacket(new Packets.AuthSwitchResponse(data).toPacket());
    });
    return;
  }

  if (!connection._authPlugin) {
    throw new Error('AuthPluginMoreData received but no auth plugin instance found');
  }

  Promise.resolve(connection._authPlugin(data)).then(function (data) {
    if (data) {
      connection.writePacket(new Packets.AuthSwitchResponse(data).toPacket());
    }
  })["catch"](function (err) {
    authSwitchPluginError(err, command);
  });
}

module.exports = {
  authSwitchRequest: authSwitchRequest,
  authSwitchRequestMoreData: authSwitchRequestMoreData
};
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;

var __defNormalProp = function __defNormalProp(obj, key, value) {
  return key in obj ? __defProp(obj, key, {
    enumerable: true,
    configurable: true,
    writable: true,
    value: value
  }) : obj[key] = value;
};

var __markAsModule = function __markAsModule(target) {
  return __defProp(target, "__esModule", {
    value: true
  });
};

var __export = function __export(target, all) {
  __markAsModule(target);

  for (var name in all) {
    __defProp(target, name, {
      get: all[name],
      enumerable: true
    });
  }
};

var __reExport = function __reExport(target, module2, desc) {
  if (module2 && _typeof(module2) === "object" || typeof module2 === "function") {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      var _loop = function _loop() {
        var key = _step.value;
        if (!__hasOwnProp.call(target, key) && key !== "default") __defProp(target, key, {
          get: function get() {
            return module2[key];
          },
          enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable
        });
      };

      for (var _iterator = __getOwnPropNames(module2)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        _loop();
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }

  return target;
};

var __toModule = function __toModule(module2) {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {
    get: function get() {
      return module2["default"];
    },
    enumerable: true
  } : {
    value: module2,
    enumerable: true
  })), module2);
};

var __publicField = function __publicField(obj, key, value) {
  __defNormalProp(obj, _typeof(key) !== "symbol" ? key + "" : key, value);

  return value;
};

__export(exports, {
  RelationshipType: function RelationshipType() {
    return _RelationshipType;
  },
  "default": function _default() {
    return foreign_key_constraint_error_default;
  }
});

var import_database_error = __toModule(require("../database-error"));

var _RelationshipType =
/* @__PURE__ */
function (RelationshipType2) {
  RelationshipType2["parent"] = "parent";
  RelationshipType2["child"] = "child";
  return RelationshipType2;
}(_RelationshipType || {});

var ForeignKeyConstraintError =
/*#__PURE__*/
function (_import_database_erro) {
  _inherits(ForeignKeyConstraintError, _import_database_erro);

  function ForeignKeyConstraintError(options) {
    var _this;

    _classCallCheck(this, ForeignKeyConstraintError);

    options = options || {};
    options.parent = options.parent || {
      sql: "",
      name: "",
      message: ""
    };
    _this = _possibleConstructorReturn(this, _getPrototypeOf(ForeignKeyConstraintError).call(this, options.parent, {
      stack: options.stack
    }));

    __publicField(_assertThisInitialized(_this), "table");

    __publicField(_assertThisInitialized(_this), "fields");

    __publicField(_assertThisInitialized(_this), "value");

    __publicField(_assertThisInitialized(_this), "index");

    __publicField(_assertThisInitialized(_this), "reltype");

    _this.name = "SequelizeForeignKeyConstraintError";
    _this.message = options.message || options.parent.message || "Database Error";
    _this.fields = options.fields;
    _this.table = options.table;
    _this.value = options.value;
    _this.index = options.index;
    _this.reltype = options.reltype;
    return _this;
  }

  return ForeignKeyConstraintError;
}(import_database_error["default"]);

var foreign_key_constraint_error_default = ForeignKeyConstraintError;
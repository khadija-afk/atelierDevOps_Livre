"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeGetSet = makeGetSet;
exports.get = get;
exports.set = set;
exports.stringGet = stringGet;
exports.stringSet = stringSet;

var _aliases = require("../units/aliases");

var _priorities = require("../units/priorities");

var _hooks = require("../utils/hooks");

var _isFunction = _interopRequireDefault(require("../utils/is-function"));

var _year = require("../units/year");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function makeGetSet(unit, keepTime) {
  return function (value) {
    if (value != null) {
      set(this, unit, value);

      _hooks.hooks.updateOffset(this, keepTime);

      return this;
    } else {
      return get(this, unit);
    }
  };
}

function get(mom, unit) {
  if (!mom.isValid()) {
    return NaN;
  }

  var d = mom._d,
      isUTC = mom._isUTC;

  switch (unit) {
    case 'Milliseconds':
      return isUTC ? d.getUTCMilliseconds() : d.getMilliseconds();

    case 'Seconds':
      return isUTC ? d.getUTCSeconds() : d.getSeconds();

    case 'Minutes':
      return isUTC ? d.getUTCMinutes() : d.getMinutes();

    case 'Hours':
      return isUTC ? d.getUTCHours() : d.getHours();

    case 'Date':
      return isUTC ? d.getUTCDate() : d.getDate();

    case 'Day':
      return isUTC ? d.getUTCDay() : d.getDay();

    case 'Month':
      return isUTC ? d.getUTCMonth() : d.getMonth();

    case 'FullYear':
      return isUTC ? d.getUTCFullYear() : d.getFullYear();

    default:
      return NaN;
    // Just in case
  }
}

function set(mom, unit, value) {
  var d, isUTC, year, month, date;

  if (!mom.isValid() || isNaN(value)) {
    return;
  }

  d = mom._d;
  isUTC = mom._isUTC;

  switch (unit) {
    case 'Milliseconds':
      return void (isUTC ? d.setUTCMilliseconds(value) : d.setMilliseconds(value));

    case 'Seconds':
      return void (isUTC ? d.setUTCSeconds(value) : d.setSeconds(value));

    case 'Minutes':
      return void (isUTC ? d.setUTCMinutes(value) : d.setMinutes(value));

    case 'Hours':
      return void (isUTC ? d.setUTCHours(value) : d.setHours(value));

    case 'Date':
      return void (isUTC ? d.setUTCDate(value) : d.setDate(value));
    // case 'Day': // Not real
    //    return void (isUTC ? d.setUTCDay(value) : d.setDay(value));
    // case 'Month': // Not used because we need to pass two variables
    //     return void (isUTC ? d.setUTCMonth(value) : d.setMonth(value));

    case 'FullYear':
      break;
    // See below ...

    default:
      return;
    // Just in case
  }

  year = value;
  month = mom.month();
  date = mom.date();
  date = date === 29 && month === 1 && !(0, _year.isLeapYear)(year) ? 28 : date;
  void (isUTC ? d.setUTCFullYear(year, month, date) : d.setFullYear(year, month, date));
} // MOMENTS


function stringGet(units) {
  units = (0, _aliases.normalizeUnits)(units);

  if ((0, _isFunction["default"])(this[units])) {
    return this[units]();
  }

  return this;
}

function stringSet(units, value) {
  if (_typeof(units) === 'object') {
    units = (0, _aliases.normalizeObjectUnits)(units);
    var prioritized = (0, _priorities.getPrioritizedUnits)(units),
        i,
        prioritizedLen = prioritized.length;

    for (i = 0; i < prioritizedLen; i++) {
      this[prioritized[i].unit](units[prioritized[i].unit]);
    }
  } else {
    units = (0, _aliases.normalizeUnits)(units);

    if ((0, _isFunction["default"])(this[units])) {
      return this[units](value);
    }
  }

  return this;
}
// This file was modified by Oracle on September 21, 2021.
// The changes involve saving additional authentication factor passwords
// in the command scope and enabling multi-factor authentication in the
// client-side when the server supports it.
// Modifications copyright (c) 2021, Oracle and/or its affiliates.
'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Command = require('./command.js');

var Packets = require('../packets/index.js');

var ClientConstants = require('../constants/client');

var ClientHandshake = require('./client_handshake.js');

var CharsetToEncoding = require('../constants/charset_encodings.js');

var ChangeUser =
/*#__PURE__*/
function (_Command) {
  _inherits(ChangeUser, _Command);

  function ChangeUser(options, callback) {
    var _this;

    _classCallCheck(this, ChangeUser);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ChangeUser).call(this));
    _this.onResult = callback;
    _this.user = options.user;
    _this.password = options.password; // "password1" is an alias of "password"

    _this.password1 = options.password;
    _this.password2 = options.password2;
    _this.password3 = options.password3;
    _this.database = options.database;
    _this.passwordSha1 = options.passwordSha1;
    _this.charsetNumber = options.charsetNumber;
    _this.currentConfig = options.currentConfig;
    _this.authenticationFactor = 0;
    return _this;
  }

  _createClass(ChangeUser, [{
    key: "start",
    value: function start(packet, connection) {
      var newPacket = new Packets.ChangeUser({
        flags: connection.config.clientFlags,
        user: this.user,
        database: this.database,
        charsetNumber: this.charsetNumber,
        password: this.password,
        passwordSha1: this.passwordSha1,
        authPluginData1: connection._handshakePacket.authPluginData1,
        authPluginData2: connection._handshakePacket.authPluginData2
      });
      this.currentConfig.user = this.user;
      this.currentConfig.password = this.password;
      this.currentConfig.database = this.database;
      this.currentConfig.charsetNumber = this.charsetNumber;
      connection.clientEncoding = CharsetToEncoding[this.charsetNumber]; // clear prepared statements cache as all statements become invalid after changeUser

      connection._statements.clear();

      connection.writePacket(newPacket.toPacket()); // check if the server supports multi-factor authentication

      var multiFactorAuthentication = connection.serverCapabilityFlags & ClientConstants.MULTI_FACTOR_AUTHENTICATION;

      if (multiFactorAuthentication) {
        // if the server supports multi-factor authentication, we enable it in
        // the client
        this.authenticationFactor = 1;
      }

      return ChangeUser.prototype.handshakeResult;
    }
  }]);

  return ChangeUser;
}(Command);

ChangeUser.prototype.handshakeResult = ClientHandshake.prototype.handshakeResult;
ChangeUser.prototype.calculateNativePasswordAuthToken = ClientHandshake.prototype.calculateNativePasswordAuthToken;
module.exports = ChangeUser;
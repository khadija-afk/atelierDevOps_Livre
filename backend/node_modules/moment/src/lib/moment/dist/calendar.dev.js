"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getCalendarFormat = getCalendarFormat;
exports.calendar = calendar;

var _local = require("../create/local");

var _offset = require("../units/offset");

var _isFunction = _interopRequireDefault(require("../utils/is-function"));

var _hooks = require("../utils/hooks");

var _isMomentInput = require("../utils/is-moment-input");

var _isCalendarSpec = _interopRequireDefault(require("../utils/is-calendar-spec"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function getCalendarFormat(myMoment, now) {
  var diff = myMoment.diff(now, 'days', true);
  return diff < -6 ? 'sameElse' : diff < -1 ? 'lastWeek' : diff < 0 ? 'lastDay' : diff < 1 ? 'sameDay' : diff < 2 ? 'nextDay' : diff < 7 ? 'nextWeek' : 'sameElse';
}

function calendar(time, formats) {
  // Support for single parameter, formats only overload to the calendar function
  if (arguments.length === 1) {
    if (!arguments[0]) {
      time = undefined;
      formats = undefined;
    } else if ((0, _isMomentInput.isMomentInput)(arguments[0])) {
      time = arguments[0];
      formats = undefined;
    } else if ((0, _isCalendarSpec["default"])(arguments[0])) {
      formats = arguments[0];
      time = undefined;
    }
  } // We want to compare the start of today, vs this.
  // Getting start-of-today depends on whether we're local/utc/offset or not.


  var now = time || (0, _local.createLocal)(),
      sod = (0, _offset.cloneWithOffset)(now, this).startOf('day'),
      format = _hooks.hooks.calendarFormat(this, sod) || 'sameElse',
      output = formats && ((0, _isFunction["default"])(formats[format]) ? formats[format].call(this, now) : formats[format]);
  return this.format(output || this.localeData().calendar(format, this, (0, _local.createLocal)(now)));
}
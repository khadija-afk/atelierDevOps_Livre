'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var EventEmitter = require('events').EventEmitter;

var Timers = require('timers');

var Command =
/*#__PURE__*/
function (_EventEmitter) {
  _inherits(Command, _EventEmitter);

  function Command() {
    var _this;

    _classCallCheck(this, Command);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Command).call(this));
    _this.next = null;
    return _this;
  } // slow. debug only


  _createClass(Command, [{
    key: "stateName",
    value: function stateName() {
      var state = this.next;

      for (var i in this) {
        if (this[i] === state && i !== 'next') {
          return i;
        }
      }

      return 'unknown name';
    }
  }, {
    key: "execute",
    value: function execute(packet, connection) {
      if (!this.next) {
        this.next = this.start;

        connection._resetSequenceId();
      }

      if (packet && packet.isError()) {
        var err = packet.asError(connection.clientEncoding);
        err.sql = this.sql || this.query;

        if (this.queryTimeout) {
          Timers.clearTimeout(this.queryTimeout);
          this.queryTimeout = null;
        }

        if (this.onResult) {
          this.onResult(err);
          this.emit('end');
        } else {
          this.emit('error', err);
          this.emit('end');
        }

        return true;
      } // TODO: don't return anything from execute, it's ugly and error-prone. Listen for 'end' event in connection


      this.next = this.next(packet, connection);

      if (this.next) {
        return false;
      }

      this.emit('end');
      return true;
    }
  }]);

  return Command;
}(EventEmitter);

module.exports = Command;
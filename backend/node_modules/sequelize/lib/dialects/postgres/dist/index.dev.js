"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _ = require("lodash");

var AbstractDialect = require("../abstract");

var ConnectionManager = require("./connection-manager");

var Query = require("./query");

var QueryGenerator = require("./query-generator");

var DataTypes = require("../../data-types").postgres;

var _require = require("./query-interface"),
    PostgresQueryInterface = _require.PostgresQueryInterface;

var PostgresDialect =
/*#__PURE__*/
function (_AbstractDialect) {
  _inherits(PostgresDialect, _AbstractDialect);

  function PostgresDialect(sequelize) {
    var _this;

    _classCallCheck(this, PostgresDialect);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(PostgresDialect).call(this));
    _this.sequelize = sequelize;
    _this.connectionManager = new ConnectionManager(_assertThisInitialized(_this), sequelize);
    _this.queryGenerator = new QueryGenerator({
      _dialect: _assertThisInitialized(_this),
      sequelize: sequelize
    });
    _this.queryInterface = new PostgresQueryInterface(sequelize, _this.queryGenerator);
    return _this;
  }

  _createClass(PostgresDialect, [{
    key: "canBackslashEscape",
    value: function canBackslashEscape() {
      return !this.sequelize.options.standardConformingStrings;
    }
  }]);

  return PostgresDialect;
}(AbstractDialect);

PostgresDialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {
  "DEFAULT VALUES": true,
  EXCEPTION: true,
  "ON DUPLICATE KEY": false,
  "ORDER NULLS": true,
  returnValues: {
    returning: true
  },
  bulkDefault: true,
  schemas: true,
  lock: true,
  lockOf: true,
  lockKey: true,
  lockOuterJoinFailure: true,
  skipLocked: true,
  forShare: "FOR SHARE",
  index: {
    concurrently: true,
    using: 2,
    where: true,
    functionBased: true,
    operator: true
  },
  inserts: {
    onConflictDoNothing: " ON CONFLICT DO NOTHING",
    updateOnDuplicate: " ON CONFLICT DO UPDATE SET",
    conflictFields: true,
    onConflictWhere: true
  },
  NUMERIC: true,
  ARRAY: true,
  RANGE: true,
  GEOMETRY: true,
  REGEXP: true,
  GEOGRAPHY: true,
  JSON: true,
  JSONB: true,
  HSTORE: true,
  TSVECTOR: true,
  deferrableConstraints: true,
  searchPath: true,
  escapeStringConstants: true
});
PostgresDialect.prototype.defaultVersion = "9.5.0";
PostgresDialect.prototype.Query = Query;
PostgresDialect.prototype.DataTypes = DataTypes;
PostgresDialect.prototype.name = "postgres";
PostgresDialect.prototype.TICK_CHAR = '"';
PostgresDialect.prototype.TICK_CHAR_LEFT = PostgresDialect.prototype.TICK_CHAR;
PostgresDialect.prototype.TICK_CHAR_RIGHT = PostgresDialect.prototype.TICK_CHAR;
module.exports = PostgresDialect;
module.exports["default"] = PostgresDialect;
module.exports.PostgresDialect = PostgresDialect;
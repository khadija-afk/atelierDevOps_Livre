"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var moment = require("moment");

module.exports = function (BaseTypes) {
  var warn = BaseTypes.ABSTRACT.warn.bind(void 0, "https://msdn.microsoft.com/en-us/library/ms187752%28v=sql.110%29.aspx");

  function removeUnsupportedIntegerOptions(dataType) {
    if (dataType._length || dataType.options.length || dataType._unsigned || dataType._zerofill) {
      warn("MSSQL does not support '".concat(dataType.key, "' with options. Plain '").concat(dataType.key, "' will be used instead."));
      dataType._length = void 0;
      dataType.options.length = void 0;
      dataType._unsigned = void 0;
      dataType._zerofill = void 0;
    }
  }

  BaseTypes.DATE.types.mssql = [43];
  BaseTypes.STRING.types.mssql = [231, 173];
  BaseTypes.CHAR.types.mssql = [175];
  BaseTypes.TEXT.types.mssql = false;
  BaseTypes.TINYINT.types.mssql = [30];
  BaseTypes.SMALLINT.types.mssql = [34];
  BaseTypes.MEDIUMINT.types.mssql = false;
  BaseTypes.INTEGER.types.mssql = [38];
  BaseTypes.BIGINT.types.mssql = false;
  BaseTypes.FLOAT.types.mssql = [109];
  BaseTypes.TIME.types.mssql = [41];
  BaseTypes.DATEONLY.types.mssql = [40];
  BaseTypes.BOOLEAN.types.mssql = [104];
  BaseTypes.BLOB.types.mssql = [165];
  BaseTypes.DECIMAL.types.mssql = [106];
  BaseTypes.UUID.types.mssql = false;
  BaseTypes.ENUM.types.mssql = false;
  BaseTypes.REAL.types.mssql = [109];
  BaseTypes.DOUBLE.types.mssql = [109];
  BaseTypes.GEOMETRY.types.mssql = false;

  var BLOB =
  /*#__PURE__*/
  function (_BaseTypes$BLOB) {
    _inherits(BLOB, _BaseTypes$BLOB);

    function BLOB() {
      _classCallCheck(this, BLOB);

      return _possibleConstructorReturn(this, _getPrototypeOf(BLOB).apply(this, arguments));
    }

    _createClass(BLOB, [{
      key: "toSql",
      value: function toSql() {
        if (this._length) {
          if (this._length.toLowerCase() === "tiny") {
            warn("MSSQL does not support BLOB with the `length` = `tiny` option. `VARBINARY(256)` will be used instead.");
            return "VARBINARY(256)";
          }

          warn("MSSQL does not support BLOB with the `length` option. `VARBINARY(MAX)` will be used instead.");
        }

        return "VARBINARY(MAX)";
      }
    }, {
      key: "_hexify",
      value: function _hexify(hex) {
        return "0x".concat(hex);
      }
    }]);

    return BLOB;
  }(BaseTypes.BLOB);

  var STRING =
  /*#__PURE__*/
  function (_BaseTypes$STRING) {
    _inherits(STRING, _BaseTypes$STRING);

    function STRING() {
      _classCallCheck(this, STRING);

      return _possibleConstructorReturn(this, _getPrototypeOf(STRING).apply(this, arguments));
    }

    _createClass(STRING, [{
      key: "toSql",
      value: function toSql() {
        if (!this._binary) {
          return "NVARCHAR(".concat(this._length, ")");
        }

        return "BINARY(".concat(this._length, ")");
      }
    }, {
      key: "_stringify",
      value: function _stringify(value, options) {
        if (this._binary) {
          return BLOB.prototype._stringify(value);
        }

        return options.escape(value);
      }
    }, {
      key: "_bindParam",
      value: function _bindParam(value, options) {
        return options.bindParam(this._binary ? Buffer.from(value) : value);
      }
    }]);

    return STRING;
  }(BaseTypes.STRING);

  STRING.prototype.escape = false;

  var TEXT =
  /*#__PURE__*/
  function (_BaseTypes$TEXT) {
    _inherits(TEXT, _BaseTypes$TEXT);

    function TEXT() {
      _classCallCheck(this, TEXT);

      return _possibleConstructorReturn(this, _getPrototypeOf(TEXT).apply(this, arguments));
    }

    _createClass(TEXT, [{
      key: "toSql",
      value: function toSql() {
        if (this._length) {
          if (this._length.toLowerCase() === "tiny") {
            warn("MSSQL does not support TEXT with the `length` = `tiny` option. `NVARCHAR(256)` will be used instead.");
            return "NVARCHAR(256)";
          }

          warn("MSSQL does not support TEXT with the `length` option. `NVARCHAR(MAX)` will be used instead.");
        }

        return "NVARCHAR(MAX)";
      }
    }]);

    return TEXT;
  }(BaseTypes.TEXT);

  var BOOLEAN =
  /*#__PURE__*/
  function (_BaseTypes$BOOLEAN) {
    _inherits(BOOLEAN, _BaseTypes$BOOLEAN);

    function BOOLEAN() {
      _classCallCheck(this, BOOLEAN);

      return _possibleConstructorReturn(this, _getPrototypeOf(BOOLEAN).apply(this, arguments));
    }

    _createClass(BOOLEAN, [{
      key: "toSql",
      value: function toSql() {
        return "BIT";
      }
    }]);

    return BOOLEAN;
  }(BaseTypes.BOOLEAN);

  var UUID =
  /*#__PURE__*/
  function (_BaseTypes$UUID) {
    _inherits(UUID, _BaseTypes$UUID);

    function UUID() {
      _classCallCheck(this, UUID);

      return _possibleConstructorReturn(this, _getPrototypeOf(UUID).apply(this, arguments));
    }

    _createClass(UUID, [{
      key: "toSql",
      value: function toSql() {
        return "CHAR(36)";
      }
    }]);

    return UUID;
  }(BaseTypes.UUID);

  var NOW =
  /*#__PURE__*/
  function (_BaseTypes$NOW) {
    _inherits(NOW, _BaseTypes$NOW);

    function NOW() {
      _classCallCheck(this, NOW);

      return _possibleConstructorReturn(this, _getPrototypeOf(NOW).apply(this, arguments));
    }

    _createClass(NOW, [{
      key: "toSql",
      value: function toSql() {
        return "GETDATE()";
      }
    }]);

    return NOW;
  }(BaseTypes.NOW);

  var DATE =
  /*#__PURE__*/
  function (_BaseTypes$DATE) {
    _inherits(DATE, _BaseTypes$DATE);

    function DATE() {
      _classCallCheck(this, DATE);

      return _possibleConstructorReturn(this, _getPrototypeOf(DATE).apply(this, arguments));
    }

    _createClass(DATE, [{
      key: "toSql",
      value: function toSql() {
        return "DATETIMEOFFSET";
      }
    }]);

    return DATE;
  }(BaseTypes.DATE);

  var DATEONLY =
  /*#__PURE__*/
  function (_BaseTypes$DATEONLY) {
    _inherits(DATEONLY, _BaseTypes$DATEONLY);

    function DATEONLY() {
      _classCallCheck(this, DATEONLY);

      return _possibleConstructorReturn(this, _getPrototypeOf(DATEONLY).apply(this, arguments));
    }

    _createClass(DATEONLY, null, [{
      key: "parse",
      value: function parse(value) {
        return moment(value).format("YYYY-MM-DD");
      }
    }]);

    return DATEONLY;
  }(BaseTypes.DATEONLY);

  var INTEGER =
  /*#__PURE__*/
  function (_BaseTypes$INTEGER) {
    _inherits(INTEGER, _BaseTypes$INTEGER);

    function INTEGER(length) {
      var _this;

      _classCallCheck(this, INTEGER);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(INTEGER).call(this, length));
      removeUnsupportedIntegerOptions(_assertThisInitialized(_this));
      return _this;
    }

    return INTEGER;
  }(BaseTypes.INTEGER);

  var TINYINT =
  /*#__PURE__*/
  function (_BaseTypes$TINYINT) {
    _inherits(TINYINT, _BaseTypes$TINYINT);

    function TINYINT(length) {
      var _this2;

      _classCallCheck(this, TINYINT);

      _this2 = _possibleConstructorReturn(this, _getPrototypeOf(TINYINT).call(this, length));
      removeUnsupportedIntegerOptions(_assertThisInitialized(_this2));
      return _this2;
    }

    return TINYINT;
  }(BaseTypes.TINYINT);

  var SMALLINT =
  /*#__PURE__*/
  function (_BaseTypes$SMALLINT) {
    _inherits(SMALLINT, _BaseTypes$SMALLINT);

    function SMALLINT(length) {
      var _this3;

      _classCallCheck(this, SMALLINT);

      _this3 = _possibleConstructorReturn(this, _getPrototypeOf(SMALLINT).call(this, length));
      removeUnsupportedIntegerOptions(_assertThisInitialized(_this3));
      return _this3;
    }

    return SMALLINT;
  }(BaseTypes.SMALLINT);

  var BIGINT =
  /*#__PURE__*/
  function (_BaseTypes$BIGINT) {
    _inherits(BIGINT, _BaseTypes$BIGINT);

    function BIGINT(length) {
      var _this4;

      _classCallCheck(this, BIGINT);

      _this4 = _possibleConstructorReturn(this, _getPrototypeOf(BIGINT).call(this, length));
      removeUnsupportedIntegerOptions(_assertThisInitialized(_this4));
      return _this4;
    }

    return BIGINT;
  }(BaseTypes.BIGINT);

  var REAL =
  /*#__PURE__*/
  function (_BaseTypes$REAL) {
    _inherits(REAL, _BaseTypes$REAL);

    function REAL(length, decimals) {
      var _this5;

      _classCallCheck(this, REAL);

      _this5 = _possibleConstructorReturn(this, _getPrototypeOf(REAL).call(this, length, decimals));

      if (_this5._length || _this5.options.length || _this5._unsigned || _this5._zerofill) {
        warn("MSSQL does not support REAL with options. Plain `REAL` will be used instead.");
        _this5._length = void 0;
        _this5.options.length = void 0;
        _this5._unsigned = void 0;
        _this5._zerofill = void 0;
      }

      return _this5;
    }

    return REAL;
  }(BaseTypes.REAL);

  var FLOAT =
  /*#__PURE__*/
  function (_BaseTypes$FLOAT) {
    _inherits(FLOAT, _BaseTypes$FLOAT);

    function FLOAT(length, decimals) {
      var _this6;

      _classCallCheck(this, FLOAT);

      _this6 = _possibleConstructorReturn(this, _getPrototypeOf(FLOAT).call(this, length, decimals));

      if (_this6._decimals) {
        warn("MSSQL does not support Float with decimals. Plain `FLOAT` will be used instead.");
        _this6._length = void 0;
        _this6.options.length = void 0;
      }

      if (_this6._unsigned) {
        warn("MSSQL does not support Float unsigned. `UNSIGNED` was removed.");
        _this6._unsigned = void 0;
      }

      if (_this6._zerofill) {
        warn("MSSQL does not support Float zerofill. `ZEROFILL` was removed.");
        _this6._zerofill = void 0;
      }

      return _this6;
    }

    return FLOAT;
  }(BaseTypes.FLOAT);

  var ENUM =
  /*#__PURE__*/
  function (_BaseTypes$ENUM) {
    _inherits(ENUM, _BaseTypes$ENUM);

    function ENUM() {
      _classCallCheck(this, ENUM);

      return _possibleConstructorReturn(this, _getPrototypeOf(ENUM).apply(this, arguments));
    }

    _createClass(ENUM, [{
      key: "toSql",
      value: function toSql() {
        return "VARCHAR(255)";
      }
    }]);

    return ENUM;
  }(BaseTypes.ENUM);

  return {
    BLOB: BLOB,
    BOOLEAN: BOOLEAN,
    ENUM: ENUM,
    STRING: STRING,
    UUID: UUID,
    DATE: DATE,
    DATEONLY: DATEONLY,
    NOW: NOW,
    TINYINT: TINYINT,
    SMALLINT: SMALLINT,
    INTEGER: INTEGER,
    BIGINT: BIGINT,
    REAL: REAL,
    FLOAT: FLOAT,
    TEXT: TEXT
  };
};
'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Packet = require('../packets/packet');

var CommandCodes = require('../constants/commands');

var StringParser = require('../parsers/string.js');

var CharsetToEncoding = require('../constants/charset_encodings.js');

var PrepareStatement =
/*#__PURE__*/
function () {
  function PrepareStatement(sql, charsetNumber) {
    _classCallCheck(this, PrepareStatement);

    this.query = sql;
    this.charsetNumber = charsetNumber;
    this.encoding = CharsetToEncoding[charsetNumber];
  }

  _createClass(PrepareStatement, [{
    key: "toPacket",
    value: function toPacket() {
      var buf = StringParser.encode(this.query, this.encoding);
      var length = 5 + buf.length;
      var buffer = Buffer.allocUnsafe(length);
      var packet = new Packet(0, buffer, 0, length);
      packet.offset = 4;
      packet.writeInt8(CommandCodes.STMT_PREPARE);
      packet.writeBuffer(buf);
      return packet;
    }
  }]);

  return PrepareStatement;
}();

module.exports = PrepareStatement;
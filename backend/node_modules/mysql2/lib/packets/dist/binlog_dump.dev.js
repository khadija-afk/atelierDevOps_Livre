'use strict'; // http://dev.mysql.com/doc/internals/en/com-binlog-dump.html#packet-COM_BINLOG_DUMP

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Packet = require('../packets/packet');

var CommandCodes = require('../constants/commands'); // TODO: add flag to constants
// 0x01 - BINLOG_DUMP_NON_BLOCK
// send EOF instead of blocking


var BinlogDump =
/*#__PURE__*/
function () {
  function BinlogDump(opts) {
    _classCallCheck(this, BinlogDump);

    this.binlogPos = opts.binlogPos || 0;
    this.serverId = opts.serverId || 0;
    this.flags = opts.flags || 0;
    this.filename = opts.filename || '';
  }

  _createClass(BinlogDump, [{
    key: "toPacket",
    value: function toPacket() {
      var length = 15 + Buffer.byteLength(this.filename, 'utf8'); // TODO: should be ascii?

      var buffer = Buffer.allocUnsafe(length);
      var packet = new Packet(0, buffer, 0, length);
      packet.offset = 4;
      packet.writeInt8(CommandCodes.BINLOG_DUMP);
      packet.writeInt32(this.binlogPos);
      packet.writeInt16(this.flags);
      packet.writeInt32(this.serverId);
      packet.writeString(this.filename);
      return packet;
    }
  }]);

  return BinlogDump;
}();

module.exports = BinlogDump;
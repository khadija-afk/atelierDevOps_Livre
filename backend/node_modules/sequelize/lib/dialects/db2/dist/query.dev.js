"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var util = require("util");

var AbstractQuery = require("../abstract/query");

var sequelizeErrors = require("../../errors");

var parserStore = require("../parserStore")("db2");

var _ = require("lodash");

var _require = require("../../utils/logger"),
    logger = _require.logger;

var moment = require("moment");

var debug = logger.debugContext("sql:db2");

var Query =
/*#__PURE__*/
function (_AbstractQuery) {
  _inherits(Query, _AbstractQuery);

  function Query() {
    _classCallCheck(this, Query);

    return _possibleConstructorReturn(this, _getPrototypeOf(Query).apply(this, arguments));
  }

  _createClass(Query, [{
    key: "getInsertIdField",
    value: function getInsertIdField() {
      return "id";
    }
  }, {
    key: "getSQLTypeFromJsType",
    value: function getSQLTypeFromJsType(value) {
      if (Buffer.isBuffer(value)) {
        return {
          ParamType: "INPUT",
          DataType: "BLOB",
          Data: value
        };
      }

      if (typeof value === "bigint") {
        return value.toString();
      }

      return value;
    }
  }, {
    key: "_run",
    value: function _run(connection, sql, parameters) {
      var _this = this;

      var benchmark, queryBegin, errStack;
      return regeneratorRuntime.async(function _run$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.sql = sql;
              benchmark = this.sequelize.options.benchmark || this.options.benchmark;

              if (benchmark) {
                queryBegin = Date.now();
              } else {
                this.sequelize.log("Executing (".concat(this.connection.uuid || "default", "): ").concat(this.sql), this.options);
              }

              errStack = new Error().stack;
              return _context.abrupt("return", new Promise(function (resolve, reject) {
                if (_.startsWith(_this.sql, "BEGIN TRANSACTION")) {
                  connection.beginTransaction(function (err) {
                    if (err) {
                      reject(_this.formatError(err, errStack));
                    } else {
                      resolve(_this.formatResults());
                    }
                  });
                } else if (_.startsWith(_this.sql, "COMMIT TRANSACTION")) {
                  connection.commitTransaction(function (err) {
                    if (err) {
                      reject(_this.formatError(err, errStack));
                    } else {
                      resolve(_this.formatResults());
                    }
                  });
                } else if (_.startsWith(_this.sql, "ROLLBACK TRANSACTION")) {
                  connection.rollbackTransaction(function (err) {
                    if (err) {
                      reject(_this.formatError(err, errStack));
                    } else {
                      resolve(_this.formatResults());
                    }
                  });
                } else if (_.startsWith(_this.sql, "SAVE TRANSACTION")) {
                  connection.commitTransaction(function (err) {
                    if (err) {
                      reject(_this.formatError(err, errStack));
                    } else {
                      connection.beginTransaction(function (err2) {
                        if (err2) {
                          reject(_this.formatError(err2, errStack));
                        } else {
                          resolve(_this.formatResults());
                        }
                      });
                    }
                  }, _this.options.transaction.name);
                } else {
                  var params = [];

                  if (parameters) {
                    _.forOwn(parameters, function (value, key) {
                      var param = _this.getSQLTypeFromJsType(value, key);

                      params.push(param);
                    });
                  }

                  var SQL = _this.sql.toUpperCase();

                  var newSql = _this.sql;

                  if ((_this.isSelectQuery() || _.startsWith(SQL, "SELECT ")) && SQL.indexOf(" FROM ", 8) === -1) {
                    if (_this.sql.charAt(_this.sql.length - 1) === ";") {
                      newSql = _this.sql.slice(0, _this.sql.length - 1);
                    }

                    newSql += " FROM SYSIBM.SYSDUMMY1;";
                  }

                  connection.prepare(newSql, function (err, stmt) {
                    if (err) {
                      reject(_this.formatError(err, errStack));
                    }

                    stmt.execute(params, function (err2, result, outparams) {
                      debug("executed(".concat(_this.connection.uuid || "default", "):").concat(newSql, " ").concat(parameters ? util.inspect(parameters, {
                        compact: true,
                        breakLength: Infinity
                      }) : ""));

                      if (benchmark) {
                        _this.sequelize.log("Executed (".concat(_this.connection.uuid || "default", "): ").concat(newSql, " ").concat(parameters ? util.inspect(parameters, {
                          compact: true,
                          breakLength: Infinity
                        }) : ""), Date.now() - queryBegin, _this.options);
                      }

                      if (err2 && err2.message) {
                        err2 = _this.filterSQLError(err2, _this.sql, connection);

                        if (err2 === null) {
                          stmt.closeSync();
                          resolve(_this.formatResults([], 0));
                        }
                      }

                      if (err2) {
                        err2.sql = sql;
                        stmt.closeSync();
                        reject(_this.formatError(err2, errStack, connection, parameters));
                      } else {
                        var data = [];
                        var metadata = [];
                        var affectedRows = 0;

                        if (_typeof(result) === "object") {
                          if (_.startsWith(_this.sql, "DELETE FROM ")) {
                            affectedRows = result.getAffectedRowsSync();
                          } else {
                            data = result.fetchAllSync();
                            metadata = result.getColumnMetadataSync();
                          }

                          result.closeSync();
                        }

                        stmt.closeSync();
                        var datalen = data.length;

                        if (datalen > 0) {
                          var coltypes = {};

                          for (var i = 0; i < metadata.length; i++) {
                            coltypes[metadata[i].SQL_DESC_NAME] = metadata[i].SQL_DESC_TYPE_NAME;
                          }

                          for (var _i = 0; _i < datalen; _i++) {
                            for (var column in data[_i]) {
                              var parse = parserStore.get(coltypes[column]);
                              var value = data[_i][column];

                              if (value !== null) {
                                if (parse) {
                                  data[_i][column] = parse(value);
                                } else if (coltypes[column] === "TIMESTAMP") {
                                  data[_i][column] = new Date(moment.utc(value));
                                } else if (coltypes[column] === "BLOB") {
                                  data[_i][column] = new Buffer.from(value);
                                } else if (coltypes[column].indexOf("FOR BIT DATA") > 0) {
                                  data[_i][column] = new Buffer.from(value, "hex");
                                }
                              }
                            }
                          }

                          if (outparams && outparams.length) {
                            data.unshift(outparams);
                          }

                          resolve(_this.formatResults(data, datalen, metadata, connection));
                        } else {
                          resolve(_this.formatResults(data, affectedRows));
                        }
                      }
                    });
                  });
                }
              }));

            case 5:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "run",
    value: function run(sql, parameters) {
      return regeneratorRuntime.async(function run$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return regeneratorRuntime.awrap(this._run(this.connection, sql, parameters));

            case 2:
              return _context2.abrupt("return", _context2.sent);

            case 3:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "filterSQLError",
    value: function filterSQLError(err, sql, connection) {
      if (err.message.search("SQL0204N") != -1 && _.startsWith(sql, "DROP ")) {
        err = null;
      } else if (err.message.search("SQL0443N") != -1) {
        if (this.isDropSchemaQuery()) {
          connection.querySync("DROP TABLE ERRORSCHEMA.ERRORTABLE;");
          connection.querySync(this.sql);
        }

        err = null;
      } else if (err.message.search("SQL0601N") != -1) {
        var match = err.message.match(/SQL0601N {2}The name of the object to be created is identical to the existing name "(.*)" of type "(.*)"./);

        if (match && match.length > 1 && match[2] === "TABLE") {
          var table;
          var mtarray = match[1].split(".");

          if (mtarray[1]) {
            table = "\"".concat(mtarray[0], "\".\"").concat(mtarray[1], "\"");
          } else {
            table = "\"".concat(mtarray[0], "\"");
          }

          if (connection.dropTable !== false) {
            connection.querySync("DROP TABLE ".concat(table));
            err = connection.querySync(sql);
          } else {
            err = null;
          }
        } else {
          err = null;
        }
      } else if (err.message.search("SQL0911N") != -1) {
        if (err.message.search('Reason code "2"') != -1) {
          err = null;
        }
      } else if (err.message.search("SQL0605W") != -1) {
        err = null;
      } else if (err.message.search("SQL0668N") != -1 && _.startsWith(sql, "ALTER TABLE ")) {
        connection.querySync("CALL SYSPROC.ADMIN_CMD('REORG TABLE ".concat(sql.substring(12).split(" ")[0], "')"));
        err = connection.querySync(sql);
      }

      if (err && err.length === 0) {
        err = null;
      }

      return err;
    }
  }, {
    key: "formatResults",
    value: function formatResults(data, rowCount, metadata, conn) {
      var result = this.instance;

      if (this.isInsertQuery(data, metadata)) {
        this.handleInsertQuery(data, metadata);

        if (!this.instance) {
          if (this.options.plain) {
            var record = data[0];
            result = record[Object.keys(record)[0]];
          } else {
            result = data;
          }
        }
      }

      if (this.isShowTablesQuery()) {
        result = data;
      } else if (this.isDescribeQuery()) {
        result = {};
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = data[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var _result = _step.value;

            if (_result.Default) {
              _result.Default = _result.Default.replace("('", "").replace("')", "").replace(/'/g, "");
            }

            result[_result.Name] = {
              type: _result.Type.toUpperCase(),
              allowNull: _result.IsNull === "Y" ? true : false,
              defaultValue: _result.Default,
              primaryKey: _result.KeySeq > 0,
              autoIncrement: _result.IsIdentity === "Y" ? true : false,
              comment: _result.Comment
            };
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      } else if (this.isShowIndexesQuery()) {
        result = this.handleShowIndexesQuery(data);
      } else if (this.isSelectQuery()) {
        result = this.handleSelectQuery(data);
      } else if (this.isUpsertQuery()) {
        result = data;
      } else if (this.isDropSchemaQuery()) {
        result = data[0];

        if (conn) {
          var query = "DROP TABLE ERRORSCHEMA.ERRORTABLE";
          conn.querySync(query);
        }
      } else if (this.isCallQuery()) {
        result = data;
      } else if (this.isBulkUpdateQuery()) {
        result = data.length;
      } else if (this.isBulkDeleteQuery()) {
        result = rowCount;
      } else if (this.isVersionQuery()) {
        result = data[0].VERSION;
      } else if (this.isForeignKeysQuery()) {
        result = data;
      } else if (this.isInsertQuery() || this.isUpdateQuery()) {
        result = [result, rowCount];
      } else if (this.isShowConstraintsQuery()) {
        result = this.handleShowConstraintsQuery(data);
      } else if (this.isRawQuery()) {
        result = [data, metadata];
      } else {
        result = data;
      }

      return result;
    }
  }, {
    key: "handleShowTablesQuery",
    value: function handleShowTablesQuery(results) {
      return results.map(function (resultSet) {
        return {
          tableName: resultSet.TABLE_NAME,
          schema: resultSet.TABLE_SCHEMA
        };
      });
    }
  }, {
    key: "handleShowConstraintsQuery",
    value: function handleShowConstraintsQuery(data) {
      return _.remove(data, function (constraint) {
        return !_.startsWith(constraint.constraintName, "SQL");
      });
    }
  }, {
    key: "formatError",
    value: function formatError(err, errStack, conn, parameters) {
      var _this2 = this;

      var match;

      if (!(err && err.message)) {
        err["message"] = "No error message found.";
      }

      match = err.message.match(/SQL0803N {2}One or more values in the INSERT statement, UPDATE statement, or foreign key update caused by a DELETE statement are not valid because the primary key, unique constraint or unique index identified by "(\d)+" constrains table "(.*)\.(.*)" from having duplicate values for the index key./);

      if (match && match.length > 0) {
        var uniqueIndexName = "";
        var uniqueKey = "";
        var fields = {};
        var message = err.message;
        var query = "SELECT INDNAME FROM SYSCAT.INDEXES  WHERE IID = ".concat(match[1], " AND TABSCHEMA = '").concat(match[2], "' AND TABNAME = '").concat(match[3], "'");

        if (!!conn && match.length > 3) {
          uniqueIndexName = conn.querySync(query);
          uniqueIndexName = uniqueIndexName[0]["INDNAME"];
        }

        if (this.model && !!uniqueIndexName) {
          uniqueKey = this.model.uniqueKeys[uniqueIndexName];
        }

        if (!uniqueKey && this.options.fields) {
          uniqueKey = this.options.fields[match[1] - 1];
        }

        if (uniqueKey) {
          if (this.options.where && this.options.where[uniqueKey.column] !== void 0) {
            fields[uniqueKey.column] = this.options.where[uniqueKey.column];
          } else if (this.options.instance && this.options.instance.dataValues && this.options.instance.dataValues[uniqueKey.column]) {
            fields[uniqueKey.column] = this.options.instance.dataValues[uniqueKey.column];
          } else if (parameters) {
            fields[uniqueKey.column] = parameters["0"];
          }
        }

        if (uniqueKey && !!uniqueKey.msg) {
          message = uniqueKey.msg;
        }

        var errors = [];

        _.forOwn(fields, function (value, field) {
          errors.push(new sequelizeErrors.ValidationErrorItem(_this2.getUniqueConstraintErrorMessage(field), "unique violation", field, value, _this2.instance, "not_unique"));
        });

        return new sequelizeErrors.UniqueConstraintError({
          message: message,
          errors: errors,
          parent: err,
          fields: fields,
          stack: errStack
        });
      }

      match = err.message.match(/SQL0532N {2}A parent row cannot be deleted because the relationship "(.*)" restricts the deletion/) || err.message.match(/SQL0530N/) || err.message.match(/SQL0531N/);

      if (match && match.length > 0) {
        return new sequelizeErrors.ForeignKeyConstraintError({
          fields: null,
          index: match[1],
          parent: err,
          stack: errStack
        });
      }

      match = err.message.match(/SQL0204N {2}"(.*)" is an undefined name./);

      if (match && match.length > 1) {
        var constraint = match[1];
        var table = err.sql.match(/table "(.+?)"/i);
        table = table ? table[1] : void 0;
        return new sequelizeErrors.UnknownConstraintError({
          message: match[0],
          constraint: constraint,
          table: table,
          parent: err,
          stack: errStack
        });
      }

      return new sequelizeErrors.DatabaseError(err, {
        stack: errStack
      });
    }
  }, {
    key: "isDropSchemaQuery",
    value: function isDropSchemaQuery() {
      var result = false;

      if (_.startsWith(this.sql, "CALL SYSPROC.ADMIN_DROP_SCHEMA")) {
        result = true;
      }

      return result;
    }
  }, {
    key: "isShowOrDescribeQuery",
    value: function isShowOrDescribeQuery() {
      var result = false;
      result = result || this.sql.toLowerCase().startsWith("select c.column_name as 'name', c.data_type as 'type', c.is_nullable as 'isnull'");
      result = result || this.sql.toLowerCase().startsWith("select tablename = t.name, name = ind.name,");
      result = result || this.sql.toLowerCase().startsWith("exec sys.sp_helpindex @objname");
      return result;
    }
  }, {
    key: "isShowIndexesQuery",
    value: function isShowIndexesQuery() {
      var result = false;
      result = result || this.sql.toLowerCase().startsWith("exec sys.sp_helpindex @objname");
      result = result || this.sql.startsWith('SELECT NAME AS "name", TBNAME AS "tableName", UNIQUERULE AS "keyType", COLNAMES, INDEXTYPE AS "type" FROM SYSIBM.SYSINDEXES');
      return result;
    }
  }, {
    key: "handleShowIndexesQuery",
    value: function handleShowIndexesQuery(data) {
      var currItem;
      var result = [];
      data.forEach(function (item) {
        if (!currItem || currItem.name !== item.Key_name) {
          currItem = {
            primary: item.keyType === "P",
            fields: [],
            name: item.name,
            tableName: item.tableName,
            unique: item.keyType === "U",
            type: item.type
          };

          _.forEach(item.COLNAMES.replace(/\+|-/g, function (x) {
            return " ".concat(x);
          }).split(" "), function (column) {
            var columnName = column.trim();

            if (columnName) {
              columnName = columnName.replace(/\+|-/, "");
              currItem.fields.push({
                attribute: columnName,
                length: void 0,
                order: column.indexOf("-") === -1 ? "ASC" : "DESC",
                collate: void 0
              });
            }
          });

          result.push(currItem);
        }
      });
      return result;
    }
  }, {
    key: "handleInsertQuery",
    value: function handleInsertQuery(results, metaData) {
      if (this.instance) {
        var autoIncrementAttribute = this.model.autoIncrementAttribute;
        var id = null;
        var autoIncrementAttributeAlias = null;
        if (Object.prototype.hasOwnProperty.call(this.model.rawAttributes, autoIncrementAttribute) && this.model.rawAttributes[autoIncrementAttribute].field !== void 0) autoIncrementAttributeAlias = this.model.rawAttributes[autoIncrementAttribute].field;
        id = id || results && results[0][this.getInsertIdField()];
        id = id || metaData && metaData[this.getInsertIdField()];
        id = id || results && results[0][autoIncrementAttribute];
        id = id || autoIncrementAttributeAlias && results && results[0][autoIncrementAttributeAlias];
        this.instance[autoIncrementAttribute] = id;
      }
    }
  }], [{
    key: "formatBindParameters",
    value: function formatBindParameters(sql, values, dialect) {
      var bindParam = {};

      var replacementFunc = function replacementFunc(match, key, values2) {
        if (values2[key] !== void 0) {
          bindParam[key] = values2[key];
          return "?";
        }

        return void 0;
      };

      sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];

      if (Array.isArray(values) && _typeof(values[0]) === "object") {
        bindParam = values;
      }

      return [sql, bindParam];
    }
  }]);

  return Query;
}(AbstractQuery);

module.exports = Query;
module.exports.Query = Query;
module.exports["default"] = Query;
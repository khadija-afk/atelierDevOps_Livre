'use strict';

var Iconv = require('iconv-lite');

var LRU = require('lru-cache')["default"];

var decoderCache = new LRU({
  max: 500
});

exports.decode = function (buffer, encoding, start, end, options) {
  if (Buffer.isEncoding(encoding)) {
    return buffer.toString(encoding, start, end);
  } // Optimize for common case: encoding="short_string", options=undefined.


  var decoder;

  if (!options) {
    decoder = decoderCache.get(encoding);

    if (!decoder) {
      decoder = Iconv.getDecoder(encoding);
      decoderCache.set(encoding, decoder);
    }
  } else {
    var decoderArgs = {
      encoding: encoding,
      options: options
    };
    var decoderKey = JSON.stringify(decoderArgs);
    decoder = decoderCache.get(decoderKey);

    if (!decoder) {
      decoder = Iconv.getDecoder(decoderArgs.encoding, decoderArgs.options);
      decoderCache.set(decoderKey, decoder);
    }
  }

  var res = decoder.write(buffer.slice(start, end));
  var trail = decoder.end();
  return trail ? res + trail : res;
};

exports.encode = function (string, encoding, options) {
  if (Buffer.isEncoding(encoding)) {
    return Buffer.from(string, encoding);
  }

  var encoder = Iconv.getEncoder(encoding, options || {});
  var res = encoder.write(string);
  var trail = encoder.end();
  return trail && trail.length > 0 ? Buffer.concat([res, trail]) : res;
};
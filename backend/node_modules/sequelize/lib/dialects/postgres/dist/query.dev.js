"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var AbstractQuery = require("../abstract/query");

var QueryTypes = require("../../query-types");

var sequelizeErrors = require("../../errors");

var _ = require("lodash");

var _require = require("../../utils/logger"),
    logger = _require.logger;

var debug = logger.debugContext("sql:pg");

var Query =
/*#__PURE__*/
function (_AbstractQuery) {
  _inherits(Query, _AbstractQuery);

  function Query() {
    _classCallCheck(this, Query);

    return _possibleConstructorReturn(this, _getPrototypeOf(Query).apply(this, arguments));
  }

  _createClass(Query, [{
    key: "run",
    value: function run(sql, parameters) {
      var _this = this;

      var connection, query, complete, queryResult, errForStack, rows, rowCount, isTableNameQuery, isRelNameQuery, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, row, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _loop, _iterator2, _step2, result, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, _row, defParts, i, _result, attrsMap, _result2, _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, _row2, split, _loop2, key;

      return regeneratorRuntime.async(function run$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              connection = this.connection;

              if (!_.isEmpty(this.options.searchPath)) {
                sql = this.sequelize.getQueryInterface().queryGenerator.setSearchPath(this.options.searchPath) + sql;
              }

              if (this.sequelize.options.minifyAliases && this.options.includeAliases) {
                _.toPairs(this.options.includeAliases).sort(function (a, b) {
                  return b[1].length - a[1].length;
                }).forEach(function (_ref) {
                  var _ref2 = _slicedToArray(_ref, 2),
                      alias = _ref2[0],
                      original = _ref2[1];

                  var reg = new RegExp(_.escapeRegExp(original), "g");
                  sql = sql.replace(reg, alias);
                });
              }

              this.sql = sql;
              query = parameters && parameters.length ? new Promise(function (resolve, reject) {
                return connection.query(sql, parameters, function (error, result) {
                  return error ? reject(error) : resolve(result);
                });
              }) : new Promise(function (resolve, reject) {
                return connection.query(sql, function (error, result) {
                  return error ? reject(error) : resolve(result);
                });
              });
              complete = this._logQuery(sql, debug, parameters);
              errForStack = new Error();
              _context.prev = 7;
              _context.next = 10;
              return regeneratorRuntime.awrap(query);

            case 10:
              queryResult = _context.sent;
              _context.next = 19;
              break;

            case 13:
              _context.prev = 13;
              _context.t0 = _context["catch"](7);

              if (_context.t0.code === "ECONNRESET" || /Unable to set non-blocking to true/i.test(_context.t0) || /SSL SYSCALL error: EOF detected/i.test(_context.t0) || /Local: Authentication failure/i.test(_context.t0) || _context.t0.message === "Query read timeout") {
                connection._invalid = true;
              }

              _context.t0.sql = sql;
              _context.t0.parameters = parameters;
              throw this.formatError(_context.t0, errForStack.stack);

            case 19:
              complete();
              rows = Array.isArray(queryResult) ? queryResult.reduce(function (allRows, r) {
                return allRows.concat(r.rows || []);
              }, []) : queryResult.rows;
              rowCount = Array.isArray(queryResult) ? queryResult.reduce(function (count, r) {
                return Number.isFinite(r.rowCount) ? count + r.rowCount : count;
              }, 0) : queryResult.rowCount || 0;

              if (this.sequelize.options.minifyAliases && this.options.aliasesMapping) {
                rows = rows.map(function (row) {
                  return _.toPairs(row).reduce(function (acc, _ref3) {
                    var _ref4 = _slicedToArray(_ref3, 2),
                        key = _ref4[0],
                        value = _ref4[1];

                    var mapping = _this.options.aliasesMapping.get(key);

                    acc[mapping || key] = value;
                    return acc;
                  }, {});
                });
              }

              isTableNameQuery = sql.startsWith("SELECT table_name FROM information_schema.tables");
              isRelNameQuery = sql.startsWith("SELECT relname FROM pg_class WHERE oid IN");

              if (!isRelNameQuery) {
                _context.next = 27;
                break;
              }

              return _context.abrupt("return", rows.map(function (row) {
                return {
                  name: row.relname,
                  tableName: row.relname.split("_")[0]
                };
              }));

            case 27:
              if (!isTableNameQuery) {
                _context.next = 29;
                break;
              }

              return _context.abrupt("return", rows.map(function (row) {
                return Object.values(row);
              }));

            case 29:
              if (!(rows[0] && rows[0].sequelize_caught_exception !== void 0)) {
                _context.next = 51;
                break;
              }

              if (!(rows[0].sequelize_caught_exception !== null)) {
                _context.next = 32;
                break;
              }

              throw this.formatError({
                sql: sql,
                parameters: parameters,
                code: "23505",
                detail: rows[0].sequelize_caught_exception
              });

            case 32:
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context.prev = 35;

              for (_iterator = rows[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                row = _step.value;
                delete row.sequelize_caught_exception;
              }

              _context.next = 43;
              break;

            case 39:
              _context.prev = 39;
              _context.t1 = _context["catch"](35);
              _didIteratorError = true;
              _iteratorError = _context.t1;

            case 43:
              _context.prev = 43;
              _context.prev = 44;

              if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                _iterator["return"]();
              }

            case 46:
              _context.prev = 46;

              if (!_didIteratorError) {
                _context.next = 49;
                break;
              }

              throw _iteratorError;

            case 49:
              return _context.finish(46);

            case 50:
              return _context.finish(43);

            case 51:
              if (!this.isShowIndexesQuery()) {
                _context.next = 73;
                break;
              }

              _iteratorNormalCompletion2 = true;
              _didIteratorError2 = false;
              _iteratorError2 = undefined;
              _context.prev = 55;

              _loop = function _loop() {
                var row = _step2.value;
                var attributes = /ON .*? (?:USING .*?\s)?\(([^]*)\)/gi.exec(row.definition)[1].split(",");

                var columns = _.zipObject(row.column_indexes, _this.sequelize.getQueryInterface().queryGenerator.fromArray(row.column_names));

                delete row.column_indexes;
                delete row.column_names;
                var field = void 0;
                var attribute = void 0;
                row.fields = row.indkey.split(" ").map(function (indKey, index) {
                  field = columns[indKey];

                  if (!field) {
                    return null;
                  }

                  attribute = attributes[index];
                  return {
                    attribute: field,
                    collate: attribute.match(/COLLATE "(.*?)"/) ? /COLLATE "(.*?)"/.exec(attribute)[1] : void 0,
                    order: attribute.includes("DESC") ? "DESC" : attribute.includes("ASC") ? "ASC" : void 0,
                    length: void 0
                  };
                }).filter(function (n) {
                  return n !== null;
                });
                delete row.columns;
              };

              for (_iterator2 = rows[Symbol.iterator](); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                _loop();
              }

              _context.next = 64;
              break;

            case 60:
              _context.prev = 60;
              _context.t2 = _context["catch"](55);
              _didIteratorError2 = true;
              _iteratorError2 = _context.t2;

            case 64:
              _context.prev = 64;
              _context.prev = 65;

              if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                _iterator2["return"]();
              }

            case 67:
              _context.prev = 67;

              if (!_didIteratorError2) {
                _context.next = 70;
                break;
              }

              throw _iteratorError2;

            case 70:
              return _context.finish(67);

            case 71:
              return _context.finish(64);

            case 72:
              return _context.abrupt("return", rows);

            case 73:
              if (!this.isForeignKeysQuery()) {
                _context.next = 95;
                break;
              }

              result = [];
              _iteratorNormalCompletion3 = true;
              _didIteratorError3 = false;
              _iteratorError3 = undefined;
              _context.prev = 78;

              for (_iterator3 = rows[Symbol.iterator](); !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                _row = _step3.value;
                defParts = void 0;

                if (_row.condef !== void 0 && (defParts = _row.condef.match(/FOREIGN KEY \((.+)\) REFERENCES (.+)\((.+)\)( ON (UPDATE|DELETE) (CASCADE|RESTRICT))?( ON (UPDATE|DELETE) (CASCADE|RESTRICT))?/))) {
                  _row.id = _row.constraint_name;
                  _row.table = defParts[2];
                  _row.from = defParts[1];
                  _row.to = defParts[3];
                  i = void 0;

                  for (i = 5; i <= 8; i += 3) {
                    if (/(UPDATE|DELETE)/.test(defParts[i])) {
                      _row["on_".concat(defParts[i].toLowerCase())] = defParts[i + 1];
                    }
                  }
                }

                result.push(_row);
              }

              _context.next = 86;
              break;

            case 82:
              _context.prev = 82;
              _context.t3 = _context["catch"](78);
              _didIteratorError3 = true;
              _iteratorError3 = _context.t3;

            case 86:
              _context.prev = 86;
              _context.prev = 87;

              if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                _iterator3["return"]();
              }

            case 89:
              _context.prev = 89;

              if (!_didIteratorError3) {
                _context.next = 92;
                break;
              }

              throw _iteratorError3;

            case 92:
              return _context.finish(89);

            case 93:
              return _context.finish(86);

            case 94:
              return _context.abrupt("return", result);

            case 95:
              if (!this.isSelectQuery()) {
                _context.next = 99;
                break;
              }

              _result = rows;

              if (this.options.raw === false && this.sequelize.options.quoteIdentifiers === false) {
                attrsMap = _.reduce(this.model.rawAttributes, function (m, v, k) {
                  m[k.toLowerCase()] = k;
                  return m;
                }, {});
                _result = rows.map(function (row) {
                  return _.mapKeys(row, function (value, key) {
                    var targetAttr = attrsMap[key];

                    if (typeof targetAttr === "string" && targetAttr !== key) {
                      return targetAttr;
                    }

                    return key;
                  });
                });
              }

              return _context.abrupt("return", this.handleSelectQuery(_result));

            case 99:
              if (!(QueryTypes.DESCRIBE === this.options.type)) {
                _context.next = 121;
                break;
              }

              _result2 = {};
              _iteratorNormalCompletion4 = true;
              _didIteratorError4 = false;
              _iteratorError4 = undefined;
              _context.prev = 104;

              for (_iterator4 = rows[Symbol.iterator](); !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                _row2 = _step4.value;
                _result2[_row2.Field] = {
                  type: _row2.Type.toUpperCase(),
                  allowNull: _row2.Null === "YES",
                  defaultValue: _row2.Default,
                  comment: _row2.Comment,
                  special: _row2.special ? this.sequelize.getQueryInterface().queryGenerator.fromArray(_row2.special) : [],
                  primaryKey: _row2.Constraint === "PRIMARY KEY"
                };

                if (_result2[_row2.Field].type === "BOOLEAN") {
                  _result2[_row2.Field].defaultValue = {
                    "false": false,
                    "true": true
                  }[_result2[_row2.Field].defaultValue];

                  if (_result2[_row2.Field].defaultValue === void 0) {
                    _result2[_row2.Field].defaultValue = null;
                  }
                }

                if (typeof _result2[_row2.Field].defaultValue === "string") {
                  _result2[_row2.Field].defaultValue = _result2[_row2.Field].defaultValue.replace(/'/g, "");

                  if (_result2[_row2.Field].defaultValue.includes("::")) {
                    split = _result2[_row2.Field].defaultValue.split("::");

                    if (split[1].toLowerCase() !== "regclass)") {
                      _result2[_row2.Field].defaultValue = split[0];
                    }
                  }
                }
              }

              _context.next = 112;
              break;

            case 108:
              _context.prev = 108;
              _context.t4 = _context["catch"](104);
              _didIteratorError4 = true;
              _iteratorError4 = _context.t4;

            case 112:
              _context.prev = 112;
              _context.prev = 113;

              if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
                _iterator4["return"]();
              }

            case 115:
              _context.prev = 115;

              if (!_didIteratorError4) {
                _context.next = 118;
                break;
              }

              throw _iteratorError4;

            case 118:
              return _context.finish(115);

            case 119:
              return _context.finish(112);

            case 120:
              return _context.abrupt("return", _result2);

            case 121:
              if (!this.isVersionQuery()) {
                _context.next = 123;
                break;
              }

              return _context.abrupt("return", rows[0].server_version);

            case 123:
              if (!this.isShowOrDescribeQuery()) {
                _context.next = 125;
                break;
              }

              return _context.abrupt("return", rows);

            case 125:
              if (!(QueryTypes.BULKUPDATE === this.options.type)) {
                _context.next = 129;
                break;
              }

              if (this.options.returning) {
                _context.next = 128;
                break;
              }

              return _context.abrupt("return", parseInt(rowCount, 10));

            case 128:
              return _context.abrupt("return", this.handleSelectQuery(rows));

            case 129:
              if (!(QueryTypes.BULKDELETE === this.options.type)) {
                _context.next = 131;
                break;
              }

              return _context.abrupt("return", parseInt(rowCount, 10));

            case 131:
              if (!(this.isInsertQuery() || this.isUpdateQuery() || this.isUpsertQuery())) {
                _context.next = 140;
                break;
              }

              if (!(this.instance && this.instance.dataValues)) {
                _context.next = 137;
                break;
              }

              if (!(this.isInsertQuery() && !this.isUpsertQuery() && rowCount === 0)) {
                _context.next = 135;
                break;
              }

              throw new sequelizeErrors.EmptyResultError();

            case 135:
              _loop2 = function _loop2(key) {
                if (Object.prototype.hasOwnProperty.call(rows[0], key)) {
                  var record = rows[0][key];

                  var attr = _.find(_this.model.rawAttributes, function (attribute) {
                    return attribute.fieldName === key || attribute.field === key;
                  });

                  _this.instance.dataValues[attr && attr.fieldName || key] = record;
                }
              };

              for (key in rows[0]) {
                _loop2(key);
              }

            case 137:
              if (!this.isUpsertQuery()) {
                _context.next = 139;
                break;
              }

              return _context.abrupt("return", [this.instance, null]);

            case 139:
              return _context.abrupt("return", [this.instance || rows && (this.options.plain && rows[0] || rows) || void 0, rowCount]);

            case 140:
              if (!this.isRawQuery()) {
                _context.next = 142;
                break;
              }

              return _context.abrupt("return", [rows, queryResult]);

            case 142:
              return _context.abrupt("return", rows);

            case 143:
            case "end":
              return _context.stop();
          }
        }
      }, null, this, [[7, 13], [35, 39, 43, 51], [44,, 46, 50], [55, 60, 64, 72], [65,, 67, 71], [78, 82, 86, 94], [87,, 89, 93], [104, 108, 112, 120], [113,, 115, 119]]);
    }
  }, {
    key: "formatError",
    value: function formatError(err, errStack) {
      var _this2 = this;

      var match;
      var table;
      var index;
      var fields;
      var errors;
      var message;
      var code = err.code || err.sqlState;
      var errMessage = err.message || err.messagePrimary;
      var errDetail = err.detail || err.messageDetail;

      switch (code) {
        case "23503":
          index = errMessage.match(/violates foreign key constraint "(.+?)"/);
          index = index ? index[1] : void 0;
          table = errMessage.match(/on table "(.+?)"/);
          table = table ? table[1] : void 0;
          return new sequelizeErrors.ForeignKeyConstraintError({
            message: errMessage,
            fields: null,
            index: index,
            table: table,
            parent: err,
            stack: errStack
          });

        case "23505":
          if (errDetail && (match = errDetail.replace(/"/g, "").match(/Key \((.*?)\)=\((.*?)\)/))) {
            fields = _.zipObject(match[1].split(", "), match[2].split(", "));
            errors = [];
            message = "Validation error";

            _.forOwn(fields, function (value, field) {
              errors.push(new sequelizeErrors.ValidationErrorItem(_this2.getUniqueConstraintErrorMessage(field), "unique violation", field, value, _this2.instance, "not_unique"));
            });

            if (this.model && this.model.uniqueKeys) {
              _.forOwn(this.model.uniqueKeys, function (constraint) {
                if (_.isEqual(constraint.fields, Object.keys(fields)) && !!constraint.msg) {
                  message = constraint.msg;
                  return false;
                }
              });
            }

            return new sequelizeErrors.UniqueConstraintError({
              message: message,
              errors: errors,
              parent: err,
              fields: fields,
              stack: errStack
            });
          }

          return new sequelizeErrors.UniqueConstraintError({
            message: errMessage,
            parent: err,
            stack: errStack
          });

        case "23P01":
          match = errDetail.match(/Key \((.*?)\)=\((.*?)\)/);

          if (match) {
            fields = _.zipObject(match[1].split(", "), match[2].split(", "));
          }

          message = "Exclusion constraint error";
          return new sequelizeErrors.ExclusionConstraintError({
            message: message,
            constraint: err.constraint,
            fields: fields,
            table: err.table,
            parent: err,
            stack: errStack
          });

        case "42704":
          if (err.sql && /(CONSTRAINT|INDEX)/gi.test(err.sql)) {
            message = "Unknown constraint error";
            index = errMessage.match(/(?:constraint|index) "(.+?)"/i);
            index = index ? index[1] : void 0;
            table = errMessage.match(/relation "(.+?)"/i);
            table = table ? table[1] : void 0;
            throw new sequelizeErrors.UnknownConstraintError({
              message: message,
              constraint: index,
              fields: fields,
              table: table,
              parent: err,
              stack: errStack
            });
          }

        default:
          return new sequelizeErrors.DatabaseError(err, {
            stack: errStack
          });
      }
    }
  }, {
    key: "isForeignKeysQuery",
    value: function isForeignKeysQuery() {
      return /SELECT conname as constraint_name, pg_catalog\.pg_get_constraintdef\(r\.oid, true\) as condef FROM pg_catalog\.pg_constraint r WHERE r\.conrelid = \(SELECT oid FROM pg_class WHERE relname = '.*' LIMIT 1\) AND r\.contype = 'f' ORDER BY 1;/.test(this.sql);
    }
  }, {
    key: "getInsertIdField",
    value: function getInsertIdField() {
      return "id";
    }
  }], [{
    key: "formatBindParameters",
    value: function formatBindParameters(sql, values, dialect) {
      var stringReplaceFunc = function stringReplaceFunc(value) {
        return typeof value === "string" ? value.replace(/\0/g, "\\0") : value;
      };

      var bindParam;

      if (Array.isArray(values)) {
        bindParam = values.map(stringReplaceFunc);
        sql = AbstractQuery.formatBindParameters(sql, values, dialect, {
          skipValueReplace: true
        })[0];
      } else {
        bindParam = [];
        var i = 0;
        var seen = {};

        var replacementFunc = function replacementFunc(match, key, values2) {
          if (seen[key] !== void 0) {
            return seen[key];
          }

          if (values2[key] !== void 0) {
            i = i + 1;
            bindParam.push(stringReplaceFunc(values2[key]));
            seen[key] = "$".concat(i);
            return "$".concat(i);
          }

          return void 0;
        };

        sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];
      }

      return [sql, bindParam];
    }
  }]);

  return Query;
}(AbstractQuery);

module.exports = Query;
module.exports.Query = Query;
module.exports["default"] = Query;
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var AbstractConnectionManager = require("../abstract/connection-manager");

var AsyncQueue = require("./async-queue")["default"];

var _require = require("../../utils/logger"),
    logger = _require.logger;

var sequelizeErrors = require("../../errors");

var DataTypes = require("../../data-types").mssql;

var parserStore = require("../parserStore")("mssql");

var debug = logger.debugContext("connection:mssql");
var debugTedious = logger.debugContext("connection:mssql:tedious");

var ConnectionManager =
/*#__PURE__*/
function (_AbstractConnectionMa) {
  _inherits(ConnectionManager, _AbstractConnectionMa);

  function ConnectionManager(dialect, sequelize) {
    var _this;

    _classCallCheck(this, ConnectionManager);

    sequelize.config.port = sequelize.config.port || 1433;
    _this = _possibleConstructorReturn(this, _getPrototypeOf(ConnectionManager).call(this, dialect, sequelize));
    _this.lib = _this._loadDialectModule("tedious");

    _this.refreshTypeParser(DataTypes);

    return _this;
  }

  _createClass(ConnectionManager, [{
    key: "_refreshTypeParser",
    value: function _refreshTypeParser(dataType) {
      parserStore.refresh(dataType);
    }
  }, {
    key: "_clearTypeParser",
    value: function _clearTypeParser() {
      parserStore.clear();
    }
  }, {
    key: "connect",
    value: function connect(config) {
      var _this2 = this;

      var connectionConfig;
      return regeneratorRuntime.async(function connect$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              connectionConfig = {
                server: config.host,
                authentication: {
                  type: "default",
                  options: {
                    userName: config.username || void 0,
                    password: config.password || void 0
                  }
                },
                options: {
                  port: parseInt(config.port, 10),
                  database: config.database,
                  trustServerCertificate: true
                }
              };

              if (config.dialectOptions) {
                if (config.dialectOptions.options && config.dialectOptions.options.instanceName) {
                  delete connectionConfig.options.port;
                }

                if (config.dialectOptions.authentication) {
                  Object.assign(connectionConfig.authentication, config.dialectOptions.authentication);
                }

                Object.assign(connectionConfig.options, config.dialectOptions.options);
              }

              _context.prev = 2;
              _context.next = 5;
              return regeneratorRuntime.awrap(new Promise(function (resolve, reject) {
                var connection = new _this2.lib.Connection(connectionConfig);

                if (connection.state === connection.STATE.INITIALIZED) {
                  connection.connect();
                }

                connection.queue = new AsyncQueue();
                connection.lib = _this2.lib;

                var connectHandler = function connectHandler(error) {
                  connection.removeListener("end", endHandler);
                  connection.removeListener("error", errorHandler);
                  if (error) return reject(error);
                  debug("connection acquired");
                  resolve(connection);
                };

                var endHandler = function endHandler() {
                  connection.removeListener("connect", connectHandler);
                  connection.removeListener("error", errorHandler);
                  reject(new Error("Connection was closed by remote server"));
                };

                var errorHandler = function errorHandler(error) {
                  connection.removeListener("connect", connectHandler);
                  connection.removeListener("end", endHandler);
                  reject(error);
                };

                connection.once("error", errorHandler);
                connection.once("end", endHandler);
                connection.once("connect", connectHandler);
                connection.on("error", function (error) {
                  switch (error.code) {
                    case "ESOCKET":
                    case "ECONNRESET":
                      _this2.pool.destroy(connection);

                  }
                });

                if (config.dialectOptions && config.dialectOptions.debug) {
                  connection.on("debug", debugTedious.log.bind(debugTedious));
                }
              }));

            case 5:
              return _context.abrupt("return", _context.sent);

            case 8:
              _context.prev = 8;
              _context.t0 = _context["catch"](2);

              if (_context.t0.code) {
                _context.next = 12;
                break;
              }

              throw new sequelizeErrors.ConnectionError(_context.t0);

            case 12:
              _context.t1 = _context.t0.code;
              _context.next = _context.t1 === "ESOCKET" ? 15 : _context.t1 === "ER_ACCESS_DENIED_ERROR" ? 28 : _context.t1 === "ELOGIN" ? 28 : _context.t1 === "EINVAL" ? 29 : 30;
              break;

            case 15:
              if (!_context.t0.message.includes("connect EHOSTUNREACH")) {
                _context.next = 17;
                break;
              }

              throw new sequelizeErrors.HostNotReachableError(_context.t0);

            case 17:
              if (!_context.t0.message.includes("connect ENETUNREACH")) {
                _context.next = 19;
                break;
              }

              throw new sequelizeErrors.HostNotReachableError(_context.t0);

            case 19:
              if (!_context.t0.message.includes("connect EADDRNOTAVAIL")) {
                _context.next = 21;
                break;
              }

              throw new sequelizeErrors.HostNotReachableError(_context.t0);

            case 21:
              if (!_context.t0.message.includes("connect EAFNOSUPPORT")) {
                _context.next = 23;
                break;
              }

              throw new sequelizeErrors.HostNotReachableError(_context.t0);

            case 23:
              if (!_context.t0.message.includes("getaddrinfo ENOTFOUND")) {
                _context.next = 25;
                break;
              }

              throw new sequelizeErrors.HostNotFoundError(_context.t0);

            case 25:
              if (!_context.t0.message.includes("connect ECONNREFUSED")) {
                _context.next = 27;
                break;
              }

              throw new sequelizeErrors.ConnectionRefusedError(_context.t0);

            case 27:
              throw new sequelizeErrors.ConnectionError(_context.t0);

            case 28:
              throw new sequelizeErrors.AccessDeniedError(_context.t0);

            case 29:
              throw new sequelizeErrors.InvalidConnectionError(_context.t0);

            case 30:
              throw new sequelizeErrors.ConnectionError(_context.t0);

            case 31:
            case "end":
              return _context.stop();
          }
        }
      }, null, null, [[2, 8]]);
    }
  }, {
    key: "disconnect",
    value: function disconnect(connection) {
      return regeneratorRuntime.async(function disconnect$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!connection.closed) {
                _context2.next = 2;
                break;
              }

              return _context2.abrupt("return");

            case 2:
              connection.queue.close();
              return _context2.abrupt("return", new Promise(function (resolve) {
                connection.on("end", resolve);
                connection.close();
                debug("connection closed");
              }));

            case 4:
            case "end":
              return _context2.stop();
          }
        }
      });
    }
  }, {
    key: "validate",
    value: function validate(connection) {
      return connection && (connection.loggedIn || connection.state.name === "LoggedIn");
    }
  }]);

  return ConnectionManager;
}(AbstractConnectionManager);

module.exports = ConnectionManager;
module.exports.ConnectionManager = ConnectionManager;
module.exports["default"] = ConnectionManager;
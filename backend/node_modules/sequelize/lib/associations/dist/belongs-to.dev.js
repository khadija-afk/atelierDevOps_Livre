"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;

var __defNormalProp = function __defNormalProp(obj, key, value) {
  return key in obj ? __defProp(obj, key, {
    enumerable: true,
    configurable: true,
    writable: true,
    value: value
  }) : obj[key] = value;
};

var __spreadValues = function __spreadValues(a, b) {
  for (var prop in b || (b = {})) {
    if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);
  }

  if (__getOwnPropSymbols) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = __getOwnPropSymbols(b)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var prop = _step.value;
        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }

  return a;
};

var Utils = require("./../utils");

var Helpers = require("./helpers");

var _ = require("lodash");

var Association = require("./base");

var Op = require("../operators");

var BelongsTo =
/*#__PURE__*/
function (_Association) {
  _inherits(BelongsTo, _Association);

  function BelongsTo(source, target, options) {
    var _this;

    _classCallCheck(this, BelongsTo);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(BelongsTo).call(this, source, target, options));
    _this.associationType = "BelongsTo";
    _this.isSingleAssociation = true;
    _this.foreignKeyAttribute = {};

    if (_this.as) {
      _this.isAliased = true;
      _this.options.name = {
        singular: _this.as
      };
    } else {
      _this.as = _this.target.options.name.singular;
      _this.options.name = _this.target.options.name;
    }

    if (_.isObject(_this.options.foreignKey)) {
      _this.foreignKeyAttribute = _this.options.foreignKey;
      _this.foreignKey = _this.foreignKeyAttribute.name || _this.foreignKeyAttribute.fieldName;
    } else if (_this.options.foreignKey) {
      _this.foreignKey = _this.options.foreignKey;
    }

    if (!_this.foreignKey) {
      _this.foreignKey = Utils.camelize([_this.as, _this.target.primaryKeyAttribute].join("_"));
    }

    _this.identifier = _this.foreignKey;

    if (_this.source.rawAttributes[_this.identifier]) {
      _this.identifierField = _this.source.rawAttributes[_this.identifier].field || _this.identifier;
    }

    if (_this.options.targetKey && !_this.target.rawAttributes[_this.options.targetKey]) {
      throw new Error("Unknown attribute \"".concat(_this.options.targetKey, "\" passed as targetKey, define this attribute on model \"").concat(_this.target.name, "\" first"));
    }

    _this.targetKey = _this.options.targetKey || _this.target.primaryKeyAttribute;
    _this.targetKeyField = _this.target.rawAttributes[_this.targetKey].field || _this.targetKey;
    _this.targetKeyIsPrimary = _this.targetKey === _this.target.primaryKeyAttribute;
    _this.targetIdentifier = _this.targetKey;
    _this.associationAccessor = _this.as;
    _this.options.useHooks = options.useHooks;

    var singular = _.upperFirst(_this.options.name.singular);

    _this.accessors = {
      get: "get".concat(singular),
      set: "set".concat(singular),
      create: "create".concat(singular)
    };
    return _this;
  }

  _createClass(BelongsTo, [{
    key: "_injectAttributes",
    value: function _injectAttributes() {
      var newAttributes = _defineProperty({}, this.foreignKey, __spreadValues({
        type: this.options.keyType || this.target.rawAttributes[this.targetKey].type,
        allowNull: true
      }, this.foreignKeyAttribute));

      if (this.options.constraints !== false) {
        var source = this.source.rawAttributes[this.foreignKey] || newAttributes[this.foreignKey];
        this.options.onDelete = this.options.onDelete || (source.allowNull ? "SET NULL" : "NO ACTION");
        this.options.onUpdate = this.options.onUpdate || "CASCADE";
      }

      Helpers.addForeignKeyConstraints(newAttributes[this.foreignKey], this.target, this.source, this.options, this.targetKeyField);
      Utils.mergeDefaults(this.source.rawAttributes, newAttributes);
      this.source.refreshAttributes();
      this.identifierField = this.source.rawAttributes[this.foreignKey].field || this.foreignKey;
      Helpers.checkNamingCollision(this);
      return this;
    }
  }, {
    key: "mixin",
    value: function mixin(obj) {
      var methods = ["get", "set", "create"];
      Helpers.mixinMethods(this, obj, methods);
    }
  }, {
    key: "get",
    value: function get(instances, options) {
      var _this2 = this;

      var where, Target, instance, results, result, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _instance, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, _instance2;

      return regeneratorRuntime.async(function get$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              where = {};
              Target = this.target;
              options = Utils.cloneDeep(options);

              if (Object.prototype.hasOwnProperty.call(options, "scope")) {
                if (!options.scope) {
                  Target = Target.unscoped();
                } else {
                  Target = Target.scope(options.scope);
                }
              }

              if (Object.prototype.hasOwnProperty.call(options, "schema")) {
                Target = Target.schema(options.schema, options.schemaDelimiter);
              }

              if (!Array.isArray(instances)) {
                instance = instances;
                instances = void 0;
              }

              if (!instances) {
                _context.next = 10;
                break;
              }

              where[this.targetKey] = _defineProperty({}, Op["in"], instances.map(function (_instance) {
                return _instance.get(_this2.foreignKey);
              }));
              _context.next = 14;
              break;

            case 10:
              if (!(this.targetKeyIsPrimary && !options.where)) {
                _context.next = 12;
                break;
              }

              return _context.abrupt("return", Target.findByPk(instance.get(this.foreignKey), options));

            case 12:
              where[this.targetKey] = instance.get(this.foreignKey);
              options.limit = null;

            case 14:
              options.where = options.where ? _defineProperty({}, Op.and, [where, options.where]) : where;

              if (!instances) {
                _context.next = 59;
                break;
              }

              _context.next = 18;
              return regeneratorRuntime.awrap(Target.findAll(options));

            case 18:
              results = _context.sent;
              result = {};
              _iteratorNormalCompletion2 = true;
              _didIteratorError2 = false;
              _iteratorError2 = undefined;
              _context.prev = 23;

              for (_iterator2 = instances[Symbol.iterator](); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                _instance = _step2.value;
                result[_instance.get(this.foreignKey, {
                  raw: true
                })] = null;
              }

              _context.next = 31;
              break;

            case 27:
              _context.prev = 27;
              _context.t0 = _context["catch"](23);
              _didIteratorError2 = true;
              _iteratorError2 = _context.t0;

            case 31:
              _context.prev = 31;
              _context.prev = 32;

              if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                _iterator2["return"]();
              }

            case 34:
              _context.prev = 34;

              if (!_didIteratorError2) {
                _context.next = 37;
                break;
              }

              throw _iteratorError2;

            case 37:
              return _context.finish(34);

            case 38:
              return _context.finish(31);

            case 39:
              _iteratorNormalCompletion3 = true;
              _didIteratorError3 = false;
              _iteratorError3 = undefined;
              _context.prev = 42;

              for (_iterator3 = results[Symbol.iterator](); !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                _instance2 = _step3.value;
                result[_instance2.get(this.targetKey, {
                  raw: true
                })] = _instance2;
              }

              _context.next = 50;
              break;

            case 46:
              _context.prev = 46;
              _context.t1 = _context["catch"](42);
              _didIteratorError3 = true;
              _iteratorError3 = _context.t1;

            case 50:
              _context.prev = 50;
              _context.prev = 51;

              if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                _iterator3["return"]();
              }

            case 53:
              _context.prev = 53;

              if (!_didIteratorError3) {
                _context.next = 56;
                break;
              }

              throw _iteratorError3;

            case 56:
              return _context.finish(53);

            case 57:
              return _context.finish(50);

            case 58:
              return _context.abrupt("return", result);

            case 59:
              return _context.abrupt("return", Target.findOne(options));

            case 60:
            case "end":
              return _context.stop();
          }
        }
      }, null, this, [[23, 27, 31, 39], [32,, 34, 38], [42, 46, 50, 58], [51,, 53, 57]]);
    }
  }, {
    key: "set",
    value: function set(sourceInstance, associatedInstance) {
      var options,
          value,
          _args2 = arguments;
      return regeneratorRuntime.async(function set$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              options = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : {};
              value = associatedInstance;

              if (associatedInstance instanceof this.target) {
                value = associatedInstance[this.targetKey];
              }

              sourceInstance.set(this.foreignKey, value);

              if (!(options.save === false)) {
                _context2.next = 6;
                break;
              }

              return _context2.abrupt("return");

            case 6:
              options = __spreadValues({
                fields: [this.foreignKey],
                allowNull: [this.foreignKey],
                association: true
              }, options);
              _context2.next = 9;
              return regeneratorRuntime.awrap(sourceInstance.save(options));

            case 9:
              return _context2.abrupt("return", _context2.sent);

            case 10:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "create",
    value: function create(sourceInstance, values, options) {
      var newAssociatedObject;
      return regeneratorRuntime.async(function create$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              values = values || {};
              options = options || {};
              _context3.next = 4;
              return regeneratorRuntime.awrap(this.target.create(values, options));

            case 4:
              newAssociatedObject = _context3.sent;
              _context3.next = 7;
              return regeneratorRuntime.awrap(sourceInstance[this.accessors.set](newAssociatedObject, options));

            case 7:
              return _context3.abrupt("return", newAssociatedObject);

            case 8:
            case "end":
              return _context3.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "verifyAssociationAlias",
    value: function verifyAssociationAlias(alias) {
      if (typeof alias === "string") {
        return this.as === alias;
      }

      if (alias && alias.singular) {
        return this.as === alias.singular;
      }

      return !this.isAliased;
    }
  }]);

  return BelongsTo;
}(Association);

module.exports = BelongsTo;
module.exports.BelongsTo = BelongsTo;
module.exports["default"] = BelongsTo;
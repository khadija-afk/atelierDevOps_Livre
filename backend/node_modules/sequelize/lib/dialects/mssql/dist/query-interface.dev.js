"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;

var __defNormalProp = function __defNormalProp(obj, key, value) {
  return key in obj ? __defProp(obj, key, {
    enumerable: true,
    configurable: true,
    writable: true,
    value: value
  }) : obj[key] = value;
};

var __spreadValues = function __spreadValues(a, b) {
  for (var prop in b || (b = {})) {
    if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);
  }

  if (__getOwnPropSymbols) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = __getOwnPropSymbols(b)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var prop = _step.value;
        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }

  return a;
};

var _ = require("lodash");

var Utils = require("../../utils");

var QueryTypes = require("../../query-types");

var Op = require("../../operators");

var _require = require("../abstract/query-interface"),
    QueryInterface = _require.QueryInterface;

var MSSqlQueryInterface =
/*#__PURE__*/
function (_QueryInterface) {
  _inherits(MSSqlQueryInterface, _QueryInterface);

  function MSSqlQueryInterface() {
    _classCallCheck(this, MSSqlQueryInterface);

    return _possibleConstructorReturn(this, _getPrototypeOf(MSSqlQueryInterface).apply(this, arguments));
  }

  _createClass(MSSqlQueryInterface, [{
    key: "removeColumn",
    value: function removeColumn(tableName, attributeName, options) {
      var findConstraintSql, _ref, _ref2, results0, dropConstraintSql, findForeignKeySql, _ref3, _ref4, results, dropForeignKeySql, primaryKeyConstraintSql, _ref5, _ref6, result, _dropConstraintSql, removeSql;

      return regeneratorRuntime.async(function removeColumn$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              options = __spreadValues({
                raw: true
              }, options || {});
              findConstraintSql = this.queryGenerator.getDefaultConstraintQuery(tableName, attributeName);
              _context.next = 4;
              return regeneratorRuntime.awrap(this.sequelize.query(findConstraintSql, options));

            case 4:
              _ref = _context.sent;
              _ref2 = _slicedToArray(_ref, 1);
              results0 = _ref2[0];

              if (!results0.length) {
                _context.next = 11;
                break;
              }

              dropConstraintSql = this.queryGenerator.dropConstraintQuery(tableName, results0[0].name);
              _context.next = 11;
              return regeneratorRuntime.awrap(this.sequelize.query(dropConstraintSql, options));

            case 11:
              findForeignKeySql = this.queryGenerator.getForeignKeyQuery(tableName, attributeName);
              _context.next = 14;
              return regeneratorRuntime.awrap(this.sequelize.query(findForeignKeySql, options));

            case 14:
              _ref3 = _context.sent;
              _ref4 = _slicedToArray(_ref3, 1);
              results = _ref4[0];

              if (!results.length) {
                _context.next = 21;
                break;
              }

              dropForeignKeySql = this.queryGenerator.dropForeignKeyQuery(tableName, results[0].constraint_name);
              _context.next = 21;
              return regeneratorRuntime.awrap(this.sequelize.query(dropForeignKeySql, options));

            case 21:
              primaryKeyConstraintSql = this.queryGenerator.getPrimaryKeyConstraintQuery(tableName, attributeName);
              _context.next = 24;
              return regeneratorRuntime.awrap(this.sequelize.query(primaryKeyConstraintSql, options));

            case 24:
              _ref5 = _context.sent;
              _ref6 = _slicedToArray(_ref5, 1);
              result = _ref6[0];

              if (!result.length) {
                _context.next = 31;
                break;
              }

              _dropConstraintSql = this.queryGenerator.dropConstraintQuery(tableName, result[0].constraintName);
              _context.next = 31;
              return regeneratorRuntime.awrap(this.sequelize.query(_dropConstraintSql, options));

            case 31:
              removeSql = this.queryGenerator.removeColumnQuery(tableName, attributeName);
              return _context.abrupt("return", this.sequelize.query(removeSql, options));

            case 33:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "upsert",
    value: function upsert(tableName, insertValues, updateValues, where, options) {
      var model, wheres, indexes, attributes, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, index, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, field, sql;

      return regeneratorRuntime.async(function upsert$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              model = options.model;
              wheres = [];
              options = __spreadValues({}, options);

              if (!Utils.isWhereEmpty(where)) {
                wheres.push(where);
              }

              indexes = Object.values(model.uniqueKeys).map(function (item) {
                return item.fields;
              });
              indexes = indexes.concat(Object.values(model._indexes).filter(function (item) {
                return item.unique;
              }).map(function (item) {
                return item.fields;
              }));
              attributes = Object.keys(insertValues);
              _iteratorNormalCompletion2 = true;
              _didIteratorError2 = false;
              _iteratorError2 = undefined;
              _context2.prev = 10;
              _iterator2 = indexes[Symbol.iterator]();

            case 12:
              if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                _context2.next = 39;
                break;
              }

              index = _step2.value;

              if (!(_.intersection(attributes, index).length === index.length)) {
                _context2.next = 36;
                break;
              }

              where = {};
              _iteratorNormalCompletion3 = true;
              _didIteratorError3 = false;
              _iteratorError3 = undefined;
              _context2.prev = 19;

              for (_iterator3 = index[Symbol.iterator](); !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                field = _step3.value;
                where[field] = insertValues[field];
              }

              _context2.next = 27;
              break;

            case 23:
              _context2.prev = 23;
              _context2.t0 = _context2["catch"](19);
              _didIteratorError3 = true;
              _iteratorError3 = _context2.t0;

            case 27:
              _context2.prev = 27;
              _context2.prev = 28;

              if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                _iterator3["return"]();
              }

            case 30:
              _context2.prev = 30;

              if (!_didIteratorError3) {
                _context2.next = 33;
                break;
              }

              throw _iteratorError3;

            case 33:
              return _context2.finish(30);

            case 34:
              return _context2.finish(27);

            case 35:
              wheres.push(where);

            case 36:
              _iteratorNormalCompletion2 = true;
              _context2.next = 12;
              break;

            case 39:
              _context2.next = 45;
              break;

            case 41:
              _context2.prev = 41;
              _context2.t1 = _context2["catch"](10);
              _didIteratorError2 = true;
              _iteratorError2 = _context2.t1;

            case 45:
              _context2.prev = 45;
              _context2.prev = 46;

              if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                _iterator2["return"]();
              }

            case 48:
              _context2.prev = 48;

              if (!_didIteratorError2) {
                _context2.next = 51;
                break;
              }

              throw _iteratorError2;

            case 51:
              return _context2.finish(48);

            case 52:
              return _context2.finish(45);

            case 53:
              where = _defineProperty({}, Op.or, wheres);
              options.type = QueryTypes.UPSERT;
              options.raw = true;
              sql = this.queryGenerator.upsertQuery(tableName, insertValues, updateValues, where, model, options);
              _context2.next = 59;
              return regeneratorRuntime.awrap(this.sequelize.query(sql, options));

            case 59:
              return _context2.abrupt("return", _context2.sent);

            case 60:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this, [[10, 41, 45, 53], [19, 23, 27, 35], [28,, 30, 34], [46,, 48, 52]]);
    }
  }]);

  return MSSqlQueryInterface;
}(QueryInterface);

exports.MSSqlQueryInterface = MSSqlQueryInterface;
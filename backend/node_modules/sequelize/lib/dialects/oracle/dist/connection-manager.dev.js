"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;

var __defNormalProp = function __defNormalProp(obj, key, value) {
  return key in obj ? __defProp(obj, key, {
    enumerable: true,
    configurable: true,
    writable: true,
    value: value
  }) : obj[key] = value;
};

var __spreadValues = function __spreadValues(a, b) {
  for (var prop in b || (b = {})) {
    if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);
  }

  if (__getOwnPropSymbols) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = __getOwnPropSymbols(b)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var prop = _step.value;
        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }

  return a;
};

var __markAsModule = function __markAsModule(target) {
  return __defProp(target, "__esModule", {
    value: true
  });
};

var __export = function __export(target, all) {
  __markAsModule(target);

  for (var name in all) {
    __defProp(target, name, {
      get: all[name],
      enumerable: true
    });
  }
};

__export(exports, {
  OracleConnectionManager: function OracleConnectionManager() {
    return _OracleConnectionManager;
  }
});

var AbstractConnectionManager = require("../abstract/connection-manager");

var SequelizeErrors = require("../../errors");

var parserStore = require("../parserStore")("oracle");

var _require = require("../../utils/logger"),
    logger = _require.logger;

var semver = require("semver");

var debug = logger.debugContext("connection:oracle");

var DataTypes = require("../../data-types").oracle;

var _require2 = require("util"),
    promisify = _require2.promisify;

var _OracleConnectionManager =
/*#__PURE__*/
function (_AbstractConnectionMa) {
  _inherits(_OracleConnectionManager, _AbstractConnectionMa);

  function _OracleConnectionManager(dialect, sequelize) {
    var _this;

    _classCallCheck(this, _OracleConnectionManager);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(_OracleConnectionManager).call(this, dialect, sequelize));
    _this.sequelize = sequelize;
    _this.sequelize.config.port = _this.sequelize.config.port || 1521;
    _this.lib = _this._loadDialectModule("oracledb");

    _this.extendLib();

    _this.refreshTypeParser(DataTypes);

    return _this;
  }

  _createClass(_OracleConnectionManager, [{
    key: "extendLib",
    value: function extendLib() {
      if (this.sequelize.config && "dialectOptions" in this.sequelize.config) {
        var dialectOptions = this.sequelize.config.dialectOptions;

        if (dialectOptions && "maxRows" in dialectOptions) {
          this.lib.maxRows = this.sequelize.config.dialectOptions.maxRows;
        }

        if (dialectOptions && "fetchAsString" in dialectOptions) {
          this.lib.fetchAsString = this.sequelize.config.dialectOptions.fetchAsString;
        } else {
          this.lib.fetchAsString = [this.lib.CLOB];
        }
      }

      this.lib.fetchAsBuffer = [this.lib.BLOB];
    }
  }, {
    key: "buildConnectString",
    value: function buildConnectString(config) {
      if (!config.host || config.host.length === 0) return config.database;
      var connectString = config.host;

      if (config.port && config.port > 0) {
        connectString += ":".concat(config.port);
      } else {
        connectString += ":1521";
      }

      if (config.database && config.database.length > 0) {
        connectString += "/".concat(config.database);
      }

      return connectString;
    }
  }, {
    key: "_refreshTypeParser",
    value: function _refreshTypeParser(dataType) {
      parserStore.refresh(dataType);
    }
  }, {
    key: "_clearTypeParser",
    value: function _clearTypeParser() {
      parserStore.clear();
    }
  }, {
    key: "connect",
    value: function connect(config) {
      var _this2 = this;

      var connectionConfig, connection, errorCode;
      return regeneratorRuntime.async(function connect$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              connectionConfig = __spreadValues({
                user: config.username,
                password: config.password,
                externalAuth: config.externalAuth,
                stmtCacheSize: 0,
                connectString: this.buildConnectString(config)
              }, config.dialectOptions);
              _context.prev = 1;
              _context.next = 4;
              return regeneratorRuntime.awrap(this.lib.getConnection(connectionConfig));

            case 4:
              connection = _context.sent;
              this.sequelize.options.databaseVersion = semver.coerce(connection.oracleServerVersionString).version;
              debug("connection acquired");
              connection.on("error", function (error) {
                switch (error.code) {
                  case "ESOCKET":
                  case "ECONNRESET":
                  case "EPIPE":
                  case "PROTOCOL_CONNECTION_LOST":
                    _this2.pool.destroy(connection);

                }
              });
              return _context.abrupt("return", connection);

            case 11:
              _context.prev = 11;
              _context.t0 = _context["catch"](1);
              errorCode = _context.t0.message.split(":");
              errorCode = errorCode[0];
              _context.t1 = errorCode;
              _context.next = _context.t1 === "ORA-12560" ? 18 : _context.t1 === "ORA-12154" ? 18 : _context.t1 === "ORA-12505" ? 18 : _context.t1 === "ORA-12514" ? 18 : _context.t1 === "NJS-511" ? 18 : _context.t1 === "NJS-516" ? 18 : _context.t1 === "NJS-517" ? 18 : _context.t1 === "NJS-520" ? 18 : _context.t1 === "ORA-28000" ? 19 : _context.t1 === "ORA-28040" ? 19 : _context.t1 === "ORA-01017" ? 19 : _context.t1 === "NJS-506" ? 19 : _context.t1 === "ORA-12541" ? 20 : _context.t1 === "NJS-503" ? 20 : _context.t1 === "NJS-508" ? 20 : _context.t1 === "NJS-507" ? 20 : _context.t1 === "NJS-512" ? 21 : _context.t1 === "NJS-515" ? 21 : _context.t1 === "NJS-518" ? 21 : _context.t1 === "NJS-519" ? 21 : _context.t1 === "ORA-12170" ? 22 : _context.t1 === "NJS-510" ? 22 : 23;
              break;

            case 18:
              throw new SequelizeErrors.ConnectionRefusedError(_context.t0);

            case 19:
              throw new SequelizeErrors.AccessDeniedError(_context.t0);

            case 20:
              throw new SequelizeErrors.HostNotReachableError(_context.t0);

            case 21:
              throw new SequelizeErrors.InvalidConnectionError(_context.t0);

            case 22:
              throw new SequelizeErrors.ConnectionTimedOutError(_context.t0);

            case 23:
              throw new SequelizeErrors.ConnectionError(_context.t0);

            case 24:
            case "end":
              return _context.stop();
          }
        }
      }, null, this, [[1, 11]]);
    }
  }, {
    key: "disconnect",
    value: function disconnect(connection) {
      return regeneratorRuntime.async(function disconnect$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (connection.isHealthy()) {
                _context2.next = 3;
                break;
              }

              debug("connection tried to disconnect but was already at CLOSED state");
              return _context2.abrupt("return");

            case 3:
              _context2.next = 5;
              return regeneratorRuntime.awrap(promisify(function (callback) {
                return connection.close(callback);
              })());

            case 5:
              return _context2.abrupt("return", _context2.sent);

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      });
    }
  }, {
    key: "validate",
    value: function validate(connection) {
      return connection && connection.isHealthy();
    }
  }]);

  return _OracleConnectionManager;
}(AbstractConnectionManager);
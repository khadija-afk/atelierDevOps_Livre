"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var AbstractConnectionManager = require("../abstract/connection-manager");

var sequelizeErrors = require("../../errors");

var _require = require("../../utils/logger"),
    logger = _require.logger;

var DataTypes = require("../../data-types").db2;

var debug = logger.debugContext("connection:db2");

var parserStore = require("../parserStore")("db2");

var ConnectionManager =
/*#__PURE__*/
function (_AbstractConnectionMa) {
  _inherits(ConnectionManager, _AbstractConnectionMa);

  function ConnectionManager(dialect, sequelize) {
    var _this;

    _classCallCheck(this, ConnectionManager);

    sequelize.config.port = sequelize.config.port || 3306;
    _this = _possibleConstructorReturn(this, _getPrototypeOf(ConnectionManager).call(this, dialect, sequelize));
    _this.lib = _this._loadDialectModule("ibm_db");

    _this.refreshTypeParser(DataTypes);

    return _this;
  }

  _createClass(ConnectionManager, [{
    key: "_refreshTypeParser",
    value: function _refreshTypeParser(dataType) {
      parserStore.refresh(dataType);
    }
  }, {
    key: "_clearTypeParser",
    value: function _clearTypeParser() {
      parserStore.clear();
    }
  }, {
    key: "connect",
    value: function connect(config) {
      var _this2 = this;

      var connectionConfig, _i, _Object$keys, key, connection;

      return regeneratorRuntime.async(function connect$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              connectionConfig = {
                database: config.database,
                hostname: config.host,
                port: config.port,
                uid: config.username,
                pwd: config.password
              };

              if (config.ssl) {
                connectionConfig["security"] = config.ssl;
              }

              if (config.sslcertificate) {
                connectionConfig["SSLServerCertificate"] = config.sslcertificate;
              }

              if (config.dialectOptions) {
                for (_i = 0, _Object$keys = Object.keys(config.dialectOptions); _i < _Object$keys.length; _i++) {
                  key = _Object$keys[_i];
                  connectionConfig[key] = config.dialectOptions[key];
                }
              }

              _context.prev = 4;
              _context.next = 7;
              return regeneratorRuntime.awrap(new Promise(function (resolve, reject) {
                var connection2 = new _this2.lib.Database();
                connection2.lib = _this2.lib;
                connection2.open(connectionConfig, function (error) {
                  if (error) {
                    if (error.message && error.message.includes("SQL30081N")) {
                      return reject(new sequelizeErrors.ConnectionRefusedError(error));
                    }

                    return reject(new sequelizeErrors.ConnectionError(error));
                  }

                  return resolve(connection2);
                });
              }));

            case 7:
              connection = _context.sent;
              return _context.abrupt("return", connection);

            case 11:
              _context.prev = 11;
              _context.t0 = _context["catch"](4);
              throw new sequelizeErrors.ConnectionError(_context.t0);

            case 14:
            case "end":
              return _context.stop();
          }
        }
      }, null, null, [[4, 11]]);
    }
  }, {
    key: "disconnect",
    value: function disconnect(connection) {
      if (connection.connected) {
        connection.close(function (error) {
          if (error) {
            debug(error);
          } else {
            debug("connection closed");
          }
        });
      }

      return Promise.resolve();
    }
  }, {
    key: "validate",
    value: function validate(connection) {
      return connection && connection.connected;
    }
  }, {
    key: "_disconnect",
    value: function _disconnect(connection) {
      return this.dialect.connectionManager.disconnect(connection);
    }
  }], [{
    key: "_typecast",
    value: function _typecast(field, next) {
      if (parserStore.get(field.type)) {
        return parserStore.get(field.type)(field, this.sequelize.options, next);
      }

      return next();
    }
  }]);

  return ConnectionManager;
}(AbstractConnectionManager);

module.exports = ConnectionManager;
module.exports.ConnectionManager = ConnectionManager;
module.exports["default"] = ConnectionManager;
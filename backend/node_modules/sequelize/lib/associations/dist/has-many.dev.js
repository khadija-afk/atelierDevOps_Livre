"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;

var __defNormalProp = function __defNormalProp(obj, key, value) {
  return key in obj ? __defProp(obj, key, {
    enumerable: true,
    configurable: true,
    writable: true,
    value: value
  }) : obj[key] = value;
};

var __spreadValues = function __spreadValues(a, b) {
  for (var prop in b || (b = {})) {
    if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);
  }

  if (__getOwnPropSymbols) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = __getOwnPropSymbols(b)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var prop = _step.value;
        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }

  return a;
};

var __spreadProps = function __spreadProps(a, b) {
  return __defProps(a, __getOwnPropDescs(b));
};

var Utils = require("./../utils");

var Helpers = require("./helpers");

var _ = require("lodash");

var Association = require("./base");

var Op = require("../operators");

var HasMany =
/*#__PURE__*/
function (_Association) {
  _inherits(HasMany, _Association);

  function HasMany(source, target, options) {
    var _this;

    _classCallCheck(this, HasMany);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(HasMany).call(this, source, target, options));
    _this.associationType = "HasMany";
    _this.targetAssociation = null;
    _this.sequelize = source.sequelize;
    _this.isMultiAssociation = true;
    _this.foreignKeyAttribute = {};

    if (_this.options.through) {
      throw new Error("N:M associations are not supported with hasMany. Use belongsToMany instead");
    }

    if (_this.isSelfAssociation) {
      _this.targetAssociation = _assertThisInitialized(_this);
    }

    if (_this.as) {
      _this.isAliased = true;

      if (_.isPlainObject(_this.as)) {
        _this.options.name = _this.as;
        _this.as = _this.as.plural;
      } else {
        _this.options.name = {
          plural: _this.as,
          singular: Utils.singularize(_this.as)
        };
      }
    } else {
      _this.as = _this.target.options.name.plural;
      _this.options.name = _this.target.options.name;
    }

    if (_.isObject(_this.options.foreignKey)) {
      _this.foreignKeyAttribute = _this.options.foreignKey;
      _this.foreignKey = _this.foreignKeyAttribute.name || _this.foreignKeyAttribute.fieldName;
    } else if (_this.options.foreignKey) {
      _this.foreignKey = _this.options.foreignKey;
    }

    if (!_this.foreignKey) {
      _this.foreignKey = Utils.camelize([_this.source.options.name.singular, _this.source.primaryKeyAttribute].join("_"));
    }

    if (_this.target.rawAttributes[_this.foreignKey]) {
      _this.identifierField = _this.target.rawAttributes[_this.foreignKey].field || _this.foreignKey;
      _this.foreignKeyField = _this.target.rawAttributes[_this.foreignKey].field || _this.foreignKey;
    }

    _this.sourceKey = _this.options.sourceKey || _this.source.primaryKeyAttribute;

    if (_this.source.rawAttributes[_this.sourceKey]) {
      _this.sourceKeyAttribute = _this.sourceKey;
      _this.sourceKeyField = _this.source.rawAttributes[_this.sourceKey].field || _this.sourceKey;
    } else {
      _this.sourceKeyAttribute = _this.source.primaryKeyAttribute;
      _this.sourceKeyField = _this.source.primaryKeyField;
    }

    var plural = _.upperFirst(_this.options.name.plural);

    var singular = _.upperFirst(_this.options.name.singular);

    _this.associationAccessor = _this.as;
    _this.accessors = {
      get: "get".concat(plural),
      set: "set".concat(plural),
      addMultiple: "add".concat(plural),
      add: "add".concat(singular),
      create: "create".concat(singular),
      remove: "remove".concat(singular),
      removeMultiple: "remove".concat(plural),
      hasSingle: "has".concat(singular),
      hasAll: "has".concat(plural),
      count: "count".concat(plural)
    };
    return _this;
  }

  _createClass(HasMany, [{
    key: "_injectAttributes",
    value: function _injectAttributes() {
      var newAttributes = _defineProperty({}, this.foreignKey, __spreadValues({
        type: this.options.keyType || this.source.rawAttributes[this.sourceKeyAttribute].type,
        allowNull: true
      }, this.foreignKeyAttribute));

      var constraintOptions = __spreadValues({}, this.options);

      if (this.options.constraints !== false) {
        var target = this.target.rawAttributes[this.foreignKey] || newAttributes[this.foreignKey];
        constraintOptions.onDelete = constraintOptions.onDelete || (target.allowNull ? "SET NULL" : "CASCADE");
        constraintOptions.onUpdate = constraintOptions.onUpdate || "CASCADE";
      }

      Helpers.addForeignKeyConstraints(newAttributes[this.foreignKey], this.source, this.target, constraintOptions, this.sourceKeyField);
      Utils.mergeDefaults(this.target.rawAttributes, newAttributes);
      this.target.refreshAttributes();
      this.source.refreshAttributes();
      this.identifierField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;
      this.foreignKeyField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;
      this.sourceKeyField = this.source.rawAttributes[this.sourceKey].field || this.sourceKey;
      Helpers.checkNamingCollision(this);
      return this;
    }
  }, {
    key: "mixin",
    value: function mixin(obj) {
      var methods = ["get", "count", "hasSingle", "hasAll", "set", "add", "addMultiple", "remove", "removeMultiple", "create"];
      var aliases = {
        hasSingle: "has",
        hasAll: "has",
        addMultiple: "add",
        removeMultiple: "remove"
      };
      Helpers.mixinMethods(this, obj, methods, aliases);
    }
  }, {
    key: "get",
    value: function get(instances) {
      var _this2 = this;

      var options,
          where,
          Model,
          instance,
          values,
          results,
          result,
          _iteratorNormalCompletion2,
          _didIteratorError2,
          _iteratorError2,
          _iterator2,
          _step2,
          _instance,
          _iteratorNormalCompletion3,
          _didIteratorError3,
          _iteratorError3,
          _iterator3,
          _step3,
          _instance2,
          _args = arguments;

      return regeneratorRuntime.async(function get$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
              where = {};
              Model = this.target;

              if (!Array.isArray(instances)) {
                instance = instances;
                instances = void 0;
              }

              options = __spreadValues({}, options);

              if (this.scope) {
                Object.assign(where, this.scope);
              }

              if (instances) {
                values = instances.map(function (_instance) {
                  return _instance.get(_this2.sourceKey, {
                    raw: true
                  });
                });

                if (options.limit && instances.length > 1) {
                  options.groupedLimit = {
                    limit: options.limit,
                    on: this,
                    values: values
                  };
                  delete options.limit;
                } else {
                  where[this.foreignKey] = _defineProperty({}, Op["in"], values);
                  delete options.groupedLimit;
                }
              } else {
                where[this.foreignKey] = instance.get(this.sourceKey, {
                  raw: true
                });
              }

              options.where = options.where ? _defineProperty({}, Op.and, [where, options.where]) : where;

              if (Object.prototype.hasOwnProperty.call(options, "scope")) {
                if (!options.scope) {
                  Model = Model.unscoped();
                } else {
                  Model = Model.scope(options.scope);
                }
              }

              if (Object.prototype.hasOwnProperty.call(options, "schema")) {
                Model = Model.schema(options.schema, options.schemaDelimiter);
              }

              _context.next = 12;
              return regeneratorRuntime.awrap(Model.findAll(options));

            case 12:
              results = _context.sent;

              if (!instance) {
                _context.next = 15;
                break;
              }

              return _context.abrupt("return", results);

            case 15:
              result = {};
              _iteratorNormalCompletion2 = true;
              _didIteratorError2 = false;
              _iteratorError2 = undefined;
              _context.prev = 19;

              for (_iterator2 = instances[Symbol.iterator](); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                _instance = _step2.value;
                result[_instance.get(this.sourceKey, {
                  raw: true
                })] = [];
              }

              _context.next = 27;
              break;

            case 23:
              _context.prev = 23;
              _context.t0 = _context["catch"](19);
              _didIteratorError2 = true;
              _iteratorError2 = _context.t0;

            case 27:
              _context.prev = 27;
              _context.prev = 28;

              if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                _iterator2["return"]();
              }

            case 30:
              _context.prev = 30;

              if (!_didIteratorError2) {
                _context.next = 33;
                break;
              }

              throw _iteratorError2;

            case 33:
              return _context.finish(30);

            case 34:
              return _context.finish(27);

            case 35:
              _iteratorNormalCompletion3 = true;
              _didIteratorError3 = false;
              _iteratorError3 = undefined;
              _context.prev = 38;

              for (_iterator3 = results[Symbol.iterator](); !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                _instance2 = _step3.value;

                result[_instance2.get(this.foreignKey, {
                  raw: true
                })].push(_instance2);
              }

              _context.next = 46;
              break;

            case 42:
              _context.prev = 42;
              _context.t1 = _context["catch"](38);
              _didIteratorError3 = true;
              _iteratorError3 = _context.t1;

            case 46:
              _context.prev = 46;
              _context.prev = 47;

              if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                _iterator3["return"]();
              }

            case 49:
              _context.prev = 49;

              if (!_didIteratorError3) {
                _context.next = 52;
                break;
              }

              throw _iteratorError3;

            case 52:
              return _context.finish(49);

            case 53:
              return _context.finish(46);

            case 54:
              return _context.abrupt("return", result);

            case 55:
            case "end":
              return _context.stop();
          }
        }
      }, null, this, [[19, 23, 27, 35], [28,, 30, 34], [38, 42, 46, 54], [47,, 49, 53]]);
    }
  }, {
    key: "count",
    value: function count(instance, options) {
      var result;
      return regeneratorRuntime.async(function count$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              options = Utils.cloneDeep(options);
              options.attributes = [[this.sequelize.fn("COUNT", this.sequelize.col("".concat(this.target.name, ".").concat(this.target.primaryKeyField))), "count"]];
              options.raw = true;
              options.plain = true;
              _context2.next = 6;
              return regeneratorRuntime.awrap(this.get(instance, options));

            case 6:
              result = _context2.sent;
              return _context2.abrupt("return", parseInt(result.count, 10));

            case 8:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "has",
    value: function has(sourceInstance, targetInstances, options) {
      var _this3 = this;

      var where, associatedObjects;
      return regeneratorRuntime.async(function has$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              where = {};

              if (!Array.isArray(targetInstances)) {
                targetInstances = [targetInstances];
              }

              options = __spreadProps(__spreadValues({}, options), {
                scope: false,
                attributes: [this.target.primaryKeyAttribute],
                raw: true
              });
              where[Op.or] = targetInstances.map(function (instance) {
                if (instance instanceof _this3.target) {
                  return instance.where();
                }

                return _defineProperty({}, _this3.target.primaryKeyAttribute, instance);
              });
              options.where = _defineProperty({}, Op.and, [where, options.where]);
              _context3.next = 7;
              return regeneratorRuntime.awrap(this.get(sourceInstance, options));

            case 7:
              associatedObjects = _context3.sent;
              return _context3.abrupt("return", associatedObjects.length === targetInstances.length);

            case 9:
            case "end":
              return _context3.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "set",
    value: function set(sourceInstance, targetInstances, options) {
      var _this4 = this;

      var oldAssociations, promises, obsoleteAssociations, unassociatedObjects, updateWhere, update;
      return regeneratorRuntime.async(function set$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              if (targetInstances === null) {
                targetInstances = [];
              } else {
                targetInstances = this.toInstanceArray(targetInstances);
              }

              _context4.next = 3;
              return regeneratorRuntime.awrap(this.get(sourceInstance, __spreadProps(__spreadValues({}, options), {
                scope: false,
                raw: true
              })));

            case 3:
              oldAssociations = _context4.sent;
              promises = [];
              obsoleteAssociations = oldAssociations.filter(function (old) {
                return !targetInstances.find(function (obj) {
                  return obj[_this4.target.primaryKeyAttribute] === old[_this4.target.primaryKeyAttribute];
                });
              });
              unassociatedObjects = targetInstances.filter(function (obj) {
                return !oldAssociations.find(function (old) {
                  return obj[_this4.target.primaryKeyAttribute] === old[_this4.target.primaryKeyAttribute];
                });
              });

              if (obsoleteAssociations.length > 0) {
                update = {};
                update[this.foreignKey] = null;
                updateWhere = _defineProperty({}, this.target.primaryKeyAttribute, obsoleteAssociations.map(function (associatedObject) {
                  return associatedObject[_this4.target.primaryKeyAttribute];
                }));
                promises.push(this.target.unscoped().update(update, __spreadProps(__spreadValues({}, options), {
                  where: updateWhere
                })));
              }

              if (unassociatedObjects.length > 0) {
                updateWhere = {};
                update = {};
                update[this.foreignKey] = sourceInstance.get(this.sourceKey);
                Object.assign(update, this.scope);
                updateWhere[this.target.primaryKeyAttribute] = unassociatedObjects.map(function (unassociatedObject) {
                  return unassociatedObject[_this4.target.primaryKeyAttribute];
                });
                promises.push(this.target.unscoped().update(update, __spreadProps(__spreadValues({}, options), {
                  where: updateWhere
                })));
              }

              _context4.next = 11;
              return regeneratorRuntime.awrap(Promise.all(promises));

            case 11:
              return _context4.abrupt("return", sourceInstance);

            case 12:
            case "end":
              return _context4.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "add",
    value: function add(sourceInstance, targetInstances) {
      var _this5 = this;

      var options,
          update,
          where,
          _args5 = arguments;
      return regeneratorRuntime.async(function add$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              options = _args5.length > 2 && _args5[2] !== undefined ? _args5[2] : {};

              if (targetInstances) {
                _context5.next = 3;
                break;
              }

              return _context5.abrupt("return", Promise.resolve());

            case 3:
              targetInstances = this.toInstanceArray(targetInstances);
              update = __spreadValues(_defineProperty({}, this.foreignKey, sourceInstance.get(this.sourceKey)), this.scope);
              where = _defineProperty({}, this.target.primaryKeyAttribute, targetInstances.map(function (unassociatedObject) {
                return unassociatedObject.get(_this5.target.primaryKeyAttribute);
              }));
              _context5.next = 8;
              return regeneratorRuntime.awrap(this.target.unscoped().update(update, __spreadProps(__spreadValues({}, options), {
                where: where
              })));

            case 8:
              return _context5.abrupt("return", sourceInstance);

            case 9:
            case "end":
              return _context5.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "remove",
    value: function remove(sourceInstance, targetInstances) {
      var _this6 = this,
          _where2;

      var options,
          update,
          where,
          _args6 = arguments;
      return regeneratorRuntime.async(function remove$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              options = _args6.length > 2 && _args6[2] !== undefined ? _args6[2] : {};
              update = _defineProperty({}, this.foreignKey, null);
              targetInstances = this.toInstanceArray(targetInstances);
              where = (_where2 = {}, _defineProperty(_where2, this.foreignKey, sourceInstance.get(this.sourceKey)), _defineProperty(_where2, this.target.primaryKeyAttribute, targetInstances.map(function (targetInstance) {
                return targetInstance.get(_this6.target.primaryKeyAttribute);
              })), _where2);
              _context6.next = 6;
              return regeneratorRuntime.awrap(this.target.unscoped().update(update, __spreadProps(__spreadValues({}, options), {
                where: where
              })));

            case 6:
              return _context6.abrupt("return", this);

            case 7:
            case "end":
              return _context6.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "create",
    value: function create(sourceInstance, values) {
      var options,
          _i,
          _Object$keys,
          attribute,
          _args7 = arguments;

      return regeneratorRuntime.async(function create$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              options = _args7.length > 2 && _args7[2] !== undefined ? _args7[2] : {};

              if (Array.isArray(options)) {
                options = {
                  fields: options
                };
              }

              if (values === void 0) {
                values = {};
              }

              if (this.scope) {
                for (_i = 0, _Object$keys = Object.keys(this.scope); _i < _Object$keys.length; _i++) {
                  attribute = _Object$keys[_i];
                  values[attribute] = this.scope[attribute];
                  if (options.fields) options.fields.push(attribute);
                }
              }

              values[this.foreignKey] = sourceInstance.get(this.sourceKey);
              if (options.fields) options.fields.push(this.foreignKey);
              _context7.next = 8;
              return regeneratorRuntime.awrap(this.target.create(values, options));

            case 8:
              return _context7.abrupt("return", _context7.sent);

            case 9:
            case "end":
              return _context7.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "verifyAssociationAlias",
    value: function verifyAssociationAlias(alias) {
      if (typeof alias === "string") {
        return this.as === alias;
      }

      if (alias && alias.plural) {
        return this.as === alias.plural;
      }

      return !this.isAliased;
    }
  }]);

  return HasMany;
}(Association);

module.exports = HasMany;
module.exports.HasMany = HasMany;
module.exports["default"] = HasMany;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.localeEras = localeEras;
exports.localeErasParse = localeErasParse;
exports.localeErasConvertYear = localeErasConvertYear;
exports.getEraName = getEraName;
exports.getEraNarrow = getEraNarrow;
exports.getEraAbbr = getEraAbbr;
exports.getEraYear = getEraYear;
exports.erasNameRegex = erasNameRegex;
exports.erasAbbrRegex = erasAbbrRegex;
exports.erasNarrowRegex = erasNarrowRegex;

var _format = require("../format/format");

var _regex = require("../parse/regex");

var _token = require("../parse/token");

var _constants = require("./constants");

var _hooks = require("../utils/hooks");

var _locales = require("../locale/locales");

var _parsingFlags = _interopRequireDefault(require("../create/parsing-flags"));

var _hasOwnProp = _interopRequireDefault(require("../utils/has-own-prop"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

(0, _format.addFormatToken)('N', 0, 0, 'eraAbbr');
(0, _format.addFormatToken)('NN', 0, 0, 'eraAbbr');
(0, _format.addFormatToken)('NNN', 0, 0, 'eraAbbr');
(0, _format.addFormatToken)('NNNN', 0, 0, 'eraName');
(0, _format.addFormatToken)('NNNNN', 0, 0, 'eraNarrow');
(0, _format.addFormatToken)('y', ['y', 1], 'yo', 'eraYear');
(0, _format.addFormatToken)('y', ['yy', 2], 0, 'eraYear');
(0, _format.addFormatToken)('y', ['yyy', 3], 0, 'eraYear');
(0, _format.addFormatToken)('y', ['yyyy', 4], 0, 'eraYear');
(0, _regex.addRegexToken)('N', matchEraAbbr);
(0, _regex.addRegexToken)('NN', matchEraAbbr);
(0, _regex.addRegexToken)('NNN', matchEraAbbr);
(0, _regex.addRegexToken)('NNNN', matchEraName);
(0, _regex.addRegexToken)('NNNNN', matchEraNarrow);
(0, _token.addParseToken)(['N', 'NN', 'NNN', 'NNNN', 'NNNNN'], function (input, array, config, token) {
  var era = config._locale.erasParse(input, token, config._strict);

  if (era) {
    (0, _parsingFlags["default"])(config).era = era;
  } else {
    (0, _parsingFlags["default"])(config).invalidEra = input;
  }
});
(0, _regex.addRegexToken)('y', _regex.matchUnsigned);
(0, _regex.addRegexToken)('yy', _regex.matchUnsigned);
(0, _regex.addRegexToken)('yyy', _regex.matchUnsigned);
(0, _regex.addRegexToken)('yyyy', _regex.matchUnsigned);
(0, _regex.addRegexToken)('yo', matchEraYearOrdinal);
(0, _token.addParseToken)(['y', 'yy', 'yyy', 'yyyy'], _constants.YEAR);
(0, _token.addParseToken)(['yo'], function (input, array, config, token) {
  var match;

  if (config._locale._eraYearOrdinalRegex) {
    match = input.match(config._locale._eraYearOrdinalRegex);
  }

  if (config._locale.eraYearOrdinalParse) {
    array[_constants.YEAR] = config._locale.eraYearOrdinalParse(input, match);
  } else {
    array[_constants.YEAR] = parseInt(input, 10);
  }
});

function localeEras(m, format) {
  var i,
      l,
      date,
      eras = this._eras || (0, _locales.getLocale)('en')._eras;

  for (i = 0, l = eras.length; i < l; ++i) {
    switch (_typeof(eras[i].since)) {
      case 'string':
        // truncate time
        date = (0, _hooks.hooks)(eras[i].since).startOf('day');
        eras[i].since = date.valueOf();
        break;
    }

    switch (_typeof(eras[i].until)) {
      case 'undefined':
        eras[i].until = +Infinity;
        break;

      case 'string':
        // truncate time
        date = (0, _hooks.hooks)(eras[i].until).startOf('day').valueOf();
        eras[i].until = date.valueOf();
        break;
    }
  }

  return eras;
}

function localeErasParse(eraName, format, strict) {
  var i,
      l,
      eras = this.eras(),
      name,
      abbr,
      narrow;
  eraName = eraName.toUpperCase();

  for (i = 0, l = eras.length; i < l; ++i) {
    name = eras[i].name.toUpperCase();
    abbr = eras[i].abbr.toUpperCase();
    narrow = eras[i].narrow.toUpperCase();

    if (strict) {
      switch (format) {
        case 'N':
        case 'NN':
        case 'NNN':
          if (abbr === eraName) {
            return eras[i];
          }

          break;

        case 'NNNN':
          if (name === eraName) {
            return eras[i];
          }

          break;

        case 'NNNNN':
          if (narrow === eraName) {
            return eras[i];
          }

          break;
      }
    } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
      return eras[i];
    }
  }
}

function localeErasConvertYear(era, year) {
  var dir = era.since <= era.until ? +1 : -1;

  if (year === undefined) {
    return (0, _hooks.hooks)(era.since).year();
  } else {
    return (0, _hooks.hooks)(era.since).year() + (year - era.offset) * dir;
  }
}

function getEraName() {
  var i,
      l,
      val,
      eras = this.localeData().eras();

  for (i = 0, l = eras.length; i < l; ++i) {
    // truncate time
    val = this.clone().startOf('day').valueOf();

    if (eras[i].since <= val && val <= eras[i].until) {
      return eras[i].name;
    }

    if (eras[i].until <= val && val <= eras[i].since) {
      return eras[i].name;
    }
  }

  return '';
}

function getEraNarrow() {
  var i,
      l,
      val,
      eras = this.localeData().eras();

  for (i = 0, l = eras.length; i < l; ++i) {
    // truncate time
    val = this.clone().startOf('day').valueOf();

    if (eras[i].since <= val && val <= eras[i].until) {
      return eras[i].narrow;
    }

    if (eras[i].until <= val && val <= eras[i].since) {
      return eras[i].narrow;
    }
  }

  return '';
}

function getEraAbbr() {
  var i,
      l,
      val,
      eras = this.localeData().eras();

  for (i = 0, l = eras.length; i < l; ++i) {
    // truncate time
    val = this.clone().startOf('day').valueOf();

    if (eras[i].since <= val && val <= eras[i].until) {
      return eras[i].abbr;
    }

    if (eras[i].until <= val && val <= eras[i].since) {
      return eras[i].abbr;
    }
  }

  return '';
}

function getEraYear() {
  var i,
      l,
      dir,
      val,
      eras = this.localeData().eras();

  for (i = 0, l = eras.length; i < l; ++i) {
    dir = eras[i].since <= eras[i].until ? +1 : -1; // truncate time

    val = this.clone().startOf('day').valueOf();

    if (eras[i].since <= val && val <= eras[i].until || eras[i].until <= val && val <= eras[i].since) {
      return (this.year() - (0, _hooks.hooks)(eras[i].since).year()) * dir + eras[i].offset;
    }
  }

  return this.year();
}

function erasNameRegex(isStrict) {
  if (!(0, _hasOwnProp["default"])(this, '_erasNameRegex')) {
    computeErasParse.call(this);
  }

  return isStrict ? this._erasNameRegex : this._erasRegex;
}

function erasAbbrRegex(isStrict) {
  if (!(0, _hasOwnProp["default"])(this, '_erasAbbrRegex')) {
    computeErasParse.call(this);
  }

  return isStrict ? this._erasAbbrRegex : this._erasRegex;
}

function erasNarrowRegex(isStrict) {
  if (!(0, _hasOwnProp["default"])(this, '_erasNarrowRegex')) {
    computeErasParse.call(this);
  }

  return isStrict ? this._erasNarrowRegex : this._erasRegex;
}

function matchEraAbbr(isStrict, locale) {
  return locale.erasAbbrRegex(isStrict);
}

function matchEraName(isStrict, locale) {
  return locale.erasNameRegex(isStrict);
}

function matchEraNarrow(isStrict, locale) {
  return locale.erasNarrowRegex(isStrict);
}

function matchEraYearOrdinal(isStrict, locale) {
  return locale._eraYearOrdinalRegex || _regex.matchUnsigned;
}

function computeErasParse() {
  var abbrPieces = [],
      namePieces = [],
      narrowPieces = [],
      mixedPieces = [],
      i,
      l,
      erasName,
      erasAbbr,
      erasNarrow,
      eras = this.eras();

  for (i = 0, l = eras.length; i < l; ++i) {
    erasName = (0, _regex.regexEscape)(eras[i].name);
    erasAbbr = (0, _regex.regexEscape)(eras[i].abbr);
    erasNarrow = (0, _regex.regexEscape)(eras[i].narrow);
    namePieces.push(erasName);
    abbrPieces.push(erasAbbr);
    narrowPieces.push(erasNarrow);
    mixedPieces.push(erasName);
    mixedPieces.push(erasAbbr);
    mixedPieces.push(erasNarrow);
  }

  this._erasRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
  this._erasNameRegex = new RegExp('^(' + namePieces.join('|') + ')', 'i');
  this._erasAbbrRegex = new RegExp('^(' + abbrPieces.join('|') + ')', 'i');
  this._erasNarrowRegex = new RegExp('^(' + narrowPieces.join('|') + ')', 'i');
}
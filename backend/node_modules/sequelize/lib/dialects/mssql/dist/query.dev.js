"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var AbstractQuery = require("../abstract/query");

var sequelizeErrors = require("../../errors");

var parserStore = require("../parserStore")("mssql");

var _ = require("lodash");

var _require = require("../../utils/logger"),
    logger = _require.logger;

var debug = logger.debugContext("sql:mssql");
var minSafeIntegerAsBigInt = BigInt(Number.MIN_SAFE_INTEGER);
var maxSafeIntegerAsBigInt = BigInt(Number.MAX_SAFE_INTEGER);

function getScale(aNum) {
  if (!Number.isFinite(aNum)) return 0;
  var e = 1;

  while (Math.round(aNum * e) / e !== aNum) {
    e *= 10;
  }

  return Math.log10(e);
}

var Query =
/*#__PURE__*/
function (_AbstractQuery) {
  _inherits(Query, _AbstractQuery);

  function Query() {
    _classCallCheck(this, Query);

    return _possibleConstructorReturn(this, _getPrototypeOf(Query).apply(this, arguments));
  }

  _createClass(Query, [{
    key: "getInsertIdField",
    value: function getInsertIdField() {
      return "id";
    }
  }, {
    key: "getSQLTypeFromJsType",
    value: function getSQLTypeFromJsType(value, TYPES) {
      var paramType = {
        type: TYPES.NVarChar,
        typeOptions: {},
        value: value
      };

      if (typeof value === "number") {
        if (Number.isInteger(value)) {
          if (value >= -2147483648 && value <= 2147483647) {
            paramType.type = TYPES.Int;
          } else {
            paramType.type = TYPES.BigInt;
          }
        } else {
          paramType.type = TYPES.Numeric;
          paramType.typeOptions = {
            precision: 30,
            scale: getScale(value)
          };
        }
      } else if (typeof value === "bigint") {
        if (value < minSafeIntegerAsBigInt || value > maxSafeIntegerAsBigInt) {
          paramType.type = TYPES.VarChar;
          paramType.value = value.toString();
        } else {
          return this.getSQLTypeFromJsType(Number(value), TYPES);
        }
      } else if (typeof value === "boolean") {
        paramType.type = TYPES.Bit;
      }

      if (Buffer.isBuffer(value)) {
        paramType.type = TYPES.VarBinary;
      }

      return paramType;
    }
  }, {
    key: "_run",
    value: function _run(connection, sql, parameters, errStack) {
      var _this = this;

      var options, complete, query, rows, rowCount, _ref, _ref2;

      return regeneratorRuntime.async(function _run$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.sql = sql;
              options = this.options;
              complete = this._logQuery(sql, debug, parameters);
              query = new Promise(function (resolve, reject) {
                if (sql.startsWith("BEGIN TRANSACTION")) {
                  return connection.beginTransaction(function (error) {
                    return error ? reject(error) : resolve([]);
                  }, options.transaction.name, connection.lib.ISOLATION_LEVEL[options.isolationLevel]);
                }

                if (sql.startsWith("COMMIT TRANSACTION")) {
                  return connection.commitTransaction(function (error) {
                    return error ? reject(error) : resolve([]);
                  });
                }

                if (sql.startsWith("ROLLBACK TRANSACTION")) {
                  return connection.rollbackTransaction(function (error) {
                    return error ? reject(error) : resolve([]);
                  }, options.transaction.name);
                }

                if (sql.startsWith("SAVE TRANSACTION")) {
                  return connection.saveTransaction(function (error) {
                    return error ? reject(error) : resolve([]);
                  }, options.transaction.name);
                }

                var rows2 = [];
                var request = new connection.lib.Request(sql, function (err, rowCount2) {
                  return err ? reject(err) : resolve([rows2, rowCount2]);
                });

                if (parameters) {
                  _.forOwn(parameters, function (value, key) {
                    var paramType = _this.getSQLTypeFromJsType(value, connection.lib.TYPES);

                    request.addParameter(key, paramType.type, value, paramType.typeOptions);
                  });
                }

                request.on("row", function (columns) {
                  rows2.push(columns);
                });
                connection.execSql(request);
              });
              _context.prev = 4;
              _context.next = 7;
              return regeneratorRuntime.awrap(query);

            case 7:
              _ref = _context.sent;
              _ref2 = _slicedToArray(_ref, 2);
              rows = _ref2[0];
              rowCount = _ref2[1];
              _context.next = 18;
              break;

            case 13:
              _context.prev = 13;
              _context.t0 = _context["catch"](4);
              _context.t0.sql = sql;
              _context.t0.parameters = parameters;
              throw this.formatError(_context.t0, errStack);

            case 18:
              complete();

              if (Array.isArray(rows)) {
                rows = rows.map(function (columns) {
                  var row = {};
                  var _iteratorNormalCompletion = true;
                  var _didIteratorError = false;
                  var _iteratorError = undefined;

                  try {
                    for (var _iterator = columns[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                      var column = _step.value;
                      var typeid = column.metadata.type.id;
                      var parse = parserStore.get(typeid);
                      var value = column.value;

                      if (value !== null & !!parse) {
                        value = parse(value);
                      }

                      row[column.metadata.colName] = value;
                    }
                  } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                        _iterator["return"]();
                      }
                    } finally {
                      if (_didIteratorError) {
                        throw _iteratorError;
                      }
                    }
                  }

                  return row;
                });
              }

              return _context.abrupt("return", this.formatResults(rows, rowCount));

            case 21:
            case "end":
              return _context.stop();
          }
        }
      }, null, this, [[4, 13]]);
    }
  }, {
    key: "run",
    value: function run(sql, parameters) {
      var _this2 = this;

      var errForStack = new Error();
      return this.connection.queue.enqueue(function () {
        return _this2._run(_this2.connection, sql, parameters, errForStack.stack);
      });
    }
  }, {
    key: "formatResults",
    value: function formatResults(data, rowCount) {
      if (this.isInsertQuery(data)) {
        this.handleInsertQuery(data);
        return [this.instance || data, rowCount];
      }

      if (this.isShowTablesQuery()) {
        return this.handleShowTablesQuery(data);
      }

      if (this.isDescribeQuery()) {
        var result = {};
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = data[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var _result = _step2.value;

            if (_result.Default) {
              _result.Default = _result.Default.replace("('", "").replace("')", "").replace(/'/g, "");
            }

            result[_result.Name] = {
              type: _result.Type.toUpperCase(),
              allowNull: _result.IsNull === "YES" ? true : false,
              defaultValue: _result.Default,
              primaryKey: _result.Constraint === "PRIMARY KEY",
              autoIncrement: _result.IsIdentity === 1,
              comment: _result.Comment
            };

            if (result[_result.Name].type.includes("CHAR") && _result.Length) {
              if (_result.Length === -1) {
                result[_result.Name].type += "(MAX)";
              } else {
                result[_result.Name].type += "(".concat(_result.Length, ")");
              }
            }
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
              _iterator2["return"]();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        return result;
      }

      if (this.isSelectQuery()) {
        return this.handleSelectQuery(data);
      }

      if (this.isShowIndexesQuery()) {
        return this.handleShowIndexesQuery(data);
      }

      if (this.isCallQuery()) {
        return data[0];
      }

      if (this.isBulkUpdateQuery()) {
        if (this.options.returning) {
          return this.handleSelectQuery(data);
        }

        return rowCount;
      }

      if (this.isBulkDeleteQuery()) {
        return data[0] ? data[0].AFFECTEDROWS : 0;
      }

      if (this.isVersionQuery()) {
        return data[0].version;
      }

      if (this.isForeignKeysQuery()) {
        return data;
      }

      if (this.isUpsertQuery()) {
        if (data && data.length === 0) {
          return [this.instance || data, false];
        }

        this.handleInsertQuery(data);
        return [this.instance || data, data[0].$action === "INSERT"];
      }

      if (this.isUpdateQuery()) {
        return [this.instance || data, rowCount];
      }

      if (this.isShowConstraintsQuery()) {
        return this.handleShowConstraintsQuery(data);
      }

      if (this.isRawQuery()) {
        return [data, rowCount];
      }

      return data;
    }
  }, {
    key: "handleShowTablesQuery",
    value: function handleShowTablesQuery(results) {
      return results.map(function (resultSet) {
        return {
          tableName: resultSet.TABLE_NAME,
          schema: resultSet.TABLE_SCHEMA
        };
      });
    }
  }, {
    key: "handleShowConstraintsQuery",
    value: function handleShowConstraintsQuery(data) {
      return data.slice(1).map(function (result) {
        var constraint = {};

        for (var key in result) {
          constraint[_.camelCase(key)] = result[key];
        }

        return constraint;
      });
    }
  }, {
    key: "formatError",
    value: function formatError(err, errStack) {
      var _this3 = this;

      var match;
      match = err.message.match(/Violation of (?:UNIQUE|PRIMARY) KEY constraint '([^']*)'. Cannot insert duplicate key in object '.*'.(:? The duplicate key value is \((.*)\).)?/);
      match = match || err.message.match(/Cannot insert duplicate key row in object .* with unique index '(.*)'/);

      if (match && match.length > 1) {
        var fields = {};
        var uniqueKey = this.model && this.model.uniqueKeys[match[1]];
        var message = "Validation error";

        if (uniqueKey && !!uniqueKey.msg) {
          message = uniqueKey.msg;
        }

        if (match[3]) {
          var values = match[3].split(",").map(function (part) {
            return part.trim();
          });

          if (uniqueKey) {
            fields = _.zipObject(uniqueKey.fields, values);
          } else {
            fields[match[1]] = match[3];
          }
        }

        var errors = [];

        _.forOwn(fields, function (value, field) {
          errors.push(new sequelizeErrors.ValidationErrorItem(_this3.getUniqueConstraintErrorMessage(field), "unique violation", field, value, _this3.instance, "not_unique"));
        });

        return new sequelizeErrors.UniqueConstraintError({
          message: message,
          errors: errors,
          parent: err,
          fields: fields,
          stack: errStack
        });
      }

      match = err.message.match(/Failed on step '(.*)'.Could not create constraint. See previous errors./) || err.message.match(/The DELETE statement conflicted with the REFERENCE constraint "(.*)". The conflict occurred in database "(.*)", table "(.*)", column '(.*)'./) || err.message.match(/The (?:INSERT|MERGE|UPDATE) statement conflicted with the FOREIGN KEY constraint "(.*)". The conflict occurred in database "(.*)", table "(.*)", column '(.*)'./);

      if (match && match.length > 0) {
        return new sequelizeErrors.ForeignKeyConstraintError({
          fields: null,
          index: match[1],
          parent: err,
          stack: errStack
        });
      }

      match = err.message.match(/Could not drop constraint. See previous errors./);

      if (match && match.length > 0) {
        var constraint = err.sql.match(/(?:constraint|index) \[(.+?)\]/i);
        constraint = constraint ? constraint[1] : void 0;
        var table = err.sql.match(/table \[(.+?)\]/i);
        table = table ? table[1] : void 0;
        return new sequelizeErrors.UnknownConstraintError({
          message: match[1],
          constraint: constraint,
          table: table,
          parent: err,
          stack: errStack
        });
      }

      return new sequelizeErrors.DatabaseError(err, {
        stack: errStack
      });
    }
  }, {
    key: "isShowOrDescribeQuery",
    value: function isShowOrDescribeQuery() {
      var result = false;
      result = result || this.sql.toLowerCase().startsWith("select c.column_name as 'name', c.data_type as 'type', c.is_nullable as 'isnull'");
      result = result || this.sql.toLowerCase().startsWith("select tablename = t.name, name = ind.name,");
      result = result || this.sql.toLowerCase().startsWith("exec sys.sp_helpindex @objname");
      return result;
    }
  }, {
    key: "isShowIndexesQuery",
    value: function isShowIndexesQuery() {
      return this.sql.toLowerCase().startsWith("exec sys.sp_helpindex @objname");
    }
  }, {
    key: "handleShowIndexesQuery",
    value: function handleShowIndexesQuery(data) {
      data = data.reduce(function (acc, item) {
        if (!(item.index_name in acc)) {
          acc[item.index_name] = item;
          item.fields = [];
        }

        item.index_keys.split(",").forEach(function (column) {
          var columnName = column.trim();

          if (columnName.includes("(-)")) {
            columnName = columnName.replace("(-)", "");
          }

          acc[item.index_name].fields.push({
            attribute: columnName,
            length: void 0,
            order: column.includes("(-)") ? "DESC" : "ASC",
            collate: void 0
          });
        });
        delete item.index_keys;
        return acc;
      }, {});
      return _.map(data, function (item) {
        return {
          primary: item.index_name.toLowerCase().startsWith("pk"),
          fields: item.fields,
          name: item.index_name,
          tableName: void 0,
          unique: item.index_description.toLowerCase().includes("unique"),
          type: void 0
        };
      });
    }
  }, {
    key: "handleInsertQuery",
    value: function handleInsertQuery(results, metaData) {
      var _this4 = this;

      if (this.instance) {
        var autoIncrementAttribute = this.model.autoIncrementAttribute;
        var id = null;
        var autoIncrementAttributeAlias = null;
        if (Object.prototype.hasOwnProperty.call(this.model.rawAttributes, autoIncrementAttribute) && this.model.rawAttributes[autoIncrementAttribute].field !== void 0) autoIncrementAttributeAlias = this.model.rawAttributes[autoIncrementAttribute].field;
        id = id || results && results[0][this.getInsertIdField()];
        id = id || metaData && metaData[this.getInsertIdField()];
        id = id || results && results[0][autoIncrementAttribute];
        id = id || autoIncrementAttributeAlias && results && results[0][autoIncrementAttributeAlias];
        this.instance[autoIncrementAttribute] = id;

        if (this.instance.dataValues) {
          var _loop = function _loop(key) {
            if (Object.prototype.hasOwnProperty.call(results[0], key)) {
              var record = results[0][key];

              var attr = _.find(_this4.model.rawAttributes, function (attribute) {
                return attribute.fieldName === key || attribute.field === key;
              });

              _this4.instance.dataValues[attr && attr.fieldName || key] = record;
            }
          };

          for (var key in results[0]) {
            _loop(key);
          }
        }
      }
    }
  }], [{
    key: "formatBindParameters",
    value: function formatBindParameters(sql, values, dialect) {
      var bindParam = {};

      var replacementFunc = function replacementFunc(match, key, values2) {
        if (values2[key] !== void 0) {
          bindParam[key] = values2[key];
          return "@".concat(key);
        }

        return void 0;
      };

      sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];
      return [sql, bindParam];
    }
  }]);

  return Query;
}(AbstractQuery);

module.exports = Query;
module.exports.Query = Query;
module.exports["default"] = Query;
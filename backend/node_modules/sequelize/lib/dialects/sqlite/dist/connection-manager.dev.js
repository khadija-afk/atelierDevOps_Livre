"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var fs = require("fs");

var path = require("path");

var AbstractConnectionManager = require("../abstract/connection-manager");

var _require = require("../../utils/logger"),
    logger = _require.logger;

var debug = logger.debugContext("connection:sqlite");

var dataTypes = require("../../data-types").sqlite;

var sequelizeErrors = require("../../errors");

var parserStore = require("../parserStore")("sqlite");

var _require2 = require("util"),
    promisify = _require2.promisify;

var ConnectionManager =
/*#__PURE__*/
function (_AbstractConnectionMa) {
  _inherits(ConnectionManager, _AbstractConnectionMa);

  function ConnectionManager(dialect, sequelize) {
    var _this;

    _classCallCheck(this, ConnectionManager);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ConnectionManager).call(this, dialect, sequelize));

    if (_this.sequelize.options.host === "localhost") {
      delete _this.sequelize.options.host;
    }

    _this.connections = {};
    _this.lib = _this._loadDialectModule("sqlite3");

    _this.refreshTypeParser(dataTypes);

    return _this;
  }

  _createClass(ConnectionManager, [{
    key: "_onProcessExit",
    value: function _onProcessExit() {
      var _this2 = this;

      return regeneratorRuntime.async(function _onProcessExit$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return regeneratorRuntime.awrap(Promise.all(Object.getOwnPropertyNames(this.connections).map(function (connection) {
                return promisify(function (callback) {
                  return _this2.connections[connection].close(callback);
                })();
              })));

            case 2:
              return _context.abrupt("return", _get(_getPrototypeOf(ConnectionManager.prototype), "_onProcessExit", this).call(this));

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "_refreshTypeParser",
    value: function _refreshTypeParser(dataType) {
      parserStore.refresh(dataType);
    }
  }, {
    key: "_clearTypeParser",
    value: function _clearTypeParser() {
      parserStore.clear();
    }
  }, {
    key: "getConnection",
    value: function getConnection(options) {
      var _this3 = this;

      var dialectOptions, defaultReadWriteMode, connection;
      return regeneratorRuntime.async(function getConnection$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              options = options || {};
              options.uuid = options.uuid || "default";

              if (!!this.sequelize.options.storage !== null && this.sequelize.options.storage !== void 0) {
                options.storage = this.sequelize.options.storage;
              } else {
                options.storage = this.sequelize.options.host || ":memory:";
              }

              options.inMemory = options.storage === ":memory:" ? 1 : 0;
              dialectOptions = this.sequelize.options.dialectOptions;
              defaultReadWriteMode = this.lib.OPEN_READWRITE | this.lib.OPEN_CREATE;
              options.readWriteMode = dialectOptions && dialectOptions.mode || defaultReadWriteMode;

              if (!this.connections[options.inMemory || options.uuid]) {
                _context2.next = 9;
                break;
              }

              return _context2.abrupt("return", this.connections[options.inMemory || options.uuid]);

            case 9:
              if (!options.inMemory && (options.readWriteMode & this.lib.OPEN_CREATE) !== 0) {
                fs.mkdirSync(path.dirname(options.storage), {
                  recursive: true
                });
              }

              _context2.next = 12;
              return regeneratorRuntime.awrap(new Promise(function (resolve, reject) {
                _this3.connections[options.inMemory || options.uuid] = new _this3.lib.Database(options.storage, options.readWriteMode, function (err) {
                  if (err) return reject(new sequelizeErrors.ConnectionError(err));
                  debug("connection acquired ".concat(options.uuid));
                  resolve(_this3.connections[options.inMemory || options.uuid]);
                });
              }));

            case 12:
              connection = _context2.sent;

              if (this.sequelize.config.password) {
                connection.run("PRAGMA KEY=".concat(this.sequelize.escape(this.sequelize.config.password)));
              }

              if (this.sequelize.options.foreignKeys !== false) {
                connection.run("PRAGMA FOREIGN_KEYS=ON");
              }

              return _context2.abrupt("return", connection);

            case 16:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "releaseConnection",
    value: function releaseConnection(connection, force) {
      if (connection.filename === ":memory:" && force !== true) return;

      if (connection.uuid) {
        connection.close();
        debug("connection released ".concat(connection.uuid));
        delete this.connections[connection.uuid];
      }
    }
  }]);

  return ConnectionManager;
}(AbstractConnectionManager);

module.exports = ConnectionManager;
module.exports.ConnectionManager = ConnectionManager;
module.exports["default"] = ConnectionManager;
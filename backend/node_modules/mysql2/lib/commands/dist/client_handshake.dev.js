// This file was modified by Oracle on June 17, 2021.
// Handshake errors are now maked as fatal and the corresponding events are
// emitted in the command instance itself.
// Modifications copyright (c) 2021, Oracle and/or its affiliates.
// This file was modified by Oracle on September 21, 2021.
// Handshake workflow now supports additional authentication factors requested
// by the server.
// Modifications copyright (c) 2021, Oracle and/or its affiliates.
'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Command = require('./command.js');

var Packets = require('../packets/index.js');

var ClientConstants = require('../constants/client.js');

var CharsetToEncoding = require('../constants/charset_encodings.js');

var auth41 = require('../auth_41.js');

function flagNames(flags) {
  var res = [];

  for (var c in ClientConstants) {
    if (flags & ClientConstants[c]) {
      res.push(c.replace(/_/g, ' ').toLowerCase());
    }
  }

  return res;
}

var ClientHandshake =
/*#__PURE__*/
function (_Command) {
  _inherits(ClientHandshake, _Command);

  function ClientHandshake(clientFlags) {
    var _this;

    _classCallCheck(this, ClientHandshake);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ClientHandshake).call(this));
    _this.handshake = null;
    _this.clientFlags = clientFlags;
    _this.authenticationFactor = 0;
    return _this;
  }

  _createClass(ClientHandshake, [{
    key: "start",
    value: function start() {
      return ClientHandshake.prototype.handshakeInit;
    }
  }, {
    key: "sendSSLRequest",
    value: function sendSSLRequest(connection) {
      var sslRequest = new Packets.SSLRequest(this.clientFlags, connection.config.charsetNumber);
      connection.writePacket(sslRequest.toPacket());
    }
  }, {
    key: "sendCredentials",
    value: function sendCredentials(connection) {
      if (connection.config.debug) {
        // eslint-disable-next-line
        console.log('Sending handshake packet: flags:%d=(%s)', this.clientFlags, flagNames(this.clientFlags).join(', '));
      }

      this.user = connection.config.user;
      this.password = connection.config.password; // "password1" is an alias to the original "password" value
      // to make it easier to integrate multi-factor authentication

      this.password1 = connection.config.password; // "password2" and "password3" are the 2nd and 3rd factor authentication
      // passwords, which can be undefined depending on the authentication
      // plugin being used

      this.password2 = connection.config.password2;
      this.password3 = connection.config.password3;
      this.passwordSha1 = connection.config.passwordSha1;
      this.database = connection.config.database;
      this.autPluginName = this.handshake.autPluginName;
      var handshakeResponse = new Packets.HandshakeResponse({
        flags: this.clientFlags,
        user: this.user,
        database: this.database,
        password: this.password,
        passwordSha1: this.passwordSha1,
        charsetNumber: connection.config.charsetNumber,
        authPluginData1: this.handshake.authPluginData1,
        authPluginData2: this.handshake.authPluginData2,
        compress: connection.config.compress,
        connectAttributes: connection.config.connectAttributes
      });
      connection.writePacket(handshakeResponse.toPacket());
    }
  }, {
    key: "calculateNativePasswordAuthToken",
    value: function calculateNativePasswordAuthToken(authPluginData) {
      // TODO: dont split into authPluginData1 and authPluginData2, instead join when 1 & 2 received
      var authPluginData1 = authPluginData.slice(0, 8);
      var authPluginData2 = authPluginData.slice(8, 20);
      var authToken;

      if (this.passwordSha1) {
        authToken = auth41.calculateTokenFromPasswordSha(this.passwordSha1, authPluginData1, authPluginData2);
      } else {
        authToken = auth41.calculateToken(this.password, authPluginData1, authPluginData2);
      }

      return authToken;
    }
  }, {
    key: "handshakeInit",
    value: function handshakeInit(helloPacket, connection) {
      var _this2 = this;

      this.on('error', function (e) {
        connection._fatalError = e;
        connection._protocolError = e;
      });
      this.handshake = Packets.Handshake.fromPacket(helloPacket);

      if (connection.config.debug) {
        // eslint-disable-next-line
        console.log('Server hello packet: capability flags:%d=(%s)', this.handshake.capabilityFlags, flagNames(this.handshake.capabilityFlags).join(', '));
      }

      connection.serverCapabilityFlags = this.handshake.capabilityFlags;
      connection.serverEncoding = CharsetToEncoding[this.handshake.characterSet];
      connection.connectionId = this.handshake.connectionId;
      var serverSSLSupport = this.handshake.capabilityFlags & ClientConstants.SSL; // multi factor authentication is enabled with the
      // "MULTI_FACTOR_AUTHENTICATION" capability and should only be used if it
      // is supported by the server

      var multiFactorAuthentication = this.handshake.capabilityFlags & ClientConstants.MULTI_FACTOR_AUTHENTICATION;
      this.clientFlags = this.clientFlags | multiFactorAuthentication; // use compression only if requested by client and supported by server

      connection.config.compress = connection.config.compress && this.handshake.capabilityFlags & ClientConstants.COMPRESS;
      this.clientFlags = this.clientFlags | connection.config.compress;

      if (connection.config.ssl) {
        // client requires SSL but server does not support it
        if (!serverSSLSupport) {
          var err = new Error('Server does not support secure connection');
          err.code = 'HANDSHAKE_NO_SSL_SUPPORT';
          err.fatal = true;
          this.emit('error', err);
          return false;
        } // send ssl upgrade request and immediately upgrade connection to secure


        this.clientFlags |= ClientConstants.SSL;
        this.sendSSLRequest(connection);
        connection.startTLS(function (err) {
          // after connection is secure
          if (err) {
            // SSL negotiation error are fatal
            err.code = 'HANDSHAKE_SSL_ERROR';
            err.fatal = true;

            _this2.emit('error', err);

            return;
          } // rest of communication is encrypted


          _this2.sendCredentials(connection);
        });
      } else {
        this.sendCredentials(connection);
      }

      if (multiFactorAuthentication) {
        // if the server supports multi-factor authentication, we enable it in
        // the client
        this.authenticationFactor = 1;
      }

      return ClientHandshake.prototype.handshakeResult;
    }
  }, {
    key: "handshakeResult",
    value: function handshakeResult(packet, connection) {
      var marker = packet.peekByte(); // packet can be OK_Packet, ERR_Packet, AuthSwitchRequest, AuthNextFactor
      // or AuthMoreData

      if (marker === 0xfe || marker === 1 || marker === 0x02) {
        var authSwitch = require('./auth_switch');

        try {
          if (marker === 1) {
            authSwitch.authSwitchRequestMoreData(packet, connection, this);
          } else {
            // if authenticationFactor === 0, it means the server does not support
            // the multi-factor authentication capability
            if (this.authenticationFactor !== 0) {
              // if we are past the first authentication factor, we should use the
              // corresponding password (if there is one)
              connection.config.password = this["password".concat(this.authenticationFactor)]; // update the current authentication factor

              this.authenticationFactor += 1;
            } // if marker === 0x02, it means it is an AuthNextFactor packet,
            // which is similar in structure to an AuthSwitchRequest packet,
            // so, we can use it directly


            authSwitch.authSwitchRequest(packet, connection, this);
          }

          return ClientHandshake.prototype.handshakeResult;
        } catch (err) {
          // Authentication errors are fatal
          err.code = 'AUTH_SWITCH_PLUGIN_ERROR';
          err.fatal = true;

          if (this.onResult) {
            this.onResult(err);
          } else {
            this.emit('error', err);
          }

          return null;
        }
      }

      if (marker !== 0) {
        var err = new Error('Unexpected packet during handshake phase'); // Unknown handshake errors are fatal

        err.code = 'HANDSHAKE_UNKNOWN_ERROR';
        err.fatal = true;

        if (this.onResult) {
          this.onResult(err);
        } else {
          this.emit('error', err);
        }

        return null;
      } // this should be called from ClientHandshake command only
      // and skipped when called from ChangeUser command


      if (!connection.authorized) {
        connection.authorized = true;

        if (connection.config.compress) {
          var enableCompression = require('../compressed_protocol.js').enableCompression;

          enableCompression(connection);
        }
      }

      if (this.onResult) {
        this.onResult(null);
      }

      return null;
    }
  }]);

  return ClientHandshake;
}(Command);

module.exports = ClientHandshake;
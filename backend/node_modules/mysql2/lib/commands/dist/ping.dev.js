'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Command = require('./command');

var CommandCode = require('../constants/commands');

var Packet = require('../packets/packet'); // TODO: time statistics?
// usefull for queue size and network latency monitoring
// store created,sent,reply timestamps


var Ping =
/*#__PURE__*/
function (_Command) {
  _inherits(Ping, _Command);

  function Ping(callback) {
    var _this;

    _classCallCheck(this, Ping);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Ping).call(this));
    _this.onResult = callback;
    return _this;
  }

  _createClass(Ping, [{
    key: "start",
    value: function start(packet, connection) {
      var ping = new Packet(0, Buffer.from([1, 0, 0, 0, CommandCode.PING]), 0, 5);
      connection.writePacket(ping);
      return Ping.prototype.pingResponse;
    }
  }, {
    key: "pingResponse",
    value: function pingResponse() {
      // TODO: check it's OK packet. error check already done in caller
      if (this.onResult) {
        process.nextTick(this.onResult.bind(this));
      }

      return null;
    }
  }]);

  return Ping;
}(Command);

module.exports = Ping;
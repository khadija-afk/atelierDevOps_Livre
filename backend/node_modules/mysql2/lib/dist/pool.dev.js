'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var process = require('process');

var mysql = require('../index.js');

var EventEmitter = require('events').EventEmitter;

var PoolConnection = require('./pool_connection.js');

var Queue = require('denque');

var Connection = require('./connection.js');

function spliceConnection(queue, connection) {
  var len = queue.length;

  for (var i = 0; i < len; i++) {
    if (queue.get(i) === connection) {
      queue.removeOne(i);
      break;
    }
  }
}

var Pool =
/*#__PURE__*/
function (_EventEmitter) {
  _inherits(Pool, _EventEmitter);

  function Pool(options) {
    var _this;

    _classCallCheck(this, Pool);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Pool).call(this));
    _this.config = options.config;
    _this.config.connectionConfig.pool = _assertThisInitialized(_this);
    _this._allConnections = new Queue();
    _this._freeConnections = new Queue();
    _this._connectionQueue = new Queue();
    _this._closed = false;

    if (_this.config.maxIdle < _this.config.connectionLimit) {
      // create idle connection timeout automatically release job
      _this._removeIdleTimeoutConnections();
    }

    return _this;
  }

  _createClass(Pool, [{
    key: "promise",
    value: function promise(promiseImpl) {
      var PromisePool = require('../promise').PromisePool;

      return new PromisePool(this, promiseImpl);
    }
  }, {
    key: "getConnection",
    value: function getConnection(cb) {
      var _this2 = this;

      if (this._closed) {
        return process.nextTick(function () {
          return cb(new Error('Pool is closed.'));
        });
      }

      var connection;

      if (this._freeConnections.length > 0) {
        connection = this._freeConnections.pop();
        this.emit('acquire', connection);
        return process.nextTick(function () {
          return cb(null, connection);
        });
      }

      if (this.config.connectionLimit === 0 || this._allConnections.length < this.config.connectionLimit) {
        connection = new PoolConnection(this, {
          config: this.config.connectionConfig
        });

        this._allConnections.push(connection);

        return connection.connect(function (err) {
          if (_this2._closed) {
            return cb(new Error('Pool is closed.'));
          }

          if (err) {
            return cb(err);
          }

          _this2.emit('connection', connection);

          _this2.emit('acquire', connection);

          return cb(null, connection);
        });
      }

      if (!this.config.waitForConnections) {
        return process.nextTick(function () {
          return cb(new Error('No connections available.'));
        });
      }

      if (this.config.queueLimit && this._connectionQueue.length >= this.config.queueLimit) {
        return cb(new Error('Queue limit reached.'));
      }

      this.emit('enqueue');
      return this._connectionQueue.push(cb);
    }
  }, {
    key: "releaseConnection",
    value: function releaseConnection(connection) {
      var cb;

      if (!connection._pool) {
        // The connection has been removed from the pool and is no longer good.
        if (this._connectionQueue.length) {
          cb = this._connectionQueue.shift();
          process.nextTick(this.getConnection.bind(this, cb));
        }
      } else if (this._connectionQueue.length) {
        cb = this._connectionQueue.shift();
        process.nextTick(cb.bind(null, null, connection));
      } else {
        this._freeConnections.push(connection);

        this.emit('release', connection);
      }
    }
  }, {
    key: "end",
    value: function end(cb) {
      this._closed = true;
      clearTimeout(this._removeIdleTimeoutConnectionsTimer);

      if (typeof cb !== 'function') {
        cb = function cb(err) {
          if (err) {
            throw err;
          }
        };
      }

      var calledBack = false;
      var closedConnections = 0;
      var connection;

      var endCB = function (err) {
        if (calledBack) {
          return;
        }

        if (err || ++closedConnections >= this._allConnections.length) {
          calledBack = true;
          cb(err);
          return;
        }
      }.bind(this);

      if (this._allConnections.length === 0) {
        endCB();
        return;
      }

      for (var i = 0; i < this._allConnections.length; i++) {
        connection = this._allConnections.get(i);

        connection._realEnd(endCB);
      }
    }
  }, {
    key: "query",
    value: function query(sql, values, cb) {
      var cmdQuery = Connection.createQuery(sql, values, cb, this.config.connectionConfig);

      if (typeof cmdQuery.namedPlaceholders === 'undefined') {
        cmdQuery.namedPlaceholders = this.config.connectionConfig.namedPlaceholders;
      }

      this.getConnection(function (err, conn) {
        if (err) {
          if (typeof cmdQuery.onResult === 'function') {
            cmdQuery.onResult(err);
          } else {
            cmdQuery.emit('error', err);
          }

          return;
        }

        try {
          conn.query(cmdQuery).once('end', function () {
            conn.release();
          });
        } catch (e) {
          conn.release();
          throw e;
        }
      });
      return cmdQuery;
    }
  }, {
    key: "execute",
    value: function execute(sql, values, cb) {
      // TODO construct execute command first here and pass it to connection.execute
      // so that polymorphic arguments logic is there in one place
      if (typeof values === 'function') {
        cb = values;
        values = [];
      }

      this.getConnection(function (err, conn) {
        if (err) {
          return cb(err);
        }

        try {
          conn.execute(sql, values, cb).once('end', function () {
            conn.release();
          });
        } catch (e) {
          conn.release();
          return cb(e);
        }
      });
    }
  }, {
    key: "_removeConnection",
    value: function _removeConnection(connection) {
      // Remove connection from all connections
      spliceConnection(this._allConnections, connection); // Remove connection from free connections

      spliceConnection(this._freeConnections, connection);
      this.releaseConnection(connection);
    }
  }, {
    key: "_removeIdleTimeoutConnections",
    value: function _removeIdleTimeoutConnections() {
      var _this3 = this;

      if (this._removeIdleTimeoutConnectionsTimer) {
        clearTimeout(this._removeIdleTimeoutConnectionsTimer);
      }

      this._removeIdleTimeoutConnectionsTimer = setTimeout(function () {
        try {
          while (_this3._freeConnections.length > _this3.config.maxIdle && Date.now() - _this3._freeConnections.get(0).lastActiveTime > _this3.config.idleTimeout) {
            _this3._freeConnections.get(0).destroy();
          }
        } finally {
          _this3._removeIdleTimeoutConnections();
        }
      }, 1000);
    }
  }, {
    key: "format",
    value: function format(sql, values) {
      return mysql.format(sql, values, this.config.connectionConfig.stringifyObjects, this.config.connectionConfig.timezone);
    }
  }, {
    key: "escape",
    value: function escape(value) {
      return mysql.escape(value, this.config.connectionConfig.stringifyObjects, this.config.connectionConfig.timezone);
    }
  }, {
    key: "escapeId",
    value: function escapeId(value) {
      return mysql.escapeId(value, false);
    }
  }]);

  return Pool;
}(EventEmitter);

module.exports = Pool;
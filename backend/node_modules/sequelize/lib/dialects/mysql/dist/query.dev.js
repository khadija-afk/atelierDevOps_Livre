"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;

var __defNormalProp = function __defNormalProp(obj, key, value) {
  return key in obj ? __defProp(obj, key, {
    enumerable: true,
    configurable: true,
    writable: true,
    value: value
  }) : obj[key] = value;
};

var __spreadValues = function __spreadValues(a, b) {
  for (var prop in b || (b = {})) {
    if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);
  }

  if (__getOwnPropSymbols) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = __getOwnPropSymbols(b)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var prop = _step.value;
        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }

  return a;
};

var AbstractQuery = require("../abstract/query");

var sequelizeErrors = require("../../errors");

var _ = require("lodash");

var _require = require("../../utils/logger"),
    logger = _require.logger;

var ER_DUP_ENTRY = 1062;
var ER_DEADLOCK = 1213;
var ER_ROW_IS_REFERENCED = 1451;
var ER_NO_REFERENCED_ROW = 1452;
var debug = logger.debugContext("sql:mysql");

var Query =
/*#__PURE__*/
function (_AbstractQuery) {
  _inherits(Query, _AbstractQuery);

  function Query(connection, sequelize, options) {
    _classCallCheck(this, Query);

    return _possibleConstructorReturn(this, _getPrototypeOf(Query).call(this, connection, sequelize, __spreadValues({
      showWarnings: false
    }, options)));
  }

  _createClass(Query, [{
    key: "run",
    value: function run(sql, parameters) {
      var connection, options, showWarnings, complete, results, errForStack;
      return regeneratorRuntime.async(function run$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.sql = sql;
              connection = this.connection, options = this.options;
              showWarnings = this.sequelize.options.showWarnings || options.showWarnings;
              complete = this._logQuery(sql, debug, parameters);

              if (parameters) {
                debug("parameters(%j)", parameters);
              }

              errForStack = new Error();
              _context.prev = 6;

              if (!(parameters && parameters.length)) {
                _context.next = 13;
                break;
              }

              _context.next = 10;
              return regeneratorRuntime.awrap(new Promise(function (resolve, reject) {
                connection.execute(sql, parameters, function (error, result) {
                  return error ? reject(error) : resolve(result);
                }).setMaxListeners(100);
              }));

            case 10:
              results = _context.sent;
              _context.next = 16;
              break;

            case 13:
              _context.next = 15;
              return regeneratorRuntime.awrap(new Promise(function (resolve, reject) {
                connection.query({
                  sql: sql
                }, function (error, result) {
                  return error ? reject(error) : resolve(result);
                }).setMaxListeners(100);
              }));

            case 15:
              results = _context.sent;

            case 16:
              _context.next = 32;
              break;

            case 18:
              _context.prev = 18;
              _context.t0 = _context["catch"](6);

              if (!(options.transaction && _context.t0.errno === ER_DEADLOCK)) {
                _context.next = 29;
                break;
              }

              _context.prev = 21;
              _context.next = 24;
              return regeneratorRuntime.awrap(options.transaction.rollback());

            case 24:
              _context.next = 28;
              break;

            case 26:
              _context.prev = 26;
              _context.t1 = _context["catch"](21);

            case 28:
              options.transaction.finished = "rollback";

            case 29:
              _context.t0.sql = sql;
              _context.t0.parameters = parameters;
              throw this.formatError(_context.t0, errForStack.stack);

            case 32:
              _context.prev = 32;
              complete();
              return _context.finish(32);

            case 35:
              if (!(showWarnings && results && results.warningStatus > 0)) {
                _context.next = 38;
                break;
              }

              _context.next = 38;
              return regeneratorRuntime.awrap(this.logWarnings(results));

            case 38:
              return _context.abrupt("return", this.formatResults(results));

            case 39:
            case "end":
              return _context.stop();
          }
        }
      }, null, this, [[6, 18, 32, 35], [21, 26]]);
    }
  }, {
    key: "formatResults",
    value: function formatResults(data) {
      var result = this.instance;

      if (this.isInsertQuery(data)) {
        this.handleInsertQuery(data);

        if (!this.instance) {
          if (data.constructor.name === "ResultSetHeader" && this.model && this.model.autoIncrementAttribute && this.model.autoIncrementAttribute === this.model.primaryKeyAttribute && this.model.rawAttributes[this.model.primaryKeyAttribute]) {
            var startId = data[this.getInsertIdField()];
            result = [];

            for (var i = startId; i < startId + data.affectedRows; i++) {
              result.push(_defineProperty({}, this.model.rawAttributes[this.model.primaryKeyAttribute].field, i));
            }
          } else {
            result = data[this.getInsertIdField()];
          }
        }
      }

      if (this.isSelectQuery()) {
        return this.handleSelectQuery(data);
      }

      if (this.isShowTablesQuery()) {
        return this.handleShowTablesQuery(data);
      }

      if (this.isDescribeQuery()) {
        result = {};
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = data[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var _result = _step2.value;
            var enumRegex = /^enum/i;
            result[_result.Field] = {
              type: enumRegex.test(_result.Type) ? _result.Type.replace(enumRegex, "ENUM") : _result.Type.toUpperCase(),
              allowNull: _result.Null === "YES",
              defaultValue: _result.Default,
              primaryKey: _result.Key === "PRI",
              autoIncrement: Object.prototype.hasOwnProperty.call(_result, "Extra") && _result.Extra.toLowerCase() === "auto_increment",
              comment: _result.Comment ? _result.Comment : null
            };
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
              _iterator2["return"]();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        return result;
      }

      if (this.isShowIndexesQuery()) {
        return this.handleShowIndexesQuery(data);
      }

      if (this.isCallQuery()) {
        return data[0];
      }

      if (this.isBulkUpdateQuery() || this.isBulkDeleteQuery()) {
        return data.affectedRows;
      }

      if (this.isVersionQuery()) {
        return data[0].version;
      }

      if (this.isForeignKeysQuery()) {
        return data;
      }

      if (this.isUpsertQuery()) {
        return [result, data.affectedRows === 1];
      }

      if (this.isInsertQuery() || this.isUpdateQuery()) {
        return [result, data.affectedRows];
      }

      if (this.isShowConstraintsQuery()) {
        return data;
      }

      if (this.isRawQuery()) {
        return [data, data];
      }

      return result;
    }
  }, {
    key: "logWarnings",
    value: function logWarnings(results) {
      var warningResults, warningMessage, messages, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, _warningRow, _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, _warningResult, _iteratorNormalCompletion5, _didIteratorError5, _iteratorError5, _iterator5, _step5, _objectKey;

      return regeneratorRuntime.async(function logWarnings$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return regeneratorRuntime.awrap(this.run("SHOW WARNINGS"));

            case 2:
              warningResults = _context2.sent;
              warningMessage = "MySQL Warnings (".concat(this.connection.uuid || "default", "): ");
              messages = [];
              _iteratorNormalCompletion3 = true;
              _didIteratorError3 = false;
              _iteratorError3 = undefined;
              _context2.prev = 8;
              _iterator3 = warningResults[Symbol.iterator]();

            case 10:
              if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {
                _context2.next = 64;
                break;
              }

              _warningRow = _step3.value;

              if (!(_warningRow === void 0 || typeof _warningRow[Symbol.iterator] !== "function")) {
                _context2.next = 14;
                break;
              }

              return _context2.abrupt("continue", 61);

            case 14:
              _iteratorNormalCompletion4 = true;
              _didIteratorError4 = false;
              _iteratorError4 = undefined;
              _context2.prev = 17;
              _iterator4 = _warningRow[Symbol.iterator]();

            case 19:
              if (_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done) {
                _context2.next = 47;
                break;
              }

              _warningResult = _step4.value;

              if (!Object.prototype.hasOwnProperty.call(_warningResult, "Message")) {
                _context2.next = 25;
                break;
              }

              messages.push(_warningResult.Message);
              _context2.next = 44;
              break;

            case 25:
              _iteratorNormalCompletion5 = true;
              _didIteratorError5 = false;
              _iteratorError5 = undefined;
              _context2.prev = 28;

              for (_iterator5 = _warningResult.keys()[Symbol.iterator](); !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                _objectKey = _step5.value;
                messages.push([_objectKey, _warningResult[_objectKey]].join(": "));
              }

              _context2.next = 36;
              break;

            case 32:
              _context2.prev = 32;
              _context2.t0 = _context2["catch"](28);
              _didIteratorError5 = true;
              _iteratorError5 = _context2.t0;

            case 36:
              _context2.prev = 36;
              _context2.prev = 37;

              if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
                _iterator5["return"]();
              }

            case 39:
              _context2.prev = 39;

              if (!_didIteratorError5) {
                _context2.next = 42;
                break;
              }

              throw _iteratorError5;

            case 42:
              return _context2.finish(39);

            case 43:
              return _context2.finish(36);

            case 44:
              _iteratorNormalCompletion4 = true;
              _context2.next = 19;
              break;

            case 47:
              _context2.next = 53;
              break;

            case 49:
              _context2.prev = 49;
              _context2.t1 = _context2["catch"](17);
              _didIteratorError4 = true;
              _iteratorError4 = _context2.t1;

            case 53:
              _context2.prev = 53;
              _context2.prev = 54;

              if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
                _iterator4["return"]();
              }

            case 56:
              _context2.prev = 56;

              if (!_didIteratorError4) {
                _context2.next = 59;
                break;
              }

              throw _iteratorError4;

            case 59:
              return _context2.finish(56);

            case 60:
              return _context2.finish(53);

            case 61:
              _iteratorNormalCompletion3 = true;
              _context2.next = 10;
              break;

            case 64:
              _context2.next = 70;
              break;

            case 66:
              _context2.prev = 66;
              _context2.t2 = _context2["catch"](8);
              _didIteratorError3 = true;
              _iteratorError3 = _context2.t2;

            case 70:
              _context2.prev = 70;
              _context2.prev = 71;

              if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                _iterator3["return"]();
              }

            case 73:
              _context2.prev = 73;

              if (!_didIteratorError3) {
                _context2.next = 76;
                break;
              }

              throw _iteratorError3;

            case 76:
              return _context2.finish(73);

            case 77:
              return _context2.finish(70);

            case 78:
              this.sequelize.log(warningMessage + messages.join("; "), this.options);
              return _context2.abrupt("return", results);

            case 80:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this, [[8, 66, 70, 78], [17, 49, 53, 61], [28, 32, 36, 44], [37,, 39, 43], [54,, 56, 60], [71,, 73, 77]]);
    }
  }, {
    key: "formatError",
    value: function formatError(err, errStack) {
      var _this = this;

      var errCode = err.errno || err.code;

      switch (errCode) {
        case ER_DUP_ENTRY:
          {
            var match = err.message.match(/Duplicate entry '([\s\S]*)' for key '?((.|\s)*?)'?$/);
            var fields = {};
            var message = "Validation error";
            var values = match ? match[1].split("-") : void 0;
            var fieldKey = match ? match[2].split(".").pop() : void 0;
            var fieldVal = match ? match[1] : void 0;
            var uniqueKey = this.model && this.model.uniqueKeys[fieldKey];

            if (uniqueKey) {
              if (uniqueKey.msg) message = uniqueKey.msg;
              fields = _.zipObject(uniqueKey.fields, values);
            } else {
              fields[fieldKey] = fieldVal;
            }

            var errors = [];

            _.forOwn(fields, function (value, field) {
              errors.push(new sequelizeErrors.ValidationErrorItem(_this.getUniqueConstraintErrorMessage(field), "unique violation", field, value, _this.instance, "not_unique"));
            });

            return new sequelizeErrors.UniqueConstraintError({
              message: message,
              errors: errors,
              parent: err,
              fields: fields,
              stack: errStack
            });
          }

        case ER_ROW_IS_REFERENCED:
        case ER_NO_REFERENCED_ROW:
          {
            var _match = err.message.match(/CONSTRAINT ([`"])(.*)\1 FOREIGN KEY \(\1(.*)\1\) REFERENCES \1(.*)\1 \(\1(.*)\1\)/);

            var quoteChar = _match ? _match[1] : "`";

            var _fields = _match ? _match[3].split(new RegExp("".concat(quoteChar, ", *").concat(quoteChar))) : void 0;

            return new sequelizeErrors.ForeignKeyConstraintError({
              reltype: String(errCode) === String(ER_ROW_IS_REFERENCED) ? "parent" : "child",
              table: _match ? _match[4] : void 0,
              fields: _fields,
              value: _fields && _fields.length && this.instance && this.instance[_fields[0]] || void 0,
              index: _match ? _match[2] : void 0,
              parent: err,
              stack: errStack
            });
          }

        default:
          return new sequelizeErrors.DatabaseError(err, {
            stack: errStack
          });
      }
    }
  }, {
    key: "handleShowIndexesQuery",
    value: function handleShowIndexesQuery(data) {
      data = data.reduce(function (acc, item) {
        if (!(item.Key_name in acc)) {
          acc[item.Key_name] = item;
          item.fields = [];
        }

        acc[item.Key_name].fields[item.Seq_in_index - 1] = {
          attribute: item.Column_name,
          length: item.Sub_part || void 0,
          order: item.Collation === "A" ? "ASC" : void 0
        };
        delete item.column_name;
        return acc;
      }, {});
      return _.map(data, function (item) {
        return {
          primary: item.Key_name === "PRIMARY",
          fields: item.fields,
          name: item.Key_name,
          tableName: item.Table,
          unique: item.Non_unique !== 1,
          type: item.Index_type
        };
      });
    }
  }], [{
    key: "formatBindParameters",
    value: function formatBindParameters(sql, values, dialect) {
      var bindParam = [];

      var replacementFunc = function replacementFunc(match, key, values_) {
        if (values_[key] !== void 0) {
          bindParam.push(values_[key]);
          return "?";
        }

        return void 0;
      };

      sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];
      return [sql, bindParam.length > 0 ? bindParam : void 0];
    }
  }]);

  return Query;
}(AbstractQuery);

module.exports = Query;
module.exports.Query = Query;
module.exports["default"] = Query;
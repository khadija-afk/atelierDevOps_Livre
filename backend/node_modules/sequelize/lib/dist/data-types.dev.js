"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var util = require("util");

var _ = require("lodash");

var wkx = require("wkx");

var sequelizeErrors = require("./errors");

var Validator = require("./utils/validator-extras").validator;

var momentTz = require("moment-timezone");

var moment = require("moment");

var _require = require("./utils/logger"),
    logger = _require.logger;

var warnings = {};

var _require2 = require("./utils/class-to-invokable"),
    classToInvokable = _require2.classToInvokable;

var _require3 = require("./utils/join-sql-fragments"),
    joinSQLFragments = _require3.joinSQLFragments;

var ABSTRACT =
/*#__PURE__*/
function () {
  function ABSTRACT() {
    _classCallCheck(this, ABSTRACT);
  }

  _createClass(ABSTRACT, [{
    key: "toString",
    value: function toString(options) {
      return this.toSql(options);
    }
  }, {
    key: "toSql",
    value: function toSql() {
      return this.key;
    }
  }, {
    key: "stringify",
    value: function stringify(value, options) {
      if (this._stringify) {
        return this._stringify(value, options);
      }

      return value;
    }
  }, {
    key: "bindParam",
    value: function bindParam(value, options) {
      if (this._bindParam) {
        return this._bindParam(value, options);
      }

      return options.bindParam(this.stringify(value, options));
    }
  }], [{
    key: "toString",
    value: function toString() {
      return this.name;
    }
  }, {
    key: "warn",
    value: function warn(link, text) {
      if (!warnings[text]) {
        warnings[text] = true;
        logger.warn("".concat(text, " \n>> Check: ").concat(link));
      }
    }
  }, {
    key: "extend",
    value: function extend(oldType) {
      return new this(oldType.options);
    }
  }]);

  return ABSTRACT;
}();

ABSTRACT.prototype.dialectTypes = "";

var STRING =
/*#__PURE__*/
function (_ABSTRACT) {
  _inherits(STRING, _ABSTRACT);

  function STRING(length, binary) {
    var _this;

    _classCallCheck(this, STRING);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(STRING).call(this));
    var options = _typeof(length) === "object" && length || {
      length: length,
      binary: binary
    };
    _this.options = options;
    _this._binary = options.binary;
    _this._length = options.length || 255;
    return _this;
  }

  _createClass(STRING, [{
    key: "toSql",
    value: function toSql() {
      return joinSQLFragments(["VARCHAR(".concat(this._length, ")"), this._binary && "BINARY"]);
    }
  }, {
    key: "validate",
    value: function validate(value) {
      if (Object.prototype.toString.call(value) !== "[object String]") {
        if (this.options.binary && Buffer.isBuffer(value) || typeof value === "number") {
          return true;
        }

        throw new sequelizeErrors.ValidationError(util.format("%j is not a valid string", value));
      }

      return true;
    }
  }, {
    key: "BINARY",
    get: function get() {
      this._binary = true;
      this.options.binary = true;
      return this;
    }
  }], [{
    key: "BINARY",
    get: function get() {
      return new this().BINARY;
    }
  }]);

  return STRING;
}(ABSTRACT);

var CHAR =
/*#__PURE__*/
function (_STRING) {
  _inherits(CHAR, _STRING);

  function CHAR(length, binary) {
    _classCallCheck(this, CHAR);

    return _possibleConstructorReturn(this, _getPrototypeOf(CHAR).call(this, _typeof(length) === "object" && length || {
      length: length,
      binary: binary
    }));
  }

  _createClass(CHAR, [{
    key: "toSql",
    value: function toSql() {
      return joinSQLFragments(["CHAR(".concat(this._length, ")"), this._binary && "BINARY"]);
    }
  }]);

  return CHAR;
}(STRING);

var TEXT =
/*#__PURE__*/
function (_ABSTRACT2) {
  _inherits(TEXT, _ABSTRACT2);

  function TEXT(length) {
    var _this2;

    _classCallCheck(this, TEXT);

    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(TEXT).call(this));
    var options = _typeof(length) === "object" && length || {
      length: length
    };
    _this2.options = options;
    _this2._length = options.length || "";
    return _this2;
  }

  _createClass(TEXT, [{
    key: "toSql",
    value: function toSql() {
      switch (this._length.toLowerCase()) {
        case "tiny":
          return "TINYTEXT";

        case "medium":
          return "MEDIUMTEXT";

        case "long":
          return "LONGTEXT";

        default:
          return this.key;
      }
    }
  }, {
    key: "validate",
    value: function validate(value) {
      if (typeof value !== "string") {
        throw new sequelizeErrors.ValidationError(util.format("%j is not a valid string", value));
      }

      return true;
    }
  }]);

  return TEXT;
}(ABSTRACT);

var CITEXT =
/*#__PURE__*/
function (_ABSTRACT3) {
  _inherits(CITEXT, _ABSTRACT3);

  function CITEXT() {
    _classCallCheck(this, CITEXT);

    return _possibleConstructorReturn(this, _getPrototypeOf(CITEXT).apply(this, arguments));
  }

  _createClass(CITEXT, [{
    key: "toSql",
    value: function toSql() {
      return "CITEXT";
    }
  }, {
    key: "validate",
    value: function validate(value) {
      if (typeof value !== "string") {
        throw new sequelizeErrors.ValidationError(util.format("%j is not a valid string", value));
      }

      return true;
    }
  }]);

  return CITEXT;
}(ABSTRACT);

var NUMBER =
/*#__PURE__*/
function (_ABSTRACT4) {
  _inherits(NUMBER, _ABSTRACT4);

  function NUMBER() {
    var _this3;

    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, NUMBER);

    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(NUMBER).call(this));

    if (typeof options === "number") {
      options = {
        length: options
      };
    }

    _this3.options = options;
    _this3._length = options.length;
    _this3._zerofill = options.zerofill;
    _this3._decimals = options.decimals;
    _this3._precision = options.precision;
    _this3._scale = options.scale;
    _this3._unsigned = options.unsigned;
    return _this3;
  }

  _createClass(NUMBER, [{
    key: "toSql",
    value: function toSql() {
      var result = this.key;

      if (this._length) {
        result += "(".concat(this._length);

        if (typeof this._decimals === "number") {
          result += ",".concat(this._decimals);
        }

        result += ")";
      }

      if (this._unsigned) {
        result += " UNSIGNED";
      }

      if (this._zerofill) {
        result += " ZEROFILL";
      }

      return result;
    }
  }, {
    key: "validate",
    value: function validate(value) {
      if (!Validator.isFloat(String(value))) {
        throw new sequelizeErrors.ValidationError(util.format("%j is not a valid ".concat(this.key.toLowerCase()), value));
      }

      return true;
    }
  }, {
    key: "_stringify",
    value: function _stringify(number) {
      if (typeof number === "number" || typeof number === "bigint" || typeof number === "boolean" || number === null || number === void 0) {
        return number;
      }

      if (typeof number.toString === "function") {
        return number.toString();
      }

      return number;
    }
  }, {
    key: "UNSIGNED",
    get: function get() {
      this._unsigned = true;
      this.options.unsigned = true;
      return this;
    }
  }, {
    key: "ZEROFILL",
    get: function get() {
      this._zerofill = true;
      this.options.zerofill = true;
      return this;
    }
  }], [{
    key: "UNSIGNED",
    get: function get() {
      return new this().UNSIGNED;
    }
  }, {
    key: "ZEROFILL",
    get: function get() {
      return new this().ZEROFILL;
    }
  }]);

  return NUMBER;
}(ABSTRACT);

var INTEGER =
/*#__PURE__*/
function (_NUMBER) {
  _inherits(INTEGER, _NUMBER);

  function INTEGER() {
    _classCallCheck(this, INTEGER);

    return _possibleConstructorReturn(this, _getPrototypeOf(INTEGER).apply(this, arguments));
  }

  _createClass(INTEGER, [{
    key: "validate",
    value: function validate(value) {
      if (!Validator.isInt(String(value))) {
        throw new sequelizeErrors.ValidationError(util.format("%j is not a valid ".concat(this.key.toLowerCase()), value));
      }

      return true;
    }
  }]);

  return INTEGER;
}(NUMBER);

var TINYINT =
/*#__PURE__*/
function (_INTEGER) {
  _inherits(TINYINT, _INTEGER);

  function TINYINT() {
    _classCallCheck(this, TINYINT);

    return _possibleConstructorReturn(this, _getPrototypeOf(TINYINT).apply(this, arguments));
  }

  return TINYINT;
}(INTEGER);

var SMALLINT =
/*#__PURE__*/
function (_INTEGER2) {
  _inherits(SMALLINT, _INTEGER2);

  function SMALLINT() {
    _classCallCheck(this, SMALLINT);

    return _possibleConstructorReturn(this, _getPrototypeOf(SMALLINT).apply(this, arguments));
  }

  return SMALLINT;
}(INTEGER);

var MEDIUMINT =
/*#__PURE__*/
function (_INTEGER3) {
  _inherits(MEDIUMINT, _INTEGER3);

  function MEDIUMINT() {
    _classCallCheck(this, MEDIUMINT);

    return _possibleConstructorReturn(this, _getPrototypeOf(MEDIUMINT).apply(this, arguments));
  }

  return MEDIUMINT;
}(INTEGER);

var BIGINT =
/*#__PURE__*/
function (_INTEGER4) {
  _inherits(BIGINT, _INTEGER4);

  function BIGINT() {
    _classCallCheck(this, BIGINT);

    return _possibleConstructorReturn(this, _getPrototypeOf(BIGINT).apply(this, arguments));
  }

  return BIGINT;
}(INTEGER);

var FLOAT =
/*#__PURE__*/
function (_NUMBER2) {
  _inherits(FLOAT, _NUMBER2);

  function FLOAT(length, decimals) {
    _classCallCheck(this, FLOAT);

    return _possibleConstructorReturn(this, _getPrototypeOf(FLOAT).call(this, _typeof(length) === "object" && length || {
      length: length,
      decimals: decimals
    }));
  }

  _createClass(FLOAT, [{
    key: "validate",
    value: function validate(value) {
      if (!Validator.isFloat(String(value))) {
        throw new sequelizeErrors.ValidationError(util.format("%j is not a valid float", value));
      }

      return true;
    }
  }]);

  return FLOAT;
}(NUMBER);

var REAL =
/*#__PURE__*/
function (_NUMBER3) {
  _inherits(REAL, _NUMBER3);

  function REAL(length, decimals) {
    _classCallCheck(this, REAL);

    return _possibleConstructorReturn(this, _getPrototypeOf(REAL).call(this, _typeof(length) === "object" && length || {
      length: length,
      decimals: decimals
    }));
  }

  return REAL;
}(NUMBER);

var DOUBLE =
/*#__PURE__*/
function (_NUMBER4) {
  _inherits(DOUBLE, _NUMBER4);

  function DOUBLE(length, decimals) {
    _classCallCheck(this, DOUBLE);

    return _possibleConstructorReturn(this, _getPrototypeOf(DOUBLE).call(this, _typeof(length) === "object" && length || {
      length: length,
      decimals: decimals
    }));
  }

  return DOUBLE;
}(NUMBER);

var DECIMAL =
/*#__PURE__*/
function (_NUMBER5) {
  _inherits(DECIMAL, _NUMBER5);

  function DECIMAL(precision, scale) {
    _classCallCheck(this, DECIMAL);

    return _possibleConstructorReturn(this, _getPrototypeOf(DECIMAL).call(this, _typeof(precision) === "object" && precision || {
      precision: precision,
      scale: scale
    }));
  }

  _createClass(DECIMAL, [{
    key: "toSql",
    value: function toSql() {
      if (this._precision || this._scale) {
        return "DECIMAL(".concat([this._precision, this._scale].filter(_.identity).join(","), ")");
      }

      return "DECIMAL";
    }
  }, {
    key: "validate",
    value: function validate(value) {
      if (!Validator.isDecimal(String(value))) {
        throw new sequelizeErrors.ValidationError(util.format("%j is not a valid decimal", value));
      }

      return true;
    }
  }]);

  return DECIMAL;
}(NUMBER);

var protoExtensions = {
  escape: false,
  _value: function _value(value) {
    if (isNaN(value)) {
      return "NaN";
    }

    if (!isFinite(value)) {
      var sign = value < 0 ? "-" : "";
      return "".concat(sign, "Infinity");
    }

    return value;
  },
  _stringify: function _stringify(value) {
    return "'".concat(this._value(value), "'");
  },
  _bindParam: function _bindParam(value, options) {
    return options.bindParam(this._value(value));
  }
};

for (var _i = 0, _arr = [FLOAT, DOUBLE, REAL]; _i < _arr.length; _i++) {
  var floating = _arr[_i];
  Object.assign(floating.prototype, protoExtensions);
}

var BOOLEAN =
/*#__PURE__*/
function (_ABSTRACT5) {
  _inherits(BOOLEAN, _ABSTRACT5);

  function BOOLEAN() {
    _classCallCheck(this, BOOLEAN);

    return _possibleConstructorReturn(this, _getPrototypeOf(BOOLEAN).apply(this, arguments));
  }

  _createClass(BOOLEAN, [{
    key: "toSql",
    value: function toSql() {
      return "TINYINT(1)";
    }
  }, {
    key: "validate",
    value: function validate(value) {
      if (!Validator.isBoolean(String(value))) {
        throw new sequelizeErrors.ValidationError(util.format("%j is not a valid boolean", value));
      }

      return true;
    }
  }, {
    key: "_sanitize",
    value: function _sanitize(value) {
      if (value !== null && value !== void 0) {
        if (Buffer.isBuffer(value) && value.length === 1) {
          value = value[0];
        }

        var type = _typeof(value);

        if (type === "string") {
          return value === "true" ? true : value === "false" ? false : value;
        }

        if (type === "number") {
          return value === 1 ? true : value === 0 ? false : value;
        }
      }

      return value;
    }
  }]);

  return BOOLEAN;
}(ABSTRACT);

BOOLEAN.parse = BOOLEAN.prototype._sanitize;

var TIME =
/*#__PURE__*/
function (_ABSTRACT6) {
  _inherits(TIME, _ABSTRACT6);

  function TIME() {
    _classCallCheck(this, TIME);

    return _possibleConstructorReturn(this, _getPrototypeOf(TIME).apply(this, arguments));
  }

  _createClass(TIME, [{
    key: "toSql",
    value: function toSql() {
      return "TIME";
    }
  }]);

  return TIME;
}(ABSTRACT);

var DATE =
/*#__PURE__*/
function (_ABSTRACT7) {
  _inherits(DATE, _ABSTRACT7);

  function DATE(length) {
    var _this4;

    _classCallCheck(this, DATE);

    _this4 = _possibleConstructorReturn(this, _getPrototypeOf(DATE).call(this));
    var options = _typeof(length) === "object" && length || {
      length: length
    };
    _this4.options = options;
    _this4._length = options.length || "";
    return _this4;
  }

  _createClass(DATE, [{
    key: "toSql",
    value: function toSql() {
      return "DATETIME";
    }
  }, {
    key: "validate",
    value: function validate(value) {
      if (!Validator.isDate(String(value))) {
        throw new sequelizeErrors.ValidationError(util.format("%j is not a valid date", value));
      }

      return true;
    }
  }, {
    key: "_sanitize",
    value: function _sanitize(value, options) {
      if ((!options || options && !options.raw) && !(value instanceof Date) && !!value) {
        return new Date(value);
      }

      return value;
    }
  }, {
    key: "_isChanged",
    value: function _isChanged(value, originalValue) {
      if (originalValue && !!value && (value === originalValue || value instanceof Date && originalValue instanceof Date && value.getTime() === originalValue.getTime())) {
        return false;
      }

      if (!originalValue && !value && originalValue === value) {
        return false;
      }

      return true;
    }
  }, {
    key: "_applyTimezone",
    value: function _applyTimezone(date, options) {
      if (options.timezone) {
        if (momentTz.tz.zone(options.timezone)) {
          return momentTz(date).tz(options.timezone);
        }

        return date = moment(date).utcOffset(options.timezone);
      }

      return momentTz(date);
    }
  }, {
    key: "_stringify",
    value: function _stringify(date, options) {
      if (!moment.isMoment(date)) {
        date = this._applyTimezone(date, options);
      }

      return date.format("YYYY-MM-DD HH:mm:ss.SSS Z");
    }
  }]);

  return DATE;
}(ABSTRACT);

var DATEONLY =
/*#__PURE__*/
function (_ABSTRACT8) {
  _inherits(DATEONLY, _ABSTRACT8);

  function DATEONLY() {
    _classCallCheck(this, DATEONLY);

    return _possibleConstructorReturn(this, _getPrototypeOf(DATEONLY).apply(this, arguments));
  }

  _createClass(DATEONLY, [{
    key: "toSql",
    value: function toSql() {
      return "DATE";
    }
  }, {
    key: "_stringify",
    value: function _stringify(date) {
      return moment(date).format("YYYY-MM-DD");
    }
  }, {
    key: "_sanitize",
    value: function _sanitize(value, options) {
      if ((!options || options && !options.raw) && !!value) {
        return moment(value).format("YYYY-MM-DD");
      }

      return value;
    }
  }, {
    key: "_isChanged",
    value: function _isChanged(value, originalValue) {
      if (originalValue && !!value && originalValue === value) {
        return false;
      }

      if (!originalValue && !value && originalValue === value) {
        return false;
      }

      return true;
    }
  }]);

  return DATEONLY;
}(ABSTRACT);

var HSTORE =
/*#__PURE__*/
function (_ABSTRACT9) {
  _inherits(HSTORE, _ABSTRACT9);

  function HSTORE() {
    _classCallCheck(this, HSTORE);

    return _possibleConstructorReturn(this, _getPrototypeOf(HSTORE).apply(this, arguments));
  }

  _createClass(HSTORE, [{
    key: "validate",
    value: function validate(value) {
      if (!_.isPlainObject(value)) {
        throw new sequelizeErrors.ValidationError(util.format("%j is not a valid hstore", value));
      }

      return true;
    }
  }]);

  return HSTORE;
}(ABSTRACT);

var JSONTYPE =
/*#__PURE__*/
function (_ABSTRACT10) {
  _inherits(JSONTYPE, _ABSTRACT10);

  function JSONTYPE() {
    _classCallCheck(this, JSONTYPE);

    return _possibleConstructorReturn(this, _getPrototypeOf(JSONTYPE).apply(this, arguments));
  }

  _createClass(JSONTYPE, [{
    key: "validate",
    value: function validate() {
      return true;
    }
  }, {
    key: "_stringify",
    value: function _stringify(value) {
      return JSON.stringify(value);
    }
  }]);

  return JSONTYPE;
}(ABSTRACT);

var JSONB =
/*#__PURE__*/
function (_JSONTYPE) {
  _inherits(JSONB, _JSONTYPE);

  function JSONB() {
    _classCallCheck(this, JSONB);

    return _possibleConstructorReturn(this, _getPrototypeOf(JSONB).apply(this, arguments));
  }

  return JSONB;
}(JSONTYPE);

var NOW =
/*#__PURE__*/
function (_ABSTRACT11) {
  _inherits(NOW, _ABSTRACT11);

  function NOW() {
    _classCallCheck(this, NOW);

    return _possibleConstructorReturn(this, _getPrototypeOf(NOW).apply(this, arguments));
  }

  return NOW;
}(ABSTRACT);

var BLOB =
/*#__PURE__*/
function (_ABSTRACT12) {
  _inherits(BLOB, _ABSTRACT12);

  function BLOB(length) {
    var _this5;

    _classCallCheck(this, BLOB);

    _this5 = _possibleConstructorReturn(this, _getPrototypeOf(BLOB).call(this));
    var options = _typeof(length) === "object" && length || {
      length: length
    };
    _this5.options = options;
    _this5._length = options.length || "";
    return _this5;
  }

  _createClass(BLOB, [{
    key: "toSql",
    value: function toSql() {
      switch (this._length.toLowerCase()) {
        case "tiny":
          return "TINYBLOB";

        case "medium":
          return "MEDIUMBLOB";

        case "long":
          return "LONGBLOB";

        default:
          return this.key;
      }
    }
  }, {
    key: "validate",
    value: function validate(value) {
      if (typeof value !== "string" && !Buffer.isBuffer(value)) {
        throw new sequelizeErrors.ValidationError(util.format("%j is not a valid blob", value));
      }

      return true;
    }
  }, {
    key: "_stringify",
    value: function _stringify(value) {
      if (!Buffer.isBuffer(value)) {
        if (Array.isArray(value)) {
          value = Buffer.from(value);
        } else {
          value = Buffer.from(value.toString());
        }
      }

      var hex = value.toString("hex");
      return this._hexify(hex);
    }
  }, {
    key: "_hexify",
    value: function _hexify(hex) {
      return "X'".concat(hex, "'");
    }
  }, {
    key: "_bindParam",
    value: function _bindParam(value, options) {
      if (!Buffer.isBuffer(value)) {
        if (Array.isArray(value)) {
          value = Buffer.from(value);
        } else {
          value = Buffer.from(value.toString());
        }
      }

      return options.bindParam(value);
    }
  }]);

  return BLOB;
}(ABSTRACT);

BLOB.prototype.escape = false;

var RANGE =
/*#__PURE__*/
function (_ABSTRACT13) {
  _inherits(RANGE, _ABSTRACT13);

  function RANGE(subtype) {
    var _this6;

    _classCallCheck(this, RANGE);

    _this6 = _possibleConstructorReturn(this, _getPrototypeOf(RANGE).call(this));
    var options = _.isPlainObject(subtype) ? subtype : {
      subtype: subtype
    };
    if (!options.subtype) options.subtype = new INTEGER();

    if (typeof options.subtype === "function") {
      options.subtype = new options.subtype();
    }

    _this6._subtype = options.subtype.key;
    _this6.options = options;
    return _this6;
  }

  _createClass(RANGE, [{
    key: "validate",
    value: function validate(value) {
      if (!Array.isArray(value)) {
        throw new sequelizeErrors.ValidationError(util.format("%j is not a valid range", value));
      }

      if (value.length !== 2) {
        throw new sequelizeErrors.ValidationError("A range must be an array with two elements");
      }

      return true;
    }
  }]);

  return RANGE;
}(ABSTRACT);

var UUID =
/*#__PURE__*/
function (_ABSTRACT14) {
  _inherits(UUID, _ABSTRACT14);

  function UUID() {
    _classCallCheck(this, UUID);

    return _possibleConstructorReturn(this, _getPrototypeOf(UUID).apply(this, arguments));
  }

  _createClass(UUID, [{
    key: "validate",
    value: function validate(value, options) {
      if (typeof value !== "string" || !Validator.isUUID(value) && (!options || !options.acceptStrings)) {
        throw new sequelizeErrors.ValidationError(util.format("%j is not a valid uuid", value));
      }

      return true;
    }
  }]);

  return UUID;
}(ABSTRACT);

var UUIDV1 =
/*#__PURE__*/
function (_ABSTRACT15) {
  _inherits(UUIDV1, _ABSTRACT15);

  function UUIDV1() {
    _classCallCheck(this, UUIDV1);

    return _possibleConstructorReturn(this, _getPrototypeOf(UUIDV1).apply(this, arguments));
  }

  _createClass(UUIDV1, [{
    key: "validate",
    value: function validate(value, options) {
      if (typeof value !== "string" || !Validator.isUUID(value) && (!options || !options.acceptStrings)) {
        throw new sequelizeErrors.ValidationError(util.format("%j is not a valid uuid", value));
      }

      return true;
    }
  }]);

  return UUIDV1;
}(ABSTRACT);

var UUIDV4 =
/*#__PURE__*/
function (_ABSTRACT16) {
  _inherits(UUIDV4, _ABSTRACT16);

  function UUIDV4() {
    _classCallCheck(this, UUIDV4);

    return _possibleConstructorReturn(this, _getPrototypeOf(UUIDV4).apply(this, arguments));
  }

  _createClass(UUIDV4, [{
    key: "validate",
    value: function validate(value, options) {
      if (typeof value !== "string" || !Validator.isUUID(value, 4) && (!options || !options.acceptStrings)) {
        throw new sequelizeErrors.ValidationError(util.format("%j is not a valid uuidv4", value));
      }

      return true;
    }
  }]);

  return UUIDV4;
}(ABSTRACT);

var VIRTUAL =
/*#__PURE__*/
function (_ABSTRACT17) {
  _inherits(VIRTUAL, _ABSTRACT17);

  function VIRTUAL(ReturnType, fields) {
    var _this7;

    _classCallCheck(this, VIRTUAL);

    _this7 = _possibleConstructorReturn(this, _getPrototypeOf(VIRTUAL).call(this));
    if (typeof ReturnType === "function") ReturnType = new ReturnType();
    _this7.returnType = ReturnType;
    _this7.fields = fields;
    return _this7;
  }

  return VIRTUAL;
}(ABSTRACT);

var ENUM =
/*#__PURE__*/
function (_ABSTRACT18) {
  _inherits(ENUM, _ABSTRACT18);

  function ENUM() {
    var _this8;

    _classCallCheck(this, ENUM);

    _this8 = _possibleConstructorReturn(this, _getPrototypeOf(ENUM).call(this));

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var value = args[0];
    var options = _typeof(value) === "object" && !Array.isArray(value) && value || {
      values: args.reduce(function (result, element) {
        return result.concat(Array.isArray(element) ? element : [element]);
      }, [])
    };
    _this8.values = options.values;
    _this8.options = options;
    return _this8;
  }

  _createClass(ENUM, [{
    key: "validate",
    value: function validate(value) {
      if (!this.values.includes(value)) {
        throw new sequelizeErrors.ValidationError(util.format("%j is not a valid choice in %j", value, this.values));
      }

      return true;
    }
  }]);

  return ENUM;
}(ABSTRACT);

var ARRAY =
/*#__PURE__*/
function (_ABSTRACT19) {
  _inherits(ARRAY, _ABSTRACT19);

  function ARRAY(type) {
    var _this9;

    _classCallCheck(this, ARRAY);

    _this9 = _possibleConstructorReturn(this, _getPrototypeOf(ARRAY).call(this));
    var options = _.isPlainObject(type) ? type : {
      type: type
    };
    _this9.options = options;
    _this9.type = typeof options.type === "function" ? new options.type() : options.type;
    return _this9;
  }

  _createClass(ARRAY, [{
    key: "toSql",
    value: function toSql() {
      return "".concat(this.type.toSql(), "[]");
    }
  }, {
    key: "validate",
    value: function validate(value) {
      if (!Array.isArray(value)) {
        throw new sequelizeErrors.ValidationError(util.format("%j is not a valid array", value));
      }

      return true;
    }
  }], [{
    key: "is",
    value: function is(obj, type) {
      return obj instanceof ARRAY && obj.type instanceof type;
    }
  }]);

  return ARRAY;
}(ABSTRACT);

var GEOMETRY =
/*#__PURE__*/
function (_ABSTRACT20) {
  _inherits(GEOMETRY, _ABSTRACT20);

  function GEOMETRY(type, srid) {
    var _this10;

    _classCallCheck(this, GEOMETRY);

    _this10 = _possibleConstructorReturn(this, _getPrototypeOf(GEOMETRY).call(this));
    var options = _.isPlainObject(type) ? type : {
      type: type,
      srid: srid
    };
    _this10.options = options;
    _this10.type = options.type;
    _this10.srid = options.srid;
    return _this10;
  }

  _createClass(GEOMETRY, [{
    key: "_stringify",
    value: function _stringify(value, options) {
      return "ST_GeomFromText(".concat(options.escape(wkx.Geometry.parseGeoJSON(value).toWkt()), ")");
    }
  }, {
    key: "_bindParam",
    value: function _bindParam(value, options) {
      return "ST_GeomFromText(".concat(options.bindParam(wkx.Geometry.parseGeoJSON(value).toWkt()), ")");
    }
  }]);

  return GEOMETRY;
}(ABSTRACT);

GEOMETRY.prototype.escape = false;

var GEOGRAPHY =
/*#__PURE__*/
function (_ABSTRACT21) {
  _inherits(GEOGRAPHY, _ABSTRACT21);

  function GEOGRAPHY(type, srid) {
    var _this11;

    _classCallCheck(this, GEOGRAPHY);

    _this11 = _possibleConstructorReturn(this, _getPrototypeOf(GEOGRAPHY).call(this));
    var options = _.isPlainObject(type) ? type : {
      type: type,
      srid: srid
    };
    _this11.options = options;
    _this11.type = options.type;
    _this11.srid = options.srid;
    return _this11;
  }

  _createClass(GEOGRAPHY, [{
    key: "_stringify",
    value: function _stringify(value, options) {
      return "ST_GeomFromText(".concat(options.escape(wkx.Geometry.parseGeoJSON(value).toWkt()), ")");
    }
  }, {
    key: "_bindParam",
    value: function _bindParam(value, options) {
      return "ST_GeomFromText(".concat(options.bindParam(wkx.Geometry.parseGeoJSON(value).toWkt()), ")");
    }
  }]);

  return GEOGRAPHY;
}(ABSTRACT);

GEOGRAPHY.prototype.escape = false;

var CIDR =
/*#__PURE__*/
function (_ABSTRACT22) {
  _inherits(CIDR, _ABSTRACT22);

  function CIDR() {
    _classCallCheck(this, CIDR);

    return _possibleConstructorReturn(this, _getPrototypeOf(CIDR).apply(this, arguments));
  }

  _createClass(CIDR, [{
    key: "validate",
    value: function validate(value) {
      if (typeof value !== "string" || !Validator.isIPRange(value)) {
        throw new sequelizeErrors.ValidationError(util.format("%j is not a valid CIDR", value));
      }

      return true;
    }
  }]);

  return CIDR;
}(ABSTRACT);

var INET =
/*#__PURE__*/
function (_ABSTRACT23) {
  _inherits(INET, _ABSTRACT23);

  function INET() {
    _classCallCheck(this, INET);

    return _possibleConstructorReturn(this, _getPrototypeOf(INET).apply(this, arguments));
  }

  _createClass(INET, [{
    key: "validate",
    value: function validate(value) {
      if (typeof value !== "string" || !Validator.isIP(value)) {
        throw new sequelizeErrors.ValidationError(util.format("%j is not a valid INET", value));
      }

      return true;
    }
  }]);

  return INET;
}(ABSTRACT);

var MACADDR =
/*#__PURE__*/
function (_ABSTRACT24) {
  _inherits(MACADDR, _ABSTRACT24);

  function MACADDR() {
    _classCallCheck(this, MACADDR);

    return _possibleConstructorReturn(this, _getPrototypeOf(MACADDR).apply(this, arguments));
  }

  _createClass(MACADDR, [{
    key: "validate",
    value: function validate(value) {
      if (typeof value !== "string" || !Validator.isMACAddress(value)) {
        throw new sequelizeErrors.ValidationError(util.format("%j is not a valid MACADDR", value));
      }

      return true;
    }
  }]);

  return MACADDR;
}(ABSTRACT);

var TSVECTOR =
/*#__PURE__*/
function (_ABSTRACT25) {
  _inherits(TSVECTOR, _ABSTRACT25);

  function TSVECTOR() {
    _classCallCheck(this, TSVECTOR);

    return _possibleConstructorReturn(this, _getPrototypeOf(TSVECTOR).apply(this, arguments));
  }

  _createClass(TSVECTOR, [{
    key: "validate",
    value: function validate(value) {
      if (typeof value !== "string") {
        throw new sequelizeErrors.ValidationError(util.format("%j is not a valid string", value));
      }

      return true;
    }
  }]);

  return TSVECTOR;
}(ABSTRACT);

var DataTypes = module.exports = {
  ABSTRACT: ABSTRACT,
  STRING: STRING,
  CHAR: CHAR,
  TEXT: TEXT,
  NUMBER: NUMBER,
  TINYINT: TINYINT,
  SMALLINT: SMALLINT,
  MEDIUMINT: MEDIUMINT,
  INTEGER: INTEGER,
  BIGINT: BIGINT,
  FLOAT: FLOAT,
  TIME: TIME,
  DATE: DATE,
  DATEONLY: DATEONLY,
  BOOLEAN: BOOLEAN,
  NOW: NOW,
  BLOB: BLOB,
  DECIMAL: DECIMAL,
  NUMERIC: DECIMAL,
  UUID: UUID,
  UUIDV1: UUIDV1,
  UUIDV4: UUIDV4,
  HSTORE: HSTORE,
  JSON: JSONTYPE,
  JSONB: JSONB,
  VIRTUAL: VIRTUAL,
  ARRAY: ARRAY,
  ENUM: ENUM,
  RANGE: RANGE,
  REAL: REAL,
  "DOUBLE PRECISION": DOUBLE,
  DOUBLE: DOUBLE,
  GEOMETRY: GEOMETRY,
  GEOGRAPHY: GEOGRAPHY,
  CIDR: CIDR,
  INET: INET,
  MACADDR: MACADDR,
  CITEXT: CITEXT,
  TSVECTOR: TSVECTOR
};

_.each(DataTypes, function (dataType, name) {
  if (!Object.prototype.hasOwnProperty.call(dataType, "key")) {
    dataType.types = {};
    dataType.key = dataType.prototype.key = name;
  }
});

var dialectMap = {};
dialectMap.postgres = require("./dialects/postgres/data-types")(DataTypes);
dialectMap.mysql = require("./dialects/mysql/data-types")(DataTypes);
dialectMap.mariadb = require("./dialects/mariadb/data-types")(DataTypes);
dialectMap.sqlite = require("./dialects/sqlite/data-types")(DataTypes);
dialectMap.mssql = require("./dialects/mssql/data-types")(DataTypes);
dialectMap.db2 = require("./dialects/db2/data-types")(DataTypes);
dialectMap.snowflake = require("./dialects/snowflake/data-types")(DataTypes);
dialectMap.oracle = require("./dialects/oracle/data-types")(DataTypes);
var dialectList = Object.values(dialectMap);

for (var _i2 = 0, _dialectList = dialectList; _i2 < _dialectList.length; _i2++) {
  var dataTypes = _dialectList[_i2];

  _.each(dataTypes, function (DataType, key) {
    if (!DataType.key) {
      DataType.key = DataType.prototype.key = key;
    }
  });
}

var _loop = function _loop() {
  var dataTypes = _arr2[_i3];

  _.each(dataTypes, function (DataType, key) {
    dataTypes[key] = classToInvokable(DataType);
  });
};

for (var _i3 = 0, _arr2 = [DataTypes].concat(_toConsumableArray(dialectList)); _i3 < _arr2.length; _i3++) {
  _loop();
}

Object.assign(DataTypes, dialectMap);
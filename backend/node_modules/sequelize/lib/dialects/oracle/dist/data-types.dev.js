"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var moment = require("moment");

var momentTz = require("moment-timezone");

module.exports = function (BaseTypes) {
  var warn = BaseTypes.ABSTRACT.warn.bind(void 0, "https://www.oracle.com/pls/topic/lookup?ctx=dblatest&id=GUID-D424D23B-0933-425F-BC69-9C0E6724693C");
  BaseTypes.DATE.types.oracle = ["TIMESTAMP", "TIMESTAMP WITH LOCAL TIME ZONE"];
  BaseTypes.STRING.types.oracle = ["VARCHAR2", "NVARCHAR2"];
  BaseTypes.CHAR.types.oracle = ["CHAR", "RAW"];
  BaseTypes.TEXT.types.oracle = ["CLOB"];
  BaseTypes.TINYINT.types.oracle = ["NUMBER"];
  BaseTypes.SMALLINT.types.oracle = ["NUMBER"];
  BaseTypes.MEDIUMINT.types.oracle = ["NUMBER"];
  BaseTypes.INTEGER.types.oracle = ["INTEGER"];
  BaseTypes.BIGINT.types.oracle = ["NUMBER"];
  BaseTypes.FLOAT.types.oracle = ["BINARY_FLOAT"];
  BaseTypes.DATEONLY.types.oracle = ["DATE"];
  BaseTypes.BOOLEAN.types.oracle = ["CHAR(1)"];
  BaseTypes.BLOB.types.oracle = ["BLOB"];
  BaseTypes.DECIMAL.types.oracle = ["NUMBER"];
  BaseTypes.UUID.types.oracle = ["VARCHAR2"];
  BaseTypes.ENUM.types.oracle = ["VARCHAR2"];
  BaseTypes.REAL.types.oracle = ["BINARY_DOUBLE"];
  BaseTypes.DOUBLE.types.oracle = ["BINARY_DOUBLE"];
  BaseTypes.JSON.types.oracle = ["BLOB"];
  BaseTypes.GEOMETRY.types.oracle = false;

  var STRING =
  /*#__PURE__*/
  function (_BaseTypes$STRING) {
    _inherits(STRING, _BaseTypes$STRING);

    function STRING() {
      _classCallCheck(this, STRING);

      return _possibleConstructorReturn(this, _getPrototypeOf(STRING).apply(this, arguments));
    }

    _createClass(STRING, [{
      key: "toSql",
      value: function toSql() {
        if (this.length > 4e3 || this._binary && this._length > 2e3) {
          warn("Oracle supports length up to 32764 bytes or characters; Be sure that your administrator has extended the MAX_STRING_SIZE parameter. Check https://docs.oracle.com/pls/topic/lookup?ctx=dblatest&id=GUID-7B72E154-677A-4342-A1EA-C74C1EA928E6");
        }

        if (!this._binary) {
          return "NVARCHAR2(".concat(this._length, ")");
        }

        return "RAW(".concat(this._length, ")");
      }
    }, {
      key: "_stringify",
      value: function _stringify(value, options) {
        if (this._binary) {
          return options.escape(value.toString("hex"));
        }

        return options.escape(value);
      }
    }, {
      key: "_getBindDef",
      value: function _getBindDef(oracledb) {
        if (this._binary) {
          return {
            type: oracledb.DB_TYPE_RAW,
            maxSize: this._length
          };
        }

        return {
          type: oracledb.DB_TYPE_VARCHAR,
          maxSize: this._length
        };
      }
    }, {
      key: "_bindParam",
      value: function _bindParam(value, options) {
        return options.bindParam(value);
      }
    }]);

    return STRING;
  }(BaseTypes.STRING);

  STRING.prototype.escape = false;

  var BOOLEAN =
  /*#__PURE__*/
  function (_BaseTypes$BOOLEAN) {
    _inherits(BOOLEAN, _BaseTypes$BOOLEAN);

    function BOOLEAN() {
      _classCallCheck(this, BOOLEAN);

      return _possibleConstructorReturn(this, _getPrototypeOf(BOOLEAN).apply(this, arguments));
    }

    _createClass(BOOLEAN, [{
      key: "toSql",
      value: function toSql() {
        return "CHAR(1)";
      }
    }, {
      key: "_getBindDef",
      value: function _getBindDef(oracledb) {
        return {
          type: oracledb.DB_TYPE_CHAR,
          maxSize: 1
        };
      }
    }, {
      key: "_stringify",
      value: function _stringify(value) {
        return value === true ? "1" : value === false ? "0" : value;
      }
    }, {
      key: "_sanitize",
      value: function _sanitize(value) {
        if (typeof value === "string") {
          return value === "1" || value === "true" ? true : value === "0" || value === "false" ? false : value;
        }

        return _get(_getPrototypeOf(BOOLEAN.prototype), "_sanitize", this).call(this, value);
      }
    }]);

    return BOOLEAN;
  }(BaseTypes.BOOLEAN);

  var UUID =
  /*#__PURE__*/
  function (_BaseTypes$UUID) {
    _inherits(UUID, _BaseTypes$UUID);

    function UUID() {
      _classCallCheck(this, UUID);

      return _possibleConstructorReturn(this, _getPrototypeOf(UUID).apply(this, arguments));
    }

    _createClass(UUID, [{
      key: "toSql",
      value: function toSql() {
        return "VARCHAR2(36)";
      }
    }, {
      key: "_getBindDef",
      value: function _getBindDef(oracledb) {
        return {
          type: oracledb.DB_TYPE_VARCHAR,
          maxSize: 36
        };
      }
    }]);

    return UUID;
  }(BaseTypes.UUID);

  var NOW =
  /*#__PURE__*/
  function (_BaseTypes$NOW) {
    _inherits(NOW, _BaseTypes$NOW);

    function NOW() {
      _classCallCheck(this, NOW);

      return _possibleConstructorReturn(this, _getPrototypeOf(NOW).apply(this, arguments));
    }

    _createClass(NOW, [{
      key: "toSql",
      value: function toSql() {
        return "SYSDATE";
      }
    }, {
      key: "_stringify",
      value: function _stringify() {
        return "SYSDATE";
      }
    }]);

    return NOW;
  }(BaseTypes.NOW);

  var ENUM =
  /*#__PURE__*/
  function (_BaseTypes$ENUM) {
    _inherits(ENUM, _BaseTypes$ENUM);

    function ENUM() {
      _classCallCheck(this, ENUM);

      return _possibleConstructorReturn(this, _getPrototypeOf(ENUM).apply(this, arguments));
    }

    _createClass(ENUM, [{
      key: "toSql",
      value: function toSql() {
        return "VARCHAR2(512)";
      }
    }, {
      key: "_getBindDef",
      value: function _getBindDef(oracledb) {
        return {
          type: oracledb.DB_TYPE_VARCHAR,
          maxSize: 512
        };
      }
    }]);

    return ENUM;
  }(BaseTypes.ENUM);

  var TEXT =
  /*#__PURE__*/
  function (_BaseTypes$TEXT) {
    _inherits(TEXT, _BaseTypes$TEXT);

    function TEXT() {
      _classCallCheck(this, TEXT);

      return _possibleConstructorReturn(this, _getPrototypeOf(TEXT).apply(this, arguments));
    }

    _createClass(TEXT, [{
      key: "toSql",
      value: function toSql() {
        return "CLOB";
      }
    }, {
      key: "_getBindDef",
      value: function _getBindDef(oracledb) {
        return {
          type: oracledb.DB_TYPE_CLOB
        };
      }
    }]);

    return TEXT;
  }(BaseTypes.TEXT);

  var CHAR =
  /*#__PURE__*/
  function (_BaseTypes$CHAR) {
    _inherits(CHAR, _BaseTypes$CHAR);

    function CHAR() {
      _classCallCheck(this, CHAR);

      return _possibleConstructorReturn(this, _getPrototypeOf(CHAR).apply(this, arguments));
    }

    _createClass(CHAR, [{
      key: "toSql",
      value: function toSql() {
        if (this._binary) {
          warn("Oracle CHAR.BINARY datatype is not of Fixed Length.");
          return "RAW(".concat(this._length, ")");
        }

        return _get(_getPrototypeOf(CHAR.prototype), "toSql", this).call(this);
      }
    }, {
      key: "_getBindDef",
      value: function _getBindDef(oracledb) {
        if (this._binary) {
          return {
            type: oracledb.DB_TYPE_RAW,
            maxSize: this._length
          };
        }

        return {
          type: oracledb.DB_TYPE_CHAR,
          maxSize: this._length
        };
      }
    }, {
      key: "_bindParam",
      value: function _bindParam(value, options) {
        return options.bindParam(value);
      }
    }]);

    return CHAR;
  }(BaseTypes.CHAR);

  var DATE =
  /*#__PURE__*/
  function (_BaseTypes$DATE) {
    _inherits(DATE, _BaseTypes$DATE);

    function DATE() {
      _classCallCheck(this, DATE);

      return _possibleConstructorReturn(this, _getPrototypeOf(DATE).apply(this, arguments));
    }

    _createClass(DATE, [{
      key: "toSql",
      value: function toSql() {
        return "TIMESTAMP WITH LOCAL TIME ZONE";
      }
    }, {
      key: "_getBindDef",
      value: function _getBindDef(oracledb) {
        return {
          type: oracledb.DB_TYPE_TIMESTAMP_LTZ
        };
      }
    }, {
      key: "_stringify",
      value: function _stringify(date, options) {
        var format = "YYYY-MM-DD HH24:MI:SS.FFTZH:TZM";
        date = this._applyTimezone(date, options);
        var formatedDate = date.format("YYYY-MM-DD HH:mm:ss.SSS Z");
        return "TO_TIMESTAMP_TZ('".concat(formatedDate, "','").concat(format, "')");
      }
    }, {
      key: "_applyTimezone",
      value: function _applyTimezone(date, options) {
        if (options.timezone) {
          if (momentTz.tz.zone(options.timezone)) {
            date = momentTz(date).tz(options.timezone);
          } else {
            date = moment(date).utcOffset(options.timezone);
          }
        } else {
          date = momentTz(date);
        }

        return date;
      }
    }, {
      key: "_bindParam",
      value: function _bindParam(value, options) {
        return options.bindParam(value);
      }
    }], [{
      key: "parse",
      value: function parse(value, options) {
        if (value === null) {
          return value;
        }

        if (options && moment.tz.zone(options.timezone)) {
          value = moment.tz(value.toString(), options.timezone).toDate();
        }

        return value;
      }
    }]);

    return DATE;
  }(BaseTypes.DATE);

  DATE.prototype.escape = false;

  var DECIMAL =
  /*#__PURE__*/
  function (_BaseTypes$DECIMAL) {
    _inherits(DECIMAL, _BaseTypes$DECIMAL);

    function DECIMAL() {
      _classCallCheck(this, DECIMAL);

      return _possibleConstructorReturn(this, _getPrototypeOf(DECIMAL).apply(this, arguments));
    }

    _createClass(DECIMAL, [{
      key: "toSql",
      value: function toSql() {
        var result = "";

        if (this._length) {
          result += "(".concat(this._length);

          if (typeof this._decimals === "number") {
            result += ",".concat(this._decimals);
          }

          result += ")";
        }

        if (!this._length && this._precision) {
          result += "(".concat(this._precision);

          if (typeof this._scale === "number") {
            result += ",".concat(this._scale);
          }

          result += ")";
        }

        return "NUMBER".concat(result);
      }
    }, {
      key: "_getBindDef",
      value: function _getBindDef(oracledb) {
        return {
          type: oracledb.DB_TYPE_NUMBER
        };
      }
    }]);

    return DECIMAL;
  }(BaseTypes.DECIMAL);

  var TINYINT =
  /*#__PURE__*/
  function (_BaseTypes$TINYINT) {
    _inherits(TINYINT, _BaseTypes$TINYINT);

    function TINYINT() {
      _classCallCheck(this, TINYINT);

      return _possibleConstructorReturn(this, _getPrototypeOf(TINYINT).apply(this, arguments));
    }

    _createClass(TINYINT, [{
      key: "toSql",
      value: function toSql() {
        return "NUMBER(3)";
      }
    }, {
      key: "_getBindDef",
      value: function _getBindDef(oracledb) {
        return {
          type: oracledb.DB_TYPE_NUMBER
        };
      }
    }]);

    return TINYINT;
  }(BaseTypes.TINYINT);

  var SMALLINT =
  /*#__PURE__*/
  function (_BaseTypes$SMALLINT) {
    _inherits(SMALLINT, _BaseTypes$SMALLINT);

    function SMALLINT() {
      _classCallCheck(this, SMALLINT);

      return _possibleConstructorReturn(this, _getPrototypeOf(SMALLINT).apply(this, arguments));
    }

    _createClass(SMALLINT, [{
      key: "toSql",
      value: function toSql() {
        if (this._length) {
          return "NUMBER(".concat(this._length, ",0)");
        }

        return "SMALLINT";
      }
    }, {
      key: "_getBindDef",
      value: function _getBindDef(oracledb) {
        return {
          type: oracledb.DB_TYPE_NUMBER
        };
      }
    }]);

    return SMALLINT;
  }(BaseTypes.SMALLINT);

  var MEDIUMINT =
  /*#__PURE__*/
  function (_BaseTypes$MEDIUMINT) {
    _inherits(MEDIUMINT, _BaseTypes$MEDIUMINT);

    function MEDIUMINT() {
      _classCallCheck(this, MEDIUMINT);

      return _possibleConstructorReturn(this, _getPrototypeOf(MEDIUMINT).apply(this, arguments));
    }

    _createClass(MEDIUMINT, [{
      key: "toSql",
      value: function toSql() {
        return "NUMBER(8)";
      }
    }, {
      key: "_getBindDef",
      value: function _getBindDef(oracledb) {
        return {
          type: oracledb.DB_TYPE_NUMBER
        };
      }
    }]);

    return MEDIUMINT;
  }(BaseTypes.MEDIUMINT);

  var BIGINT =
  /*#__PURE__*/
  function (_BaseTypes$BIGINT) {
    _inherits(BIGINT, _BaseTypes$BIGINT);

    function BIGINT(length) {
      var _this;

      _classCallCheck(this, BIGINT);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(BIGINT).call(this, length));
      if (!(_assertThisInitialized(_this) instanceof BIGINT)) return _possibleConstructorReturn(_this, new BIGINT(length));
      BaseTypes.BIGINT.apply(_assertThisInitialized(_this), arguments);

      if (_this._length || _this.options.length || _this._unsigned || _this._zerofill) {
        warn("Oracle does not support BIGINT with options");
        _this._length = void 0;
        _this.options.length = void 0;
        _this._unsigned = void 0;
        _this._zerofill = void 0;
      }

      return _this;
    }

    _createClass(BIGINT, [{
      key: "toSql",
      value: function toSql() {
        return "NUMBER(19)";
      }
    }, {
      key: "_getBindDef",
      value: function _getBindDef(oracledb) {
        return {
          type: oracledb.DB_TYPE_NUMBER
        };
      }
    }, {
      key: "_sanitize",
      value: function _sanitize(value) {
        if (typeof value === "bigint" || typeof value === "number") {
          return value.toString();
        }

        return value;
      }
    }]);

    return BIGINT;
  }(BaseTypes.BIGINT);

  var NUMBER =
  /*#__PURE__*/
  function (_BaseTypes$NUMBER) {
    _inherits(NUMBER, _BaseTypes$NUMBER);

    function NUMBER() {
      _classCallCheck(this, NUMBER);

      return _possibleConstructorReturn(this, _getPrototypeOf(NUMBER).apply(this, arguments));
    }

    _createClass(NUMBER, [{
      key: "_getBindDef",
      value: function _getBindDef(oracledb) {
        return {
          type: oracledb.DB_TYPE_NUMBER
        };
      }
    }]);

    return NUMBER;
  }(BaseTypes.NUMBER);

  var INTEGER =
  /*#__PURE__*/
  function (_BaseTypes$INTEGER) {
    _inherits(INTEGER, _BaseTypes$INTEGER);

    function INTEGER() {
      _classCallCheck(this, INTEGER);

      return _possibleConstructorReturn(this, _getPrototypeOf(INTEGER).apply(this, arguments));
    }

    _createClass(INTEGER, [{
      key: "toSql",
      value: function toSql() {
        if (this._length) {
          return "NUMBER(".concat(this._length, ",0)");
        }

        return "INTEGER";
      }
    }, {
      key: "_getBindDef",
      value: function _getBindDef(oracledb) {
        return {
          type: oracledb.DB_TYPE_NUMBER
        };
      }
    }]);

    return INTEGER;
  }(BaseTypes.INTEGER);

  var FLOAT =
  /*#__PURE__*/
  function (_BaseTypes$FLOAT) {
    _inherits(FLOAT, _BaseTypes$FLOAT);

    function FLOAT() {
      _classCallCheck(this, FLOAT);

      return _possibleConstructorReturn(this, _getPrototypeOf(FLOAT).apply(this, arguments));
    }

    _createClass(FLOAT, [{
      key: "toSql",
      value: function toSql() {
        return "BINARY_FLOAT";
      }
    }, {
      key: "_getBindDef",
      value: function _getBindDef(oracledb) {
        return {
          type: oracledb.DB_TYPE_BINARY_FLOAT
        };
      }
    }]);

    return FLOAT;
  }(BaseTypes.FLOAT);

  var REAL =
  /*#__PURE__*/
  function (_BaseTypes$REAL) {
    _inherits(REAL, _BaseTypes$REAL);

    function REAL() {
      _classCallCheck(this, REAL);

      return _possibleConstructorReturn(this, _getPrototypeOf(REAL).apply(this, arguments));
    }

    _createClass(REAL, [{
      key: "toSql",
      value: function toSql() {
        return "BINARY_DOUBLE";
      }
    }, {
      key: "_stringify",
      value: function _stringify(value) {
        if (value === Number.POSITIVE_INFINITY) {
          return "inf";
        }

        if (value === Number.NEGATIVE_INFINITY) {
          return "-inf";
        }

        return value;
      }
    }, {
      key: "_getBindDef",
      value: function _getBindDef(oracledb) {
        return {
          type: oracledb.DB_TYPE_BINARY_DOUBLE
        };
      }
    }]);

    return REAL;
  }(BaseTypes.REAL);

  var BLOB =
  /*#__PURE__*/
  function (_BaseTypes$BLOB) {
    _inherits(BLOB, _BaseTypes$BLOB);

    function BLOB() {
      _classCallCheck(this, BLOB);

      return _possibleConstructorReturn(this, _getPrototypeOf(BLOB).apply(this, arguments));
    }

    _createClass(BLOB, [{
      key: "_hexify",
      value: function _hexify(hex) {
        return "'".concat(hex, "'");
      }
    }, {
      key: "toSql",
      value: function toSql() {
        return "BLOB";
      }
    }, {
      key: "_getBindDef",
      value: function _getBindDef(oracledb) {
        return {
          type: oracledb.DB_TYPE_BLOB
        };
      }
    }]);

    return BLOB;
  }(BaseTypes.BLOB);

  var JSONTYPE =
  /*#__PURE__*/
  function (_BaseTypes$JSON) {
    _inherits(JSONTYPE, _BaseTypes$JSON);

    function JSONTYPE() {
      _classCallCheck(this, JSONTYPE);

      return _possibleConstructorReturn(this, _getPrototypeOf(JSONTYPE).apply(this, arguments));
    }

    _createClass(JSONTYPE, [{
      key: "toSql",
      value: function toSql() {
        return "BLOB";
      }
    }, {
      key: "_getBindDef",
      value: function _getBindDef(oracledb) {
        return {
          type: oracledb.DB_TYPE_BLOB
        };
      }
    }, {
      key: "_stringify",
      value: function _stringify(value, options) {
        return options.operation === "where" && typeof value === "string" ? value : JSON.stringify(value);
      }
    }, {
      key: "_bindParam",
      value: function _bindParam(value, options) {
        return options.bindParam(Buffer.from(JSON.stringify(value)));
      }
    }]);

    return JSONTYPE;
  }(BaseTypes.JSON);

  var DOUBLE =
  /*#__PURE__*/
  function (_BaseTypes$DOUBLE) {
    _inherits(DOUBLE, _BaseTypes$DOUBLE);

    function DOUBLE(length, decimals) {
      var _this2;

      _classCallCheck(this, DOUBLE);

      _this2 = _possibleConstructorReturn(this, _getPrototypeOf(DOUBLE).call(this, length, decimals));
      if (!(_assertThisInitialized(_this2) instanceof DOUBLE)) return _possibleConstructorReturn(_this2, new BaseTypes.DOUBLE(length, decimals));
      BaseTypes.DOUBLE.apply(_assertThisInitialized(_this2), arguments);

      if (_this2._length || _this2._unsigned || _this2._zerofill) {
        warn("Oracle does not support DOUBLE with options.");
        _this2._length = void 0;
        _this2.options.length = void 0;
        _this2._unsigned = void 0;
        _this2._zerofill = void 0;
      }

      _this2.key = "DOUBLE PRECISION";
      return _this2;
    }

    _createClass(DOUBLE, [{
      key: "_getBindDef",
      value: function _getBindDef(oracledb) {
        return {
          type: oracledb.DB_TYPE_BINARY_DOUBLE
        };
      }
    }, {
      key: "toSql",
      value: function toSql() {
        return "BINARY_DOUBLE";
      }
    }]);

    return DOUBLE;
  }(BaseTypes.DOUBLE);

  var DATEONLY =
  /*#__PURE__*/
  function (_BaseTypes$DATEONLY) {
    _inherits(DATEONLY, _BaseTypes$DATEONLY);

    function DATEONLY() {
      _classCallCheck(this, DATEONLY);

      return _possibleConstructorReturn(this, _getPrototypeOf(DATEONLY).apply(this, arguments));
    }

    _createClass(DATEONLY, [{
      key: "parse",
      value: function parse(value) {
        return moment(value).format("YYYY-MM-DD");
      }
    }, {
      key: "_sanitize",
      value: function _sanitize(value) {
        if (value) {
          return moment(value).format("YYYY-MM-DD");
        }

        return value;
      }
    }, {
      key: "_stringify",
      value: function _stringify(date, options) {
        if (date) {
          var format = "YYYY/MM/DD";
          return options.escape("TO_DATE('".concat(date, "','").concat(format, "')"));
        }

        return options.escape(date);
      }
    }, {
      key: "_getBindDef",
      value: function _getBindDef(oracledb) {
        return {
          type: oracledb.DB_TYPE_DATE
        };
      }
    }, {
      key: "_bindParam",
      value: function _bindParam(value, options) {
        if (typeof value === "string") {
          return options.bindParam(new Date(value));
        }

        return options.bindParam(value);
      }
    }]);

    return DATEONLY;
  }(BaseTypes.DATEONLY);

  DATEONLY.prototype.escape = false;
  return {
    BOOLEAN: BOOLEAN,
    "DOUBLE PRECISION": DOUBLE,
    DOUBLE: DOUBLE,
    STRING: STRING,
    TINYINT: TINYINT,
    SMALLINT: SMALLINT,
    MEDIUMINT: MEDIUMINT,
    BIGINT: BIGINT,
    NUMBER: NUMBER,
    INTEGER: INTEGER,
    FLOAT: FLOAT,
    UUID: UUID,
    DATEONLY: DATEONLY,
    DATE: DATE,
    NOW: NOW,
    BLOB: BLOB,
    ENUM: ENUM,
    TEXT: TEXT,
    CHAR: CHAR,
    JSON: JSONTYPE,
    REAL: REAL,
    DECIMAL: DECIMAL
  };
};
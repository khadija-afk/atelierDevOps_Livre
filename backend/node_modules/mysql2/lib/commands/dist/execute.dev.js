'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Command = require('./command.js');

var Query = require('./query.js');

var Packets = require('../packets/index.js');

var getBinaryParser = require('../parsers/binary_parser.js');

var Execute =
/*#__PURE__*/
function (_Command) {
  _inherits(Execute, _Command);

  function Execute(options, callback) {
    var _this;

    _classCallCheck(this, Execute);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Execute).call(this));
    _this.statement = options.statement;
    _this.sql = options.sql;
    _this.values = options.values;
    _this.onResult = callback;
    _this.parameters = options.values;
    _this.insertId = 0;
    _this.timeout = options.timeout;
    _this.queryTimeout = null;
    _this._rows = [];
    _this._fields = [];
    _this._result = [];
    _this._fieldCount = 0;
    _this._rowParser = null;
    _this._executeOptions = options;
    _this._resultIndex = 0;
    _this._localStream = null;

    _this._unpipeStream = function () {};

    _this._streamFactory = options.infileStreamFactory;
    _this._connection = null;
    return _this;
  }

  _createClass(Execute, [{
    key: "buildParserFromFields",
    value: function buildParserFromFields(fields, connection) {
      return getBinaryParser(fields, this.options, connection.config);
    }
  }, {
    key: "start",
    value: function start(packet, connection) {
      this._connection = connection;
      this.options = Object.assign({}, connection.config, this._executeOptions);

      this._setTimeout();

      var executePacket = new Packets.Execute(this.statement.id, this.parameters, connection.config.charsetNumber, connection.config.timezone); //For reasons why this try-catch is here, please see
      // https://github.com/sidorares/node-mysql2/pull/689
      //For additional discussion, see
      // 1. https://github.com/sidorares/node-mysql2/issues/493
      // 2. https://github.com/sidorares/node-mysql2/issues/187
      // 3. https://github.com/sidorares/node-mysql2/issues/480

      try {
        connection.writePacket(executePacket.toPacket(1));
      } catch (error) {
        this.onResult(error);
      }

      return Execute.prototype.resultsetHeader;
    }
  }, {
    key: "readField",
    value: function readField(packet, connection) {
      var fields; // disabling for now, but would be great to find reliable way to parse fields only once
      // fields reported by prepare can be empty at all or just incorrect - see #169
      //
      // perfomance optimisation: if we already have this field parsed in statement header, use one from header
      // const field = this.statement.columns.length == this._fieldCount ?
      //  this.statement.columns[this._receivedFieldsCount] : new Packets.ColumnDefinition(packet);

      var field = new Packets.ColumnDefinition(packet, connection.clientEncoding);
      this._receivedFieldsCount++;

      this._fields[this._resultIndex].push(field);

      if (this._receivedFieldsCount === this._fieldCount) {
        fields = this._fields[this._resultIndex];
        this.emit('fields', fields, this._resultIndex);
        return Execute.prototype.fieldsEOF;
      }

      return Execute.prototype.readField;
    }
  }, {
    key: "fieldsEOF",
    value: function fieldsEOF(packet, connection) {
      // check EOF
      if (!packet.isEOF()) {
        return connection.protocolError('Expected EOF packet');
      }

      this._rowParser = new (this.buildParserFromFields(this._fields[this._resultIndex], connection))();
      return Execute.prototype.row;
    }
  }]);

  return Execute;
}(Command);

Execute.prototype.done = Query.prototype.done;
Execute.prototype.doneInsert = Query.prototype.doneInsert;
Execute.prototype.resultsetHeader = Query.prototype.resultsetHeader;
Execute.prototype._findOrCreateReadStream = Query.prototype._findOrCreateReadStream;
Execute.prototype._streamLocalInfile = Query.prototype._streamLocalInfile;
Execute.prototype._setTimeout = Query.prototype._setTimeout;
Execute.prototype._handleTimeoutError = Query.prototype._handleTimeoutError;
Execute.prototype.row = Query.prototype.row;
Execute.prototype.stream = Query.prototype.stream;
module.exports = Execute;
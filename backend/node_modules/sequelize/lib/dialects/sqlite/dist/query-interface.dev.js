"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;

var __defNormalProp = function __defNormalProp(obj, key, value) {
  return key in obj ? __defProp(obj, key, {
    enumerable: true,
    configurable: true,
    writable: true,
    value: value
  }) : obj[key] = value;
};

var __spreadValues = function __spreadValues(a, b) {
  for (var prop in b || (b = {})) {
    if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);
  }

  if (__getOwnPropSymbols) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = __getOwnPropSymbols(b)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var prop = _step.value;
        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }

  return a;
};

var __spreadProps = function __spreadProps(a, b) {
  return __defProps(a, __getOwnPropDescs(b));
};

var sequelizeErrors = require("../../errors");

var QueryTypes = require("../../query-types");

var _require = require("../abstract/query-interface"),
    QueryInterface = _require.QueryInterface;

var _require2 = require("../../utils"),
    cloneDeep = _require2.cloneDeep;

var _ = require("lodash");

var SQLiteQueryInterface =
/*#__PURE__*/
function (_QueryInterface) {
  _inherits(SQLiteQueryInterface, _QueryInterface);

  function SQLiteQueryInterface() {
    _classCallCheck(this, SQLiteQueryInterface);

    return _possibleConstructorReturn(this, _getPrototypeOf(SQLiteQueryInterface).apply(this, arguments));
  }

  _createClass(SQLiteQueryInterface, [{
    key: "removeColumn",
    value: function removeColumn(tableName, attributeName, options) {
      var fields, sql, subQueries, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, subQuery;

      return regeneratorRuntime.async(function removeColumn$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              options = options || {};
              _context.next = 3;
              return regeneratorRuntime.awrap(this.describeTable(tableName, options));

            case 3:
              fields = _context.sent;
              delete fields[attributeName];
              sql = this.queryGenerator.removeColumnQuery(tableName, fields);
              subQueries = sql.split(";").filter(function (q) {
                return q !== "";
              });
              _iteratorNormalCompletion2 = true;
              _didIteratorError2 = false;
              _iteratorError2 = undefined;
              _context.prev = 10;
              _iterator2 = subQueries[Symbol.iterator]();

            case 12:
              if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                _context.next = 19;
                break;
              }

              subQuery = _step2.value;
              _context.next = 16;
              return regeneratorRuntime.awrap(this.sequelize.query("".concat(subQuery, ";"), __spreadValues({
                raw: true
              }, options)));

            case 16:
              _iteratorNormalCompletion2 = true;
              _context.next = 12;
              break;

            case 19:
              _context.next = 25;
              break;

            case 21:
              _context.prev = 21;
              _context.t0 = _context["catch"](10);
              _didIteratorError2 = true;
              _iteratorError2 = _context.t0;

            case 25:
              _context.prev = 25;
              _context.prev = 26;

              if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                _iterator2["return"]();
              }

            case 28:
              _context.prev = 28;

              if (!_didIteratorError2) {
                _context.next = 31;
                break;
              }

              throw _iteratorError2;

            case 31:
              return _context.finish(28);

            case 32:
              return _context.finish(25);

            case 33:
            case "end":
              return _context.stop();
          }
        }
      }, null, this, [[10, 21, 25, 33], [26,, 28, 32]]);
    }
  }, {
    key: "changeColumn",
    value: function changeColumn(tableName, attributeName, dataTypeOrOptions, options) {
      var fields, sql, subQueries, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, subQuery;

      return regeneratorRuntime.async(function changeColumn$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              options = options || {};
              _context2.next = 3;
              return regeneratorRuntime.awrap(this.describeTable(tableName, options));

            case 3:
              fields = _context2.sent;
              Object.assign(fields[attributeName], this.normalizeAttribute(dataTypeOrOptions));
              sql = this.queryGenerator.removeColumnQuery(tableName, fields);
              subQueries = sql.split(";").filter(function (q) {
                return q !== "";
              });
              _iteratorNormalCompletion3 = true;
              _didIteratorError3 = false;
              _iteratorError3 = undefined;
              _context2.prev = 10;
              _iterator3 = subQueries[Symbol.iterator]();

            case 12:
              if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {
                _context2.next = 19;
                break;
              }

              subQuery = _step3.value;
              _context2.next = 16;
              return regeneratorRuntime.awrap(this.sequelize.query("".concat(subQuery, ";"), __spreadValues({
                raw: true
              }, options)));

            case 16:
              _iteratorNormalCompletion3 = true;
              _context2.next = 12;
              break;

            case 19:
              _context2.next = 25;
              break;

            case 21:
              _context2.prev = 21;
              _context2.t0 = _context2["catch"](10);
              _didIteratorError3 = true;
              _iteratorError3 = _context2.t0;

            case 25:
              _context2.prev = 25;
              _context2.prev = 26;

              if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                _iterator3["return"]();
              }

            case 28:
              _context2.prev = 28;

              if (!_didIteratorError3) {
                _context2.next = 31;
                break;
              }

              throw _iteratorError3;

            case 31:
              return _context2.finish(28);

            case 32:
              return _context2.finish(25);

            case 33:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this, [[10, 21, 25, 33], [26,, 28, 32]]);
    }
  }, {
    key: "renameColumn",
    value: function renameColumn(tableName, attrNameBefore, attrNameAfter, options) {
      var fields, sql, subQueries, _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, subQuery;

      return regeneratorRuntime.async(function renameColumn$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              options = options || {};
              _context3.next = 3;
              return regeneratorRuntime.awrap(this.assertTableHasColumn(tableName, attrNameBefore, options));

            case 3:
              fields = _context3.sent;
              fields[attrNameAfter] = __spreadValues({}, fields[attrNameBefore]);
              delete fields[attrNameBefore];
              sql = this.queryGenerator.renameColumnQuery(tableName, attrNameBefore, attrNameAfter, fields);
              subQueries = sql.split(";").filter(function (q) {
                return q !== "";
              });
              _iteratorNormalCompletion4 = true;
              _didIteratorError4 = false;
              _iteratorError4 = undefined;
              _context3.prev = 11;
              _iterator4 = subQueries[Symbol.iterator]();

            case 13:
              if (_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done) {
                _context3.next = 20;
                break;
              }

              subQuery = _step4.value;
              _context3.next = 17;
              return regeneratorRuntime.awrap(this.sequelize.query("".concat(subQuery, ";"), __spreadValues({
                raw: true
              }, options)));

            case 17:
              _iteratorNormalCompletion4 = true;
              _context3.next = 13;
              break;

            case 20:
              _context3.next = 26;
              break;

            case 22:
              _context3.prev = 22;
              _context3.t0 = _context3["catch"](11);
              _didIteratorError4 = true;
              _iteratorError4 = _context3.t0;

            case 26:
              _context3.prev = 26;
              _context3.prev = 27;

              if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
                _iterator4["return"]();
              }

            case 29:
              _context3.prev = 29;

              if (!_didIteratorError4) {
                _context3.next = 32;
                break;
              }

              throw _iteratorError4;

            case 32:
              return _context3.finish(29);

            case 33:
              return _context3.finish(26);

            case 34:
            case "end":
              return _context3.stop();
          }
        }
      }, null, this, [[11, 22, 26, 34], [27,, 29, 33]]);
    }
  }, {
    key: "removeConstraint",
    value: function removeConstraint(tableName, constraintName, options) {
      var _this = this;

      var createTableSql, constraints, constraint, constraintSnippet, referenceTableName, referenceTableKeys, fields, sql, subQueries, _iteratorNormalCompletion5, _didIteratorError5, _iteratorError5, _iterator5, _step5, subQuery;

      return regeneratorRuntime.async(function removeConstraint$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return regeneratorRuntime.awrap(this.showConstraint(tableName, constraintName));

            case 2:
              constraints = _context4.sent;
              constraint = constraints.find(function (constaint) {
                return constaint.constraintName === constraintName;
              });

              if (constraint) {
                _context4.next = 6;
                break;
              }

              throw new sequelizeErrors.UnknownConstraintError({
                message: "Constraint ".concat(constraintName, " on table ").concat(tableName, " does not exist"),
                constraint: constraintName,
                table: tableName
              });

            case 6:
              createTableSql = constraint.sql;
              constraint.constraintName = this.queryGenerator.quoteIdentifier(constraint.constraintName);
              constraintSnippet = ", CONSTRAINT ".concat(constraint.constraintName, " ").concat(constraint.constraintType, " ").concat(constraint.constraintCondition);

              if (constraint.constraintType === "FOREIGN KEY") {
                referenceTableName = this.queryGenerator.quoteTable(constraint.referenceTableName);
                constraint.referenceTableKeys = constraint.referenceTableKeys.map(function (columnName) {
                  return _this.queryGenerator.quoteIdentifier(columnName);
                });
                referenceTableKeys = constraint.referenceTableKeys.join(", ");
                constraintSnippet += " REFERENCES ".concat(referenceTableName, " (").concat(referenceTableKeys, ")");
                constraintSnippet += " ON UPDATE ".concat(constraint.updateAction);
                constraintSnippet += " ON DELETE ".concat(constraint.deleteAction);
              }

              createTableSql = createTableSql.replace(constraintSnippet, "");
              createTableSql += ";";
              _context4.next = 14;
              return regeneratorRuntime.awrap(this.describeTable(tableName, options));

            case 14:
              fields = _context4.sent;
              sql = this.queryGenerator._alterConstraintQuery(tableName, fields, createTableSql);
              subQueries = sql.split(";").filter(function (q) {
                return q !== "";
              });
              _iteratorNormalCompletion5 = true;
              _didIteratorError5 = false;
              _iteratorError5 = undefined;
              _context4.prev = 20;
              _iterator5 = subQueries[Symbol.iterator]();

            case 22:
              if (_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done) {
                _context4.next = 29;
                break;
              }

              subQuery = _step5.value;
              _context4.next = 26;
              return regeneratorRuntime.awrap(this.sequelize.query("".concat(subQuery, ";"), __spreadValues({
                raw: true
              }, options)));

            case 26:
              _iteratorNormalCompletion5 = true;
              _context4.next = 22;
              break;

            case 29:
              _context4.next = 35;
              break;

            case 31:
              _context4.prev = 31;
              _context4.t0 = _context4["catch"](20);
              _didIteratorError5 = true;
              _iteratorError5 = _context4.t0;

            case 35:
              _context4.prev = 35;
              _context4.prev = 36;

              if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
                _iterator5["return"]();
              }

            case 38:
              _context4.prev = 38;

              if (!_didIteratorError5) {
                _context4.next = 41;
                break;
              }

              throw _iteratorError5;

            case 41:
              return _context4.finish(38);

            case 42:
              return _context4.finish(35);

            case 43:
            case "end":
              return _context4.stop();
          }
        }
      }, null, this, [[20, 31, 35, 43], [36,, 38, 42]]);
    }
  }, {
    key: "addConstraint",
    value: function addConstraint(tableName, options) {
      var constraintSnippet, describeCreateTableSql, constraints, sql, index, createTableSql, fields, subQueries, _iteratorNormalCompletion6, _didIteratorError6, _iteratorError6, _iterator6, _step6, subQuery;

      return regeneratorRuntime.async(function addConstraint$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              if (options.fields) {
                _context5.next = 2;
                break;
              }

              throw new Error("Fields must be specified through options.fields");

            case 2:
              if (options.type) {
                _context5.next = 4;
                break;
              }

              throw new Error("Constraint type must be specified through options.type");

            case 4:
              options = cloneDeep(options);
              constraintSnippet = this.queryGenerator.getConstraintSnippet(tableName, options);
              describeCreateTableSql = this.queryGenerator.describeCreateTableQuery(tableName);
              _context5.next = 9;
              return regeneratorRuntime.awrap(this.sequelize.query(describeCreateTableSql, __spreadProps(__spreadValues({}, options), {
                type: QueryTypes.SELECT,
                raw: true
              })));

            case 9:
              constraints = _context5.sent;
              sql = constraints[0].sql;
              index = sql.length - 1;
              createTableSql = "".concat(sql.substr(0, index), ", ").concat(constraintSnippet, ")").concat(sql.substr(index + 1), ";");
              _context5.next = 15;
              return regeneratorRuntime.awrap(this.describeTable(tableName, options));

            case 15:
              fields = _context5.sent;
              sql = this.queryGenerator._alterConstraintQuery(tableName, fields, createTableSql);
              subQueries = sql.split(";").filter(function (q) {
                return q !== "";
              });
              _iteratorNormalCompletion6 = true;
              _didIteratorError6 = false;
              _iteratorError6 = undefined;
              _context5.prev = 21;
              _iterator6 = subQueries[Symbol.iterator]();

            case 23:
              if (_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done) {
                _context5.next = 30;
                break;
              }

              subQuery = _step6.value;
              _context5.next = 27;
              return regeneratorRuntime.awrap(this.sequelize.query("".concat(subQuery, ";"), __spreadValues({
                raw: true
              }, options)));

            case 27:
              _iteratorNormalCompletion6 = true;
              _context5.next = 23;
              break;

            case 30:
              _context5.next = 36;
              break;

            case 32:
              _context5.prev = 32;
              _context5.t0 = _context5["catch"](21);
              _didIteratorError6 = true;
              _iteratorError6 = _context5.t0;

            case 36:
              _context5.prev = 36;
              _context5.prev = 37;

              if (!_iteratorNormalCompletion6 && _iterator6["return"] != null) {
                _iterator6["return"]();
              }

            case 39:
              _context5.prev = 39;

              if (!_didIteratorError6) {
                _context5.next = 42;
                break;
              }

              throw _iteratorError6;

            case 42:
              return _context5.finish(39);

            case 43:
              return _context5.finish(36);

            case 44:
            case "end":
              return _context5.stop();
          }
        }
      }, null, this, [[21, 32, 36, 44], [37,, 39, 43]]);
    }
  }, {
    key: "getForeignKeyReferencesForTable",
    value: function getForeignKeyReferencesForTable(tableName, options) {
      var database, query, result;
      return regeneratorRuntime.async(function getForeignKeyReferencesForTable$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              database = this.sequelize.config.database;
              query = this.queryGenerator.getForeignKeysQuery(tableName, database);
              _context6.next = 4;
              return regeneratorRuntime.awrap(this.sequelize.query(query, options));

            case 4:
              result = _context6.sent;
              return _context6.abrupt("return", result.map(function (row) {
                return {
                  tableName: tableName,
                  columnName: row.from,
                  referencedTableName: row.table,
                  referencedColumnName: row.to,
                  tableCatalog: database,
                  referencedTableCatalog: database
                };
              }));

            case 6:
            case "end":
              return _context6.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "dropAllTables",
    value: function dropAllTables(options) {
      var skip, tableNames;
      return regeneratorRuntime.async(function dropAllTables$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              options = options || {};
              skip = options.skip || [];
              _context7.next = 4;
              return regeneratorRuntime.awrap(this.showAllTables(options));

            case 4:
              tableNames = _context7.sent;
              _context7.next = 7;
              return regeneratorRuntime.awrap(this.sequelize.query("PRAGMA foreign_keys = OFF", options));

            case 7:
              _context7.next = 9;
              return regeneratorRuntime.awrap(this._dropAllTables(tableNames, skip, options));

            case 9:
              _context7.next = 11;
              return regeneratorRuntime.awrap(this.sequelize.query("PRAGMA foreign_keys = ON", options));

            case 11:
            case "end":
              return _context7.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "describeTable",
    value: function describeTable(tableName, options) {
      var schema, schemaDelimiter, sql, sqlIndexes, data, indexes, prop, _iteratorNormalCompletion7, _didIteratorError7, _iteratorError7, _iterator7, _step7, index, _iteratorNormalCompletion9, _didIteratorError9, _iteratorError9, _iterator9, _step9, field, foreignKeys, _iteratorNormalCompletion8, _didIteratorError8, _iteratorError8, _iterator8, _step8, foreignKey;

      return regeneratorRuntime.async(function describeTable$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              schema = null;
              schemaDelimiter = null;

              if (typeof options === "string") {
                schema = options;
              } else if (_typeof(options) === "object" && options !== null) {
                schema = options.schema || null;
                schemaDelimiter = options.schemaDelimiter || null;
              }

              if (_typeof(tableName) === "object" && tableName !== null) {
                schema = tableName.schema;
                tableName = tableName.tableName;
              }

              sql = this.queryGenerator.describeTableQuery(tableName, schema, schemaDelimiter);
              options = __spreadProps(__spreadValues({}, options), {
                type: QueryTypes.DESCRIBE
              });
              sqlIndexes = this.queryGenerator.showIndexesQuery(tableName);
              _context8.prev = 7;
              _context8.next = 10;
              return regeneratorRuntime.awrap(this.sequelize.query(sql, options));

            case 10:
              data = _context8.sent;

              if (!_.isEmpty(data)) {
                _context8.next = 13;
                break;
              }

              throw new Error("No description found for \"".concat(tableName, "\" table. Check the table name and schema; remember, they _are_ case sensitive."));

            case 13:
              _context8.next = 15;
              return regeneratorRuntime.awrap(this.sequelize.query(sqlIndexes, options));

            case 15:
              indexes = _context8.sent;

              for (prop in data) {
                data[prop].unique = false;
              }

              _iteratorNormalCompletion7 = true;
              _didIteratorError7 = false;
              _iteratorError7 = undefined;
              _context8.prev = 20;
              _iterator7 = indexes[Symbol.iterator]();

            case 22:
              if (_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done) {
                _context8.next = 46;
                break;
              }

              index = _step7.value;
              _iteratorNormalCompletion9 = true;
              _didIteratorError9 = false;
              _iteratorError9 = undefined;
              _context8.prev = 27;

              for (_iterator9 = index.fields[Symbol.iterator](); !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
                field = _step9.value;

                if (index.unique !== void 0) {
                  data[field.attribute].unique = index.unique;
                }
              }

              _context8.next = 35;
              break;

            case 31:
              _context8.prev = 31;
              _context8.t0 = _context8["catch"](27);
              _didIteratorError9 = true;
              _iteratorError9 = _context8.t0;

            case 35:
              _context8.prev = 35;
              _context8.prev = 36;

              if (!_iteratorNormalCompletion9 && _iterator9["return"] != null) {
                _iterator9["return"]();
              }

            case 38:
              _context8.prev = 38;

              if (!_didIteratorError9) {
                _context8.next = 41;
                break;
              }

              throw _iteratorError9;

            case 41:
              return _context8.finish(38);

            case 42:
              return _context8.finish(35);

            case 43:
              _iteratorNormalCompletion7 = true;
              _context8.next = 22;
              break;

            case 46:
              _context8.next = 52;
              break;

            case 48:
              _context8.prev = 48;
              _context8.t1 = _context8["catch"](20);
              _didIteratorError7 = true;
              _iteratorError7 = _context8.t1;

            case 52:
              _context8.prev = 52;
              _context8.prev = 53;

              if (!_iteratorNormalCompletion7 && _iterator7["return"] != null) {
                _iterator7["return"]();
              }

            case 55:
              _context8.prev = 55;

              if (!_didIteratorError7) {
                _context8.next = 58;
                break;
              }

              throw _iteratorError7;

            case 58:
              return _context8.finish(55);

            case 59:
              return _context8.finish(52);

            case 60:
              _context8.next = 62;
              return regeneratorRuntime.awrap(this.getForeignKeyReferencesForTable(tableName, options));

            case 62:
              foreignKeys = _context8.sent;
              _iteratorNormalCompletion8 = true;
              _didIteratorError8 = false;
              _iteratorError8 = undefined;
              _context8.prev = 66;

              for (_iterator8 = foreignKeys[Symbol.iterator](); !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
                foreignKey = _step8.value;
                data[foreignKey.columnName].references = {
                  model: foreignKey.referencedTableName,
                  key: foreignKey.referencedColumnName
                };
              }

              _context8.next = 74;
              break;

            case 70:
              _context8.prev = 70;
              _context8.t2 = _context8["catch"](66);
              _didIteratorError8 = true;
              _iteratorError8 = _context8.t2;

            case 74:
              _context8.prev = 74;
              _context8.prev = 75;

              if (!_iteratorNormalCompletion8 && _iterator8["return"] != null) {
                _iterator8["return"]();
              }

            case 77:
              _context8.prev = 77;

              if (!_didIteratorError8) {
                _context8.next = 80;
                break;
              }

              throw _iteratorError8;

            case 80:
              return _context8.finish(77);

            case 81:
              return _context8.finish(74);

            case 82:
              return _context8.abrupt("return", data);

            case 85:
              _context8.prev = 85;
              _context8.t3 = _context8["catch"](7);

              if (!(_context8.t3.original && _context8.t3.original.code === "ER_NO_SUCH_TABLE")) {
                _context8.next = 89;
                break;
              }

              throw new Error("No description found for \"".concat(tableName, "\" table. Check the table name and schema; remember, they _are_ case sensitive."));

            case 89:
              throw _context8.t3;

            case 90:
            case "end":
              return _context8.stop();
          }
        }
      }, null, this, [[7, 85], [20, 48, 52, 60], [27, 31, 35, 43], [36,, 38, 42], [53,, 55, 59], [66, 70, 74, 82], [75,, 77, 81]]);
    }
  }]);

  return SQLiteQueryInterface;
}(QueryInterface);

exports.SQLiteQueryInterface = SQLiteQueryInterface;
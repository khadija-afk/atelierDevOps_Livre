"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.daysInYear = daysInYear;
exports.getIsLeapYear = getIsLeapYear;
Object.defineProperty(exports, "isLeapYear", {
  enumerable: true,
  get: function get() {
    return _isLeapYear.isLeapYear;
  }
});
exports.getSetYear = void 0;

var _getSet = require("../moment/get-set");

var _format = require("../format/format");

var _regex = require("../parse/regex");

var _token = require("../parse/token");

var _isLeapYear = require("../utils/is-leap-year");

var _hooks = require("../utils/hooks");

var _constants = require("./constants");

var _toInt = _interopRequireDefault(require("../utils/to-int"));

var _zeroFill = _interopRequireDefault(require("../utils/zero-fill"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

// FORMATTING
(0, _format.addFormatToken)('Y', 0, 0, function () {
  var y = this.year();
  return y <= 9999 ? (0, _zeroFill["default"])(y, 4) : '+' + y;
});
(0, _format.addFormatToken)(0, ['YY', 2], 0, function () {
  return this.year() % 100;
});
(0, _format.addFormatToken)(0, ['YYYY', 4], 0, 'year');
(0, _format.addFormatToken)(0, ['YYYYY', 5], 0, 'year');
(0, _format.addFormatToken)(0, ['YYYYYY', 6, true], 0, 'year'); // PARSING

(0, _regex.addRegexToken)('Y', _regex.matchSigned);
(0, _regex.addRegexToken)('YY', _regex.match1to2, _regex.match2);
(0, _regex.addRegexToken)('YYYY', _regex.match1to4, _regex.match4);
(0, _regex.addRegexToken)('YYYYY', _regex.match1to6, _regex.match6);
(0, _regex.addRegexToken)('YYYYYY', _regex.match1to6, _regex.match6);
(0, _token.addParseToken)(['YYYYY', 'YYYYYY'], _constants.YEAR);
(0, _token.addParseToken)('YYYY', function (input, array) {
  array[_constants.YEAR] = input.length === 2 ? _hooks.hooks.parseTwoDigitYear(input) : (0, _toInt["default"])(input);
});
(0, _token.addParseToken)('YY', function (input, array) {
  array[_constants.YEAR] = _hooks.hooks.parseTwoDigitYear(input);
});
(0, _token.addParseToken)('Y', function (input, array) {
  array[_constants.YEAR] = parseInt(input, 10);
}); // HELPERS

function daysInYear(year) {
  return (0, _isLeapYear.isLeapYear)(year) ? 366 : 365;
}

// HOOKS
_hooks.hooks.parseTwoDigitYear = function (input) {
  return (0, _toInt["default"])(input) + ((0, _toInt["default"])(input) > 68 ? 1900 : 2000);
}; // MOMENTS


var getSetYear = (0, _getSet.makeGetSet)('FullYear', true);
exports.getSetYear = getSetYear;

function getIsLeapYear() {
  return (0, _isLeapYear.isLeapYear)(this.year());
}
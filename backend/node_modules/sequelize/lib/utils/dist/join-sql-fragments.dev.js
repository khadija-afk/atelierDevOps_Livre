"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var __defProp = Object.defineProperty;

var __defNormalProp = function __defNormalProp(obj, key, value) {
  return key in obj ? __defProp(obj, key, {
    enumerable: true,
    configurable: true,
    writable: true,
    value: value
  }) : obj[key] = value;
};

var __markAsModule = function __markAsModule(target) {
  return __defProp(target, "__esModule", {
    value: true
  });
};

var __export = function __export(target, all) {
  __markAsModule(target);

  for (var name in all) {
    __defProp(target, name, {
      get: all[name],
      enumerable: true
    });
  }
};

var __publicField = function __publicField(obj, key, value) {
  __defNormalProp(obj, _typeof(key) !== "symbol" ? key + "" : key, value);

  return value;
};

__export(exports, {
  JoinSQLFragmentsError: function JoinSQLFragmentsError() {
    return _JoinSQLFragmentsError;
  },
  joinSQLFragments: function joinSQLFragments() {
    return _joinSQLFragments;
  }
});

function doesNotWantLeadingSpace(str) {
  return /^[;,)]/.test(str);
}

function doesNotWantTrailingSpace(str) {
  return /\($/.test(str);
}

function singleSpaceJoinHelper(parts) {
  return parts.reduce(function (_ref, part) {
    var skipNextLeadingSpace = _ref.skipNextLeadingSpace,
        result = _ref.result;

    if (skipNextLeadingSpace || doesNotWantLeadingSpace(part)) {
      result += part.trim();
    } else {
      result += " ".concat(part.trim());
    }

    return {
      skipNextLeadingSpace: doesNotWantTrailingSpace(part),
      result: result
    };
  }, {
    skipNextLeadingSpace: true,
    result: ""
  }).result;
}

function _joinSQLFragments(array) {
  if (array.length === 0) return "";
  var truthyArray = array.filter(function (x) {
    return !!x;
  });
  var flattenedArray = truthyArray.map(function (fragment) {
    if (Array.isArray(fragment)) {
      return _joinSQLFragments(fragment);
    }

    return fragment;
  });
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = flattenedArray[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var fragment = _step.value;

      if (fragment && typeof fragment !== "string") {
        throw new _JoinSQLFragmentsError(flattenedArray, fragment, "Tried to construct a SQL string with a non-string, non-falsy fragment (".concat(fragment, ")."));
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  var trimmedArray = flattenedArray.map(function (x) {
    return x.trim();
  });
  var nonEmptyStringArray = trimmedArray.filter(function (x) {
    return x !== "";
  });
  return singleSpaceJoinHelper(nonEmptyStringArray);
}

var _JoinSQLFragmentsError =
/*#__PURE__*/
function (_TypeError) {
  _inherits(_JoinSQLFragmentsError, _TypeError);

  function _JoinSQLFragmentsError(args, fragment, message) {
    var _this;

    _classCallCheck(this, _JoinSQLFragmentsError);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(_JoinSQLFragmentsError).call(this, message));

    __publicField(_assertThisInitialized(_this), "args");

    __publicField(_assertThisInitialized(_this), "fragment");

    _this.args = args;
    _this.fragment = fragment;
    _this.name = "JoinSQLFragmentsError";
    return _this;
  }

  return _JoinSQLFragmentsError;
}(_wrapNativeSuper(TypeError));
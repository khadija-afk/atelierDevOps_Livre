"use strict";

var _OperatorMap;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;

var __defNormalProp = function __defNormalProp(obj, key, value) {
  return key in obj ? __defProp(obj, key, {
    enumerable: true,
    configurable: true,
    writable: true,
    value: value
  }) : obj[key] = value;
};

var __spreadValues = function __spreadValues(a, b) {
  for (var prop in b || (b = {})) {
    if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);
  }

  if (__getOwnPropSymbols) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = __getOwnPropSymbols(b)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var prop = _step.value;
        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }

  return a;
};

var _ = require("lodash");

var Op = require("../../../operators");

var Utils = require("../../../utils");

var OperatorHelpers = {
  OperatorMap: (_OperatorMap = {}, _defineProperty(_OperatorMap, Op.eq, "="), _defineProperty(_OperatorMap, Op.ne, "!="), _defineProperty(_OperatorMap, Op.gte, ">="), _defineProperty(_OperatorMap, Op.gt, ">"), _defineProperty(_OperatorMap, Op.lte, "<="), _defineProperty(_OperatorMap, Op.lt, "<"), _defineProperty(_OperatorMap, Op.not, "IS NOT"), _defineProperty(_OperatorMap, Op.is, "IS"), _defineProperty(_OperatorMap, Op["in"], "IN"), _defineProperty(_OperatorMap, Op.notIn, "NOT IN"), _defineProperty(_OperatorMap, Op.like, "LIKE"), _defineProperty(_OperatorMap, Op.notLike, "NOT LIKE"), _defineProperty(_OperatorMap, Op.iLike, "ILIKE"), _defineProperty(_OperatorMap, Op.notILike, "NOT ILIKE"), _defineProperty(_OperatorMap, Op.startsWith, "LIKE"), _defineProperty(_OperatorMap, Op.endsWith, "LIKE"), _defineProperty(_OperatorMap, Op.substring, "LIKE"), _defineProperty(_OperatorMap, Op.regexp, "~"), _defineProperty(_OperatorMap, Op.notRegexp, "!~"), _defineProperty(_OperatorMap, Op.iRegexp, "~*"), _defineProperty(_OperatorMap, Op.notIRegexp, "!~*"), _defineProperty(_OperatorMap, Op.between, "BETWEEN"), _defineProperty(_OperatorMap, Op.notBetween, "NOT BETWEEN"), _defineProperty(_OperatorMap, Op.overlap, "&&"), _defineProperty(_OperatorMap, Op.contains, "@>"), _defineProperty(_OperatorMap, Op.contained, "<@"), _defineProperty(_OperatorMap, Op.adjacent, "-|-"), _defineProperty(_OperatorMap, Op.strictLeft, "<<"), _defineProperty(_OperatorMap, Op.strictRight, ">>"), _defineProperty(_OperatorMap, Op.noExtendRight, "&<"), _defineProperty(_OperatorMap, Op.noExtendLeft, "&>"), _defineProperty(_OperatorMap, Op.any, "ANY"), _defineProperty(_OperatorMap, Op.all, "ALL"), _defineProperty(_OperatorMap, Op.and, " AND "), _defineProperty(_OperatorMap, Op.or, " OR "), _defineProperty(_OperatorMap, Op.col, "COL"), _defineProperty(_OperatorMap, Op.placeholder, "$$PLACEHOLDER$$"), _defineProperty(_OperatorMap, Op.match, "@@"), _OperatorMap),
  OperatorsAliasMap: {},
  setOperatorsAliases: function setOperatorsAliases(aliases) {
    if (!aliases || _.isEmpty(aliases)) {
      this.OperatorsAliasMap = false;
    } else {
      this.OperatorsAliasMap = __spreadValues({}, aliases);
    }
  },
  _replaceAliases: function _replaceAliases(orig) {
    var _this = this;

    var obj = {};

    if (!this.OperatorsAliasMap) {
      return orig;
    }

    Utils.getOperators(orig).forEach(function (op) {
      var item = orig[op];

      if (_.isPlainObject(item)) {
        obj[op] = _this._replaceAliases(item);
      } else {
        obj[op] = item;
      }
    });

    _.forOwn(orig, function (item, prop) {
      prop = _this.OperatorsAliasMap[prop] || prop;

      if (_.isPlainObject(item)) {
        item = _this._replaceAliases(item);
      }

      obj[prop] = item;
    });

    return obj;
  }
};
module.exports = OperatorHelpers;
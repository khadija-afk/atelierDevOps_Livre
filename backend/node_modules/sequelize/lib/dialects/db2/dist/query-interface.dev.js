"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;

var __defNormalProp = function __defNormalProp(obj, key, value) {
  return key in obj ? __defProp(obj, key, {
    enumerable: true,
    configurable: true,
    writable: true,
    value: value
  }) : obj[key] = value;
};

var __spreadValues = function __spreadValues(a, b) {
  for (var prop in b || (b = {})) {
    if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);
  }

  if (__getOwnPropSymbols) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = __getOwnPropSymbols(b)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var prop = _step.value;
        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }

  return a;
};

var __spreadProps = function __spreadProps(a, b) {
  return __defProps(a, __getOwnPropDescs(b));
};

var _ = require("lodash");

var Utils = require("../../utils");

var Op = require("../../operators");

var _require = require("../abstract/query-interface"),
    QueryInterface = _require.QueryInterface;

var QueryTypes = require("../../query-types");

var Db2QueryInterface =
/*#__PURE__*/
function (_QueryInterface) {
  _inherits(Db2QueryInterface, _QueryInterface);

  function Db2QueryInterface() {
    _classCallCheck(this, Db2QueryInterface);

    return _possibleConstructorReturn(this, _getPrototypeOf(Db2QueryInterface).apply(this, arguments));
  }

  _createClass(Db2QueryInterface, [{
    key: "getForeignKeyReferencesForTable",
    value: function getForeignKeyReferencesForTable(tableName, options) {
      var queryOptions, query;
      return regeneratorRuntime.async(function getForeignKeyReferencesForTable$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              queryOptions = __spreadProps(__spreadValues({}, options), {
                type: QueryTypes.FOREIGNKEYS
              });
              query = this.queryGenerator.getForeignKeysQuery(tableName, this.sequelize.config.username.toUpperCase());
              return _context.abrupt("return", this.sequelize.query(query, queryOptions));

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "upsert",
    value: function upsert(tableName, insertValues, updateValues, where, options) {
      var model, wheres, attributes, indexes, indexFields, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, index, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, field, sql, result;

      return regeneratorRuntime.async(function upsert$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              options = __spreadValues({}, options);
              model = options.model;
              wheres = [];
              attributes = Object.keys(insertValues);
              indexes = [];
              options = _.clone(options);

              if (!Utils.isWhereEmpty(where)) {
                wheres.push(where);
              }

              indexes = _.map(model.uniqueKeys, function (value) {
                return value.fields;
              });

              model._indexes.forEach(function (value) {
                if (value.unique) {
                  indexFields = value.fields.map(function (field) {
                    if (_.isPlainObject(field)) {
                      return field.attribute;
                    }

                    return field;
                  });
                  indexes.push(indexFields);
                }
              });

              _iteratorNormalCompletion2 = true;
              _didIteratorError2 = false;
              _iteratorError2 = undefined;
              _context2.prev = 12;
              _iterator2 = indexes[Symbol.iterator]();

            case 14:
              if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                _context2.next = 41;
                break;
              }

              index = _step2.value;

              if (!(_.intersection(attributes, index).length === index.length)) {
                _context2.next = 38;
                break;
              }

              where = {};
              _iteratorNormalCompletion3 = true;
              _didIteratorError3 = false;
              _iteratorError3 = undefined;
              _context2.prev = 21;

              for (_iterator3 = index[Symbol.iterator](); !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                field = _step3.value;
                where[field] = insertValues[field];
              }

              _context2.next = 29;
              break;

            case 25:
              _context2.prev = 25;
              _context2.t0 = _context2["catch"](21);
              _didIteratorError3 = true;
              _iteratorError3 = _context2.t0;

            case 29:
              _context2.prev = 29;
              _context2.prev = 30;

              if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                _iterator3["return"]();
              }

            case 32:
              _context2.prev = 32;

              if (!_didIteratorError3) {
                _context2.next = 35;
                break;
              }

              throw _iteratorError3;

            case 35:
              return _context2.finish(32);

            case 36:
              return _context2.finish(29);

            case 37:
              wheres.push(where);

            case 38:
              _iteratorNormalCompletion2 = true;
              _context2.next = 14;
              break;

            case 41:
              _context2.next = 47;
              break;

            case 43:
              _context2.prev = 43;
              _context2.t1 = _context2["catch"](12);
              _didIteratorError2 = true;
              _iteratorError2 = _context2.t1;

            case 47:
              _context2.prev = 47;
              _context2.prev = 48;

              if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                _iterator2["return"]();
              }

            case 50:
              _context2.prev = 50;

              if (!_didIteratorError2) {
                _context2.next = 53;
                break;
              }

              throw _iteratorError2;

            case 53:
              return _context2.finish(50);

            case 54:
              return _context2.finish(47);

            case 55:
              where = _defineProperty({}, Op.or, wheres);
              options.type = QueryTypes.UPSERT;
              options.raw = true;
              sql = this.queryGenerator.upsertQuery(tableName, insertValues, updateValues, where, model, options);
              _context2.next = 61;
              return regeneratorRuntime.awrap(this.sequelize.query(sql, options));

            case 61:
              result = _context2.sent;
              return _context2.abrupt("return", [result, void 0]);

            case 63:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this, [[12, 43, 47, 55], [21, 25, 29, 37], [30,, 32, 36], [48,, 50, 54]]);
    }
  }, {
    key: "createTable",
    value: function createTable(tableName, attributes, options, model) {
      var _this = this;

      var sql;
      return regeneratorRuntime.async(function createTable$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              sql = "";
              options = __spreadValues({}, options);

              if (options && options.uniqueKeys) {
                _.forOwn(options.uniqueKeys, function (uniqueKey) {
                  if (uniqueKey.customIndex === void 0) {
                    uniqueKey.customIndex = true;
                  }
                });
              }

              if (model) {
                options.uniqueKeys = options.uniqueKeys || model.uniqueKeys;
              }

              attributes = _.mapValues(attributes, function (attribute) {
                return _this.sequelize.normalizeAttribute(attribute);
              });

              if (options.indexes) {
                options.indexes.forEach(function (fields) {
                  var fieldArr = fields.fields;

                  if (fieldArr.length === 1) {
                    fieldArr.forEach(function (field) {
                      for (var property in attributes) {
                        if (field === attributes[property].field) {
                          attributes[property].unique = true;
                        }
                      }
                    });
                  }
                });
              }

              if (options.alter) {
                if (options.indexes) {
                  options.indexes.forEach(function (fields) {
                    var fieldArr = fields.fields;

                    if (fieldArr.length === 1) {
                      fieldArr.forEach(function (field) {
                        for (var property in attributes) {
                          if (field === attributes[property].field && attributes[property].unique) {
                            attributes[property].unique = false;
                          }
                        }
                      });
                    }
                  });
                }
              }

              if (!tableName.schema && (options.schema || !!model && model._schema)) {
                tableName = this.queryGenerator.addSchema({
                  tableName: tableName,
                  _schema: !!model && model._schema || options.schema
                });
              }

              attributes = this.queryGenerator.attributesToSQL(attributes, {
                table: tableName,
                context: "createTable",
                withoutForeignKeyConstraints: options.withoutForeignKeyConstraints
              });
              sql = this.queryGenerator.createTableQuery(tableName, attributes, options);
              _context3.next = 12;
              return regeneratorRuntime.awrap(this.sequelize.query(sql, options));

            case 12:
              return _context3.abrupt("return", _context3.sent);

            case 13:
            case "end":
              return _context3.stop();
          }
        }
      }, null, this);
    }
  }]);

  return Db2QueryInterface;
}(QueryInterface);

exports.Db2QueryInterface = Db2QueryInterface;
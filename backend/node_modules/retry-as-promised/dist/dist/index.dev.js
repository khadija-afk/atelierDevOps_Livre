'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.retryAsPromised = exports.TimeoutError = void 0;

var TimeoutError =
/*#__PURE__*/
function (_Error) {
  _inherits(TimeoutError, _Error);

  function TimeoutError(message, previousError) {
    var _this;

    _classCallCheck(this, TimeoutError);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(TimeoutError).call(this, message));
    _this.name = "TimeoutError";
    _this.previous = previousError;
    return _this;
  }

  return TimeoutError;
}(_wrapNativeSuper(Error));

exports.TimeoutError = TimeoutError;

function matches(match, err) {
  if (typeof match === 'function') {
    try {
      if (err instanceof match) return true;
    } catch (_) {
      return !!match(err);
    }
  }

  if (match === err.toString()) return true;
  if (match === err.message) return true;
  return match instanceof RegExp && (match.test(err.message) || match.test(err.toString()));
}

function retryAsPromised(callback, optionsInput) {
  if (!callback || !optionsInput) {
    throw new Error('retry-as-promised must be passed a callback and a options set');
  }

  optionsInput = typeof optionsInput === "number" ? {
    max: optionsInput
  } : optionsInput;
  var options = {
    $current: "$current" in optionsInput ? optionsInput.$current : 1,
    max: optionsInput.max,
    timeout: optionsInput.timeout || undefined,
    match: optionsInput.match ? Array.isArray(optionsInput.match) ? optionsInput.match : [optionsInput.match] : [],
    backoffBase: optionsInput.backoffBase === undefined ? 100 : optionsInput.backoffBase,
    backoffExponent: optionsInput.backoffExponent || 1.1,
    report: optionsInput.report,
    name: optionsInput.name || callback.name || 'unknown'
  };
  if (options.match && !Array.isArray(options.match)) options.match = [options.match];
  if (options.report) options.report('Trying ' + options.name + ' #' + options.$current + ' at ' + new Date().toLocaleTimeString(), options);
  return new Promise(function (resolve, reject) {
    var timeout;
    var backoffTimeout;
    var lastError;

    if (options.timeout) {
      timeout = setTimeout(function () {
        if (backoffTimeout) clearTimeout(backoffTimeout);
        reject(new TimeoutError(options.name + ' timed out', lastError));
      }, options.timeout);
    }

    Promise.resolve(callback({
      current: options.$current
    })).then(resolve).then(function () {
      if (timeout) clearTimeout(timeout);
      if (backoffTimeout) clearTimeout(backoffTimeout);
    })["catch"](function (err) {
      if (timeout) clearTimeout(timeout);
      if (backoffTimeout) clearTimeout(backoffTimeout);
      lastError = err;
      if (options.report) options.report(err && err.toString() || err, options, err); // Should not retry if max has been reached

      var shouldRetry = options.$current < options.max;
      if (!shouldRetry) return reject(err);
      shouldRetry = options.match.length === 0 || options.match.some(function (match) {
        return matches(match, err);
      });
      if (!shouldRetry) return reject(err);
      var retryDelay = options.backoffBase * Math.pow(options.backoffExponent, options.$current - 1); // Do some accounting

      options.$current++;
      if (options.report) options.report("Retrying ".concat(options.name, " (").concat(options.$current, ")"), options);

      if (retryDelay) {
        // Use backoff function to ease retry rate
        if (options.report) options.report("Delaying retry of ".concat(options.name, " by ").concat(retryDelay), options);
        backoffTimeout = setTimeout(function () {
          retryAsPromised(callback, options).then(resolve)["catch"](reject);
        }, retryDelay);
      } else {
        retryAsPromised(callback, options).then(resolve)["catch"](reject);
      }
    });
  });
}

exports.retryAsPromised = retryAsPromised;
;
exports["default"] = retryAsPromised;
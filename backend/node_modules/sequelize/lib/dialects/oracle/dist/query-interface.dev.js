"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;

var __defNormalProp = function __defNormalProp(obj, key, value) {
  return key in obj ? __defProp(obj, key, {
    enumerable: true,
    configurable: true,
    writable: true,
    value: value
  }) : obj[key] = value;
};

var __spreadValues = function __spreadValues(a, b) {
  for (var prop in b || (b = {})) {
    if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);
  }

  if (__getOwnPropSymbols) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = __getOwnPropSymbols(b)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var prop = _step.value;
        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }

  return a;
};

var __markAsModule = function __markAsModule(target) {
  return __defProp(target, "__esModule", {
    value: true
  });
};

var __export = function __export(target, all) {
  __markAsModule(target);

  for (var name in all) {
    __defProp(target, name, {
      get: all[name],
      enumerable: true
    });
  }
};

__export(exports, {
  OracleQueryInterface: function OracleQueryInterface() {
    return _OracleQueryInterface;
  }
});

var _require = require("../abstract/query-interface"),
    QueryInterface = _require.QueryInterface;

var QueryTypes = require("../../query-types");

var _ = require("lodash");

var _OracleQueryInterface =
/*#__PURE__*/
function (_QueryInterface) {
  _inherits(_OracleQueryInterface, _QueryInterface);

  function _OracleQueryInterface() {
    _classCallCheck(this, _OracleQueryInterface);

    return _possibleConstructorReturn(this, _getPrototypeOf(_OracleQueryInterface).apply(this, arguments));
  }

  _createClass(_OracleQueryInterface, [{
    key: "upsert",
    value: function upsert(tableName, insertValues, updateValues, where, options) {
      var model, primaryKeys, uniqueKeys, indexKeys, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _loop, _iterator2, _step2, _ret, whereHasNull, sql;

      return regeneratorRuntime.async(function upsert$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              options = __spreadValues({}, options);
              model = options.model;
              primaryKeys = Object.values(model.primaryKeys).map(function (item) {
                return item.field;
              });
              uniqueKeys = Object.values(model.uniqueKeys).filter(function (c) {
                return c.fields.length > 0;
              }).map(function (c) {
                return c.fields;
              });
              indexKeys = Object.values(model._indexes).filter(function (c) {
                return c.unique && c.fields.length > 0;
              }).map(function (c) {
                return c.fields;
              });
              options.type = QueryTypes.UPSERT;
              options.updateOnDuplicate = Object.keys(updateValues);
              options.upsertKeys = [];
              _iteratorNormalCompletion2 = true;
              _didIteratorError2 = false;
              _iteratorError2 = undefined;
              _context.prev = 11;

              _loop = function _loop() {
                var field = _step2.value;
                var uniqueKey = uniqueKeys.find(function (fields) {
                  return fields.includes(field);
                });

                if (uniqueKey) {
                  options.upsertKeys = uniqueKey;
                  return "break";
                }

                var indexKey = indexKeys.find(function (fields) {
                  return fields.includes(field);
                });

                if (indexKey) {
                  options.upsertKeys = indexKey;
                  return "break";
                }
              };

              _iterator2 = options.updateOnDuplicate[Symbol.iterator]();

            case 14:
              if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                _context.next = 21;
                break;
              }

              _ret = _loop();

              if (!(_ret === "break")) {
                _context.next = 18;
                break;
              }

              return _context.abrupt("break", 21);

            case 18:
              _iteratorNormalCompletion2 = true;
              _context.next = 14;
              break;

            case 21:
              _context.next = 27;
              break;

            case 23:
              _context.prev = 23;
              _context.t0 = _context["catch"](11);
              _didIteratorError2 = true;
              _iteratorError2 = _context.t0;

            case 27:
              _context.prev = 27;
              _context.prev = 28;

              if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                _iterator2["return"]();
              }

            case 30:
              _context.prev = 30;

              if (!_didIteratorError2) {
                _context.next = 33;
                break;
              }

              throw _iteratorError2;

            case 33:
              return _context.finish(30);

            case 34:
              return _context.finish(27);

            case 35:
              if (options.upsertKeys.length === 0 || _.intersection(options.updateOnDuplicate, primaryKeys).length) {
                options.upsertKeys = primaryKeys;
              }

              options.upsertKeys = _.uniq(options.upsertKeys);
              whereHasNull = false;
              primaryKeys.forEach(function (element) {
                if (where[element] === null) {
                  whereHasNull = true;
                }
              });

              if (whereHasNull === true) {
                where = options.upsertKeys.reduce(function (result, attribute) {
                  result[attribute] = insertValues[attribute];
                  return result;
                }, {});
              }

              sql = this.queryGenerator.upsertQuery(tableName, insertValues, updateValues, where, model, options);

              if (sql.bind) {
                options.bind = void 0;
              }

              _context.next = 44;
              return regeneratorRuntime.awrap(this.sequelize.query(sql, options));

            case 44:
              return _context.abrupt("return", _context.sent);

            case 45:
            case "end":
              return _context.stop();
          }
        }
      }, null, this, [[11, 23, 27, 35], [28,, 30, 34]]);
    }
  }]);

  return _OracleQueryInterface;
}(QueryInterface);
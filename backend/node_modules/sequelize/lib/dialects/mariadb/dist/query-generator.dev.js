"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;

var __defNormalProp = function __defNormalProp(obj, key, value) {
  return key in obj ? __defProp(obj, key, {
    enumerable: true,
    configurable: true,
    writable: true,
    value: value
  }) : obj[key] = value;
};

var __spreadValues = function __spreadValues(a, b) {
  for (var prop in b || (b = {})) {
    if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);
  }

  if (__getOwnPropSymbols) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = __getOwnPropSymbols(b)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var prop = _step.value;
        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }

  return a;
};

var MySQLQueryGenerator = require("../mysql/query-generator");

var Utils = require("./../../utils");

var MariaDBQueryGenerator =
/*#__PURE__*/
function (_MySQLQueryGenerator) {
  _inherits(MariaDBQueryGenerator, _MySQLQueryGenerator);

  function MariaDBQueryGenerator() {
    _classCallCheck(this, MariaDBQueryGenerator);

    return _possibleConstructorReturn(this, _getPrototypeOf(MariaDBQueryGenerator).apply(this, arguments));
  }

  _createClass(MariaDBQueryGenerator, [{
    key: "createSchema",
    value: function createSchema(schema, options) {
      options = __spreadValues({
        charset: null,
        collate: null
      }, options);
      return Utils.joinSQLFragments(["CREATE SCHEMA IF NOT EXISTS", this.quoteIdentifier(schema), options.charset && "DEFAULT CHARACTER SET ".concat(this.escape(options.charset)), options.collate && "DEFAULT COLLATE ".concat(this.escape(options.collate)), ";"]);
    }
  }, {
    key: "dropSchema",
    value: function dropSchema(schema) {
      return "DROP SCHEMA IF EXISTS ".concat(this.quoteIdentifier(schema), ";");
    }
  }, {
    key: "showSchemasQuery",
    value: function showSchemasQuery(options) {
      var schemasToSkip = ["'MYSQL'", "'INFORMATION_SCHEMA'", "'PERFORMANCE_SCHEMA'"];

      if (options.skip && Array.isArray(options.skip) && options.skip.length > 0) {
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = options.skip[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var schemaName = _step2.value;
            schemasToSkip.push(this.escape(schemaName));
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
              _iterator2["return"]();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }
      }

      return Utils.joinSQLFragments(["SELECT SCHEMA_NAME as schema_name", "FROM INFORMATION_SCHEMA.SCHEMATA", "WHERE SCHEMA_NAME NOT IN (".concat(schemasToSkip.join(", "), ")"), ";"]);
    }
  }, {
    key: "showTablesQuery",
    value: function showTablesQuery(database) {
      var query = "SELECT TABLE_NAME, TABLE_SCHEMA FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE'";

      if (database) {
        query += " AND TABLE_SCHEMA = ".concat(this.escape(database));
      } else {
        query += " AND TABLE_SCHEMA NOT IN ('MYSQL', 'INFORMATION_SCHEMA', 'PERFORMANCE_SCHEMA')";
      }

      return "".concat(query, ";");
    }
  }, {
    key: "quoteIdentifier",
    value: function quoteIdentifier(identifier, force) {
      return Utils.addTicks(Utils.removeTicks(identifier, "`"), "`");
    }
  }]);

  return MariaDBQueryGenerator;
}(MySQLQueryGenerator);

module.exports = MariaDBQueryGenerator;
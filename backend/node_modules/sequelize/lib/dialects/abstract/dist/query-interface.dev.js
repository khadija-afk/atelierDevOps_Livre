"use strict";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;

var __defNormalProp = function __defNormalProp(obj, key, value) {
  return key in obj ? __defProp(obj, key, {
    enumerable: true,
    configurable: true,
    writable: true,
    value: value
  }) : obj[key] = value;
};

var __spreadValues = function __spreadValues(a, b) {
  for (var prop in b || (b = {})) {
    if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);
  }

  if (__getOwnPropSymbols) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = __getOwnPropSymbols(b)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var prop = _step.value;
        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }

  return a;
};

var __spreadProps = function __spreadProps(a, b) {
  return __defProps(a, __getOwnPropDescs(b));
};

var _ = require("lodash");

var Utils = require("../../utils");

var DataTypes = require("../../data-types");

var Transaction = require("../../transaction");

var QueryTypes = require("../../query-types");

var QueryInterface =
/*#__PURE__*/
function () {
  function QueryInterface(sequelize, queryGenerator) {
    _classCallCheck(this, QueryInterface);

    this.sequelize = sequelize;
    this.queryGenerator = queryGenerator;
  }

  _createClass(QueryInterface, [{
    key: "createDatabase",
    value: function createDatabase(database, options) {
      var sql;
      return regeneratorRuntime.async(function createDatabase$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              options = options || {};
              sql = this.queryGenerator.createDatabaseQuery(database, options);
              _context.next = 4;
              return regeneratorRuntime.awrap(this.sequelize.query(sql, options));

            case 4:
              return _context.abrupt("return", _context.sent);

            case 5:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "dropDatabase",
    value: function dropDatabase(database, options) {
      var sql;
      return regeneratorRuntime.async(function dropDatabase$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              options = options || {};
              sql = this.queryGenerator.dropDatabaseQuery(database);
              _context2.next = 4;
              return regeneratorRuntime.awrap(this.sequelize.query(sql, options));

            case 4:
              return _context2.abrupt("return", _context2.sent);

            case 5:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "createSchema",
    value: function createSchema(schema, options) {
      var sql;
      return regeneratorRuntime.async(function createSchema$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              options = options || {};
              sql = this.queryGenerator.createSchema(schema);
              _context3.next = 4;
              return regeneratorRuntime.awrap(this.sequelize.query(sql, options));

            case 4:
              return _context3.abrupt("return", _context3.sent);

            case 5:
            case "end":
              return _context3.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "dropSchema",
    value: function dropSchema(schema, options) {
      var sql;
      return regeneratorRuntime.async(function dropSchema$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              options = options || {};
              sql = this.queryGenerator.dropSchema(schema);
              _context4.next = 4;
              return regeneratorRuntime.awrap(this.sequelize.query(sql, options));

            case 4:
              return _context4.abrupt("return", _context4.sent);

            case 5:
            case "end":
              return _context4.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "dropAllSchemas",
    value: function dropAllSchemas(options) {
      var _this = this;

      var schemas;
      return regeneratorRuntime.async(function dropAllSchemas$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              options = options || {};

              if (this.queryGenerator._dialect.supports.schemas) {
                _context5.next = 3;
                break;
              }

              return _context5.abrupt("return", this.sequelize.drop(options));

            case 3:
              _context5.next = 5;
              return regeneratorRuntime.awrap(this.showAllSchemas(options));

            case 5:
              schemas = _context5.sent;
              return _context5.abrupt("return", Promise.all(schemas.map(function (schemaName) {
                return _this.dropSchema(schemaName, options);
              })));

            case 7:
            case "end":
              return _context5.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "showAllSchemas",
    value: function showAllSchemas(options) {
      var showSchemasSql, schemaNames;
      return regeneratorRuntime.async(function showAllSchemas$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              options = __spreadProps(__spreadValues({}, options), {
                raw: true,
                type: this.sequelize.QueryTypes.SELECT
              });
              showSchemasSql = this.queryGenerator.showSchemasQuery(options);
              _context6.next = 4;
              return regeneratorRuntime.awrap(this.sequelize.query(showSchemasSql, options));

            case 4:
              schemaNames = _context6.sent;
              return _context6.abrupt("return", _.flatten(schemaNames.map(function (value) {
                return value.schema_name ? value.schema_name : value;
              })));

            case 6:
            case "end":
              return _context6.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "databaseVersion",
    value: function databaseVersion(options) {
      return regeneratorRuntime.async(function databaseVersion$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              _context7.next = 2;
              return regeneratorRuntime.awrap(this.sequelize.query(this.queryGenerator.versionQuery(), __spreadProps(__spreadValues({}, options), {
                type: QueryTypes.VERSION
              })));

            case 2:
              return _context7.abrupt("return", _context7.sent);

            case 3:
            case "end":
              return _context7.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "createTable",
    value: function createTable(tableName, attributes, options, model) {
      var _this2 = this;

      var sql;
      return regeneratorRuntime.async(function createTable$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              sql = "";
              options = __spreadValues({}, options);

              if (options && options.uniqueKeys) {
                _.forOwn(options.uniqueKeys, function (uniqueKey) {
                  if (uniqueKey.customIndex === void 0) {
                    uniqueKey.customIndex = true;
                  }
                });
              }

              if (model) {
                options.uniqueKeys = options.uniqueKeys || model.uniqueKeys;
              }

              attributes = _.mapValues(attributes, function (attribute) {
                return _this2.sequelize.normalizeAttribute(attribute);
              });
              _context8.next = 7;
              return regeneratorRuntime.awrap(this.ensureEnums(tableName, attributes, options, model));

            case 7:
              if (!tableName.schema && (options.schema || !!model && model._schema)) {
                tableName = this.queryGenerator.addSchema({
                  tableName: tableName,
                  _schema: !!model && model._schema || options.schema
                });
              }

              attributes = this.queryGenerator.attributesToSQL(attributes, {
                table: tableName,
                context: "createTable",
                withoutForeignKeyConstraints: options.withoutForeignKeyConstraints
              });
              sql = this.queryGenerator.createTableQuery(tableName, attributes, options);
              _context8.next = 12;
              return regeneratorRuntime.awrap(this.sequelize.query(sql, options));

            case 12:
              return _context8.abrupt("return", _context8.sent);

            case 13:
            case "end":
              return _context8.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "tableExists",
    value: function tableExists(tableName, options) {
      var sql, out;
      return regeneratorRuntime.async(function tableExists$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              sql = this.queryGenerator.tableExistsQuery(tableName);
              _context9.next = 3;
              return regeneratorRuntime.awrap(this.sequelize.query(sql, __spreadProps(__spreadValues({}, options), {
                type: QueryTypes.SHOWTABLES
              })));

            case 3:
              out = _context9.sent;
              return _context9.abrupt("return", out.length === 1);

            case 5:
            case "end":
              return _context9.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "dropTable",
    value: function dropTable(tableName, options) {
      var sql;
      return regeneratorRuntime.async(function dropTable$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              options = __spreadValues({}, options);
              options.cascade = options.cascade || options.force || false;
              sql = this.queryGenerator.dropTableQuery(tableName, options);
              _context10.next = 5;
              return regeneratorRuntime.awrap(this.sequelize.query(sql, options));

            case 5:
            case "end":
              return _context10.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "_dropAllTables",
    value: function _dropAllTables(tableNames, skip, options) {
      var _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, tableName;

      return regeneratorRuntime.async(function _dropAllTables$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              _iteratorNormalCompletion2 = true;
              _didIteratorError2 = false;
              _iteratorError2 = undefined;
              _context11.prev = 3;
              _iterator2 = tableNames[Symbol.iterator]();

            case 5:
              if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                _context11.next = 13;
                break;
              }

              tableName = _step2.value;

              if (skip.includes(tableName.tableName || tableName)) {
                _context11.next = 10;
                break;
              }

              _context11.next = 10;
              return regeneratorRuntime.awrap(this.dropTable(tableName, __spreadProps(__spreadValues({}, options), {
                cascade: true
              })));

            case 10:
              _iteratorNormalCompletion2 = true;
              _context11.next = 5;
              break;

            case 13:
              _context11.next = 19;
              break;

            case 15:
              _context11.prev = 15;
              _context11.t0 = _context11["catch"](3);
              _didIteratorError2 = true;
              _iteratorError2 = _context11.t0;

            case 19:
              _context11.prev = 19;
              _context11.prev = 20;

              if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                _iterator2["return"]();
              }

            case 22:
              _context11.prev = 22;

              if (!_didIteratorError2) {
                _context11.next = 25;
                break;
              }

              throw _iteratorError2;

            case 25:
              return _context11.finish(22);

            case 26:
              return _context11.finish(19);

            case 27:
            case "end":
              return _context11.stop();
          }
        }
      }, null, this, [[3, 15, 19, 27], [20,, 22, 26]]);
    }
  }, {
    key: "dropAllTables",
    value: function dropAllTables(options) {
      var skip, tableNames, foreignKeys, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, tableName, normalizedTableName, _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, foreignKey;

      return regeneratorRuntime.async(function dropAllTables$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              options = options || {};
              skip = options.skip || [];
              _context12.next = 4;
              return regeneratorRuntime.awrap(this.showAllTables(options));

            case 4:
              tableNames = _context12.sent;
              _context12.next = 7;
              return regeneratorRuntime.awrap(this.getForeignKeysForTables(tableNames, options));

            case 7:
              foreignKeys = _context12.sent;
              _iteratorNormalCompletion3 = true;
              _didIteratorError3 = false;
              _iteratorError3 = undefined;
              _context12.prev = 11;
              _iterator3 = tableNames[Symbol.iterator]();

            case 13:
              if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {
                _context12.next = 46;
                break;
              }

              tableName = _step3.value;
              normalizedTableName = tableName;

              if (_.isObject(tableName)) {
                normalizedTableName = "".concat(tableName.schema, ".").concat(tableName.tableName);
              }

              _iteratorNormalCompletion4 = true;
              _didIteratorError4 = false;
              _iteratorError4 = undefined;
              _context12.prev = 20;
              _iterator4 = foreignKeys[normalizedTableName][Symbol.iterator]();

            case 22:
              if (_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done) {
                _context12.next = 29;
                break;
              }

              foreignKey = _step4.value;
              _context12.next = 26;
              return regeneratorRuntime.awrap(this.sequelize.query(this.queryGenerator.dropForeignKeyQuery(tableName, foreignKey)));

            case 26:
              _iteratorNormalCompletion4 = true;
              _context12.next = 22;
              break;

            case 29:
              _context12.next = 35;
              break;

            case 31:
              _context12.prev = 31;
              _context12.t0 = _context12["catch"](20);
              _didIteratorError4 = true;
              _iteratorError4 = _context12.t0;

            case 35:
              _context12.prev = 35;
              _context12.prev = 36;

              if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
                _iterator4["return"]();
              }

            case 38:
              _context12.prev = 38;

              if (!_didIteratorError4) {
                _context12.next = 41;
                break;
              }

              throw _iteratorError4;

            case 41:
              return _context12.finish(38);

            case 42:
              return _context12.finish(35);

            case 43:
              _iteratorNormalCompletion3 = true;
              _context12.next = 13;
              break;

            case 46:
              _context12.next = 52;
              break;

            case 48:
              _context12.prev = 48;
              _context12.t1 = _context12["catch"](11);
              _didIteratorError3 = true;
              _iteratorError3 = _context12.t1;

            case 52:
              _context12.prev = 52;
              _context12.prev = 53;

              if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                _iterator3["return"]();
              }

            case 55:
              _context12.prev = 55;

              if (!_didIteratorError3) {
                _context12.next = 58;
                break;
              }

              throw _iteratorError3;

            case 58:
              return _context12.finish(55);

            case 59:
              return _context12.finish(52);

            case 60:
              _context12.next = 62;
              return regeneratorRuntime.awrap(this._dropAllTables(tableNames, skip, options));

            case 62:
            case "end":
              return _context12.stop();
          }
        }
      }, null, this, [[11, 48, 52, 60], [20, 31, 35, 43], [36,, 38, 42], [53,, 55, 59]]);
    }
  }, {
    key: "renameTable",
    value: function renameTable(before, after, options) {
      var sql;
      return regeneratorRuntime.async(function renameTable$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              options = options || {};
              sql = this.queryGenerator.renameTableQuery(before, after);
              _context13.next = 4;
              return regeneratorRuntime.awrap(this.sequelize.query(sql, options));

            case 4:
              return _context13.abrupt("return", _context13.sent);

            case 5:
            case "end":
              return _context13.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "showAllTables",
    value: function showAllTables(options) {
      var showTablesSql, tableNames;
      return regeneratorRuntime.async(function showAllTables$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              options = __spreadProps(__spreadValues({}, options), {
                raw: true,
                type: QueryTypes.SHOWTABLES
              });
              showTablesSql = this.queryGenerator.showTablesQuery(this.sequelize.config.database);
              _context14.next = 4;
              return regeneratorRuntime.awrap(this.sequelize.query(showTablesSql, options));

            case 4:
              tableNames = _context14.sent;
              return _context14.abrupt("return", _.flatten(tableNames));

            case 6:
            case "end":
              return _context14.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "describeTable",
    value: function describeTable(tableName, options) {
      var schema, schemaDelimiter, sql, data;
      return regeneratorRuntime.async(function describeTable$(_context15) {
        while (1) {
          switch (_context15.prev = _context15.next) {
            case 0:
              schema = null;
              schemaDelimiter = null;

              if (typeof options === "string") {
                schema = options;
              } else if (_typeof(options) === "object" && options !== null) {
                schema = options.schema || null;
                schemaDelimiter = options.schemaDelimiter || null;
              }

              if (_typeof(tableName) === "object" && tableName !== null) {
                schema = tableName.schema;
                tableName = tableName.tableName;
              }

              sql = this.queryGenerator.describeTableQuery(tableName, schema, schemaDelimiter);
              options = __spreadProps(__spreadValues({}, options), {
                type: QueryTypes.DESCRIBE
              });
              _context15.prev = 6;
              _context15.next = 9;
              return regeneratorRuntime.awrap(this.sequelize.query(sql, options));

            case 9:
              data = _context15.sent;

              if (!_.isEmpty(data)) {
                _context15.next = 12;
                break;
              }

              throw new Error("No description found for \"".concat(tableName, "\" table. Check the table name and schema; remember, they _are_ case sensitive."));

            case 12:
              return _context15.abrupt("return", data);

            case 15:
              _context15.prev = 15;
              _context15.t0 = _context15["catch"](6);

              if (!(_context15.t0.original && _context15.t0.original.code === "ER_NO_SUCH_TABLE")) {
                _context15.next = 19;
                break;
              }

              throw new Error("No description found for \"".concat(tableName, "\" table. Check the table name and schema; remember, they _are_ case sensitive."));

            case 19:
              throw _context15.t0;

            case 20:
            case "end":
              return _context15.stop();
          }
        }
      }, null, this, [[6, 15]]);
    }
  }, {
    key: "addColumn",
    value: function addColumn(table, key, attribute, options) {
      return regeneratorRuntime.async(function addColumn$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              if (!(!table || !key || !attribute)) {
                _context16.next = 2;
                break;
              }

              throw new Error("addColumn takes at least 3 arguments (table, attribute name, attribute definition)");

            case 2:
              options = options || {};
              attribute = this.sequelize.normalizeAttribute(attribute);
              _context16.next = 6;
              return regeneratorRuntime.awrap(this.sequelize.query(this.queryGenerator.addColumnQuery(table, key, attribute), options));

            case 6:
              return _context16.abrupt("return", _context16.sent);

            case 7:
            case "end":
              return _context16.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "removeColumn",
    value: function removeColumn(tableName, attributeName, options) {
      return regeneratorRuntime.async(function removeColumn$(_context17) {
        while (1) {
          switch (_context17.prev = _context17.next) {
            case 0:
              return _context17.abrupt("return", this.sequelize.query(this.queryGenerator.removeColumnQuery(tableName, attributeName), options));

            case 1:
            case "end":
              return _context17.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "normalizeAttribute",
    value: function normalizeAttribute(dataTypeOrOptions) {
      var attribute;

      if (Object.values(DataTypes).includes(dataTypeOrOptions)) {
        attribute = {
          type: dataTypeOrOptions,
          allowNull: true
        };
      } else {
        attribute = dataTypeOrOptions;
      }

      return this.sequelize.normalizeAttribute(attribute);
    }
  }, {
    key: "quoteIdentifier",
    value: function quoteIdentifier(identifier2, force) {
      return this.queryGenerator.quoteIdentifier(identifier2, force);
    }
  }, {
    key: "quoteIdentifiers",
    value: function quoteIdentifiers(identifiers) {
      return this.queryGenerator.quoteIdentifiers(identifiers);
    }
  }, {
    key: "changeColumn",
    value: function changeColumn(tableName, attributeName, dataTypeOrOptions, options) {
      var query, sql;
      return regeneratorRuntime.async(function changeColumn$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              options = options || {};
              query = this.queryGenerator.attributesToSQL(_defineProperty({}, attributeName, this.normalizeAttribute(dataTypeOrOptions)), {
                context: "changeColumn",
                table: tableName
              });
              sql = this.queryGenerator.changeColumnQuery(tableName, query);
              return _context18.abrupt("return", this.sequelize.query(sql, options));

            case 4:
            case "end":
              return _context18.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "assertTableHasColumn",
    value: function assertTableHasColumn(tableName, columnName, options) {
      var description;
      return regeneratorRuntime.async(function assertTableHasColumn$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              _context19.next = 2;
              return regeneratorRuntime.awrap(this.describeTable(tableName, options));

            case 2:
              description = _context19.sent;

              if (!description[columnName]) {
                _context19.next = 5;
                break;
              }

              return _context19.abrupt("return", description);

            case 5:
              throw new Error("Table ".concat(tableName, " doesn't have the column ").concat(columnName));

            case 6:
            case "end":
              return _context19.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "renameColumn",
    value: function renameColumn(tableName, attrNameBefore, attrNameAfter, options) {
      var data, _options, sql;

      return regeneratorRuntime.async(function renameColumn$(_context20) {
        while (1) {
          switch (_context20.prev = _context20.next) {
            case 0:
              options = options || {};
              _context20.next = 3;
              return regeneratorRuntime.awrap(this.assertTableHasColumn(tableName, attrNameBefore, options));

            case 3:
              _context20.t0 = attrNameBefore;
              data = _context20.sent[_context20.t0];
              _options = {};
              _options[attrNameAfter] = {
                attribute: attrNameAfter,
                type: data.type,
                allowNull: data.allowNull,
                defaultValue: data.defaultValue
              };

              if (data.defaultValue === null && !data.allowNull) {
                delete _options[attrNameAfter].defaultValue;
              }

              sql = this.queryGenerator.renameColumnQuery(tableName, attrNameBefore, this.queryGenerator.attributesToSQL(_options));
              _context20.next = 11;
              return regeneratorRuntime.awrap(this.sequelize.query(sql, options));

            case 11:
              return _context20.abrupt("return", _context20.sent);

            case 12:
            case "end":
              return _context20.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "addIndex",
    value: function addIndex(tableName, attributes, options, rawTablename) {
      var sql;
      return regeneratorRuntime.async(function addIndex$(_context21) {
        while (1) {
          switch (_context21.prev = _context21.next) {
            case 0:
              if (!Array.isArray(attributes)) {
                rawTablename = options;
                options = attributes;
                attributes = options.fields;
              }

              if (!rawTablename) {
                rawTablename = tableName;
              }

              options = Utils.cloneDeep(options);
              options.fields = attributes;
              sql = this.queryGenerator.addIndexQuery(tableName, options, rawTablename);
              _context21.next = 7;
              return regeneratorRuntime.awrap(this.sequelize.query(sql, __spreadProps(__spreadValues({}, options), {
                supportsSearchPath: false
              })));

            case 7:
              return _context21.abrupt("return", _context21.sent);

            case 8:
            case "end":
              return _context21.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "showIndex",
    value: function showIndex(tableName, options) {
      var sql;
      return regeneratorRuntime.async(function showIndex$(_context22) {
        while (1) {
          switch (_context22.prev = _context22.next) {
            case 0:
              sql = this.queryGenerator.showIndexesQuery(tableName, options);
              _context22.next = 3;
              return regeneratorRuntime.awrap(this.sequelize.query(sql, __spreadProps(__spreadValues({}, options), {
                type: QueryTypes.SHOWINDEXES
              })));

            case 3:
              return _context22.abrupt("return", _context22.sent);

            case 4:
            case "end":
              return _context22.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "getForeignKeysForTables",
    value: function getForeignKeysForTables(tableNames, options) {
      var _this3 = this;

      var results, result;
      return regeneratorRuntime.async(function getForeignKeysForTables$(_context23) {
        while (1) {
          switch (_context23.prev = _context23.next) {
            case 0:
              if (!(tableNames.length === 0)) {
                _context23.next = 2;
                break;
              }

              return _context23.abrupt("return", {});

            case 2:
              options = __spreadProps(__spreadValues({}, options), {
                type: QueryTypes.FOREIGNKEYS
              });
              _context23.next = 5;
              return regeneratorRuntime.awrap(Promise.all(tableNames.map(function (tableName) {
                return _this3.sequelize.query(_this3.queryGenerator.getForeignKeysQuery(tableName, _this3.sequelize.config.database), options);
              })));

            case 5:
              results = _context23.sent;
              result = {};
              tableNames.forEach(function (tableName, i) {
                if (_.isObject(tableName)) {
                  tableName = "".concat(tableName.schema, ".").concat(tableName.tableName);
                }

                result[tableName] = Array.isArray(results[i]) ? results[i].map(function (r) {
                  return r.constraint_name;
                }) : [results[i] && results[i].constraint_name];
                result[tableName] = result[tableName].filter(_.identity);
              });
              return _context23.abrupt("return", result);

            case 9:
            case "end":
              return _context23.stop();
          }
        }
      });
    }
  }, {
    key: "getForeignKeyReferencesForTable",
    value: function getForeignKeyReferencesForTable(tableName, options) {
      var queryOptions, query;
      return regeneratorRuntime.async(function getForeignKeyReferencesForTable$(_context24) {
        while (1) {
          switch (_context24.prev = _context24.next) {
            case 0:
              queryOptions = __spreadProps(__spreadValues({}, options), {
                type: QueryTypes.FOREIGNKEYS
              });
              query = this.queryGenerator.getForeignKeysQuery(tableName, this.sequelize.config.database);
              return _context24.abrupt("return", this.sequelize.query(query, queryOptions));

            case 3:
            case "end":
              return _context24.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "removeIndex",
    value: function removeIndex(tableName, indexNameOrAttributes, options) {
      var sql;
      return regeneratorRuntime.async(function removeIndex$(_context25) {
        while (1) {
          switch (_context25.prev = _context25.next) {
            case 0:
              options = options || {};
              sql = this.queryGenerator.removeIndexQuery(tableName, indexNameOrAttributes, options);
              _context25.next = 4;
              return regeneratorRuntime.awrap(this.sequelize.query(sql, options));

            case 4:
              return _context25.abrupt("return", _context25.sent);

            case 5:
            case "end":
              return _context25.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "addConstraint",
    value: function addConstraint(tableName, options) {
      var sql;
      return regeneratorRuntime.async(function addConstraint$(_context26) {
        while (1) {
          switch (_context26.prev = _context26.next) {
            case 0:
              if (options.fields) {
                _context26.next = 2;
                break;
              }

              throw new Error("Fields must be specified through options.fields");

            case 2:
              if (options.type) {
                _context26.next = 4;
                break;
              }

              throw new Error("Constraint type must be specified through options.type");

            case 4:
              options = Utils.cloneDeep(options);
              sql = this.queryGenerator.addConstraintQuery(tableName, options);
              _context26.next = 8;
              return regeneratorRuntime.awrap(this.sequelize.query(sql, options));

            case 8:
              return _context26.abrupt("return", _context26.sent);

            case 9:
            case "end":
              return _context26.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "showConstraint",
    value: function showConstraint(tableName, constraintName, options) {
      var sql;
      return regeneratorRuntime.async(function showConstraint$(_context27) {
        while (1) {
          switch (_context27.prev = _context27.next) {
            case 0:
              sql = this.queryGenerator.showConstraintsQuery(tableName, constraintName);
              _context27.next = 3;
              return regeneratorRuntime.awrap(this.sequelize.query(sql, __spreadProps(__spreadValues({}, options), {
                type: QueryTypes.SHOWCONSTRAINTS
              })));

            case 3:
              return _context27.abrupt("return", _context27.sent);

            case 4:
            case "end":
              return _context27.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "removeConstraint",
    value: function removeConstraint(tableName, constraintName, options) {
      return regeneratorRuntime.async(function removeConstraint$(_context28) {
        while (1) {
          switch (_context28.prev = _context28.next) {
            case 0:
              return _context28.abrupt("return", this.sequelize.query(this.queryGenerator.removeConstraintQuery(tableName, constraintName), options));

            case 1:
            case "end":
              return _context28.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "insert",
    value: function insert(instance, tableName, values, options) {
      var sql, results;
      return regeneratorRuntime.async(function insert$(_context29) {
        while (1) {
          switch (_context29.prev = _context29.next) {
            case 0:
              options = Utils.cloneDeep(options);
              options.hasTrigger = instance && instance.constructor.options.hasTrigger;
              sql = this.queryGenerator.insertQuery(tableName, values, instance && instance.constructor.rawAttributes, options);
              options.type = QueryTypes.INSERT;
              options.instance = instance;
              _context29.next = 7;
              return regeneratorRuntime.awrap(this.sequelize.query(sql, options));

            case 7:
              results = _context29.sent;
              if (instance) results[0].isNewRecord = false;
              return _context29.abrupt("return", results);

            case 10:
            case "end":
              return _context29.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "upsert",
    value: function upsert(tableName, insertValues, updateValues, where, options) {
      var model, primaryKeys, uniqueKeys, indexKeys, _iteratorNormalCompletion5, _didIteratorError5, _iteratorError5, _loop, _iterator5, _step5, _ret, sql;

      return regeneratorRuntime.async(function upsert$(_context30) {
        while (1) {
          switch (_context30.prev = _context30.next) {
            case 0:
              options = __spreadValues({}, options);
              model = options.model;
              options.type = QueryTypes.UPSERT;
              options.updateOnDuplicate = Object.keys(updateValues);
              options.upsertKeys = options.conflictFields || [];

              if (!(options.upsertKeys.length === 0)) {
                _context30.next = 38;
                break;
              }

              primaryKeys = Object.values(model.primaryKeys).map(function (item) {
                return item.field;
              });
              uniqueKeys = Object.values(model.uniqueKeys).filter(function (c) {
                return c.fields.length > 0;
              }).map(function (c) {
                return c.fields;
              });
              indexKeys = Object.values(model._indexes).filter(function (c) {
                return c.unique && c.fields.length > 0;
              }).map(function (c) {
                return c.fields;
              });
              _iteratorNormalCompletion5 = true;
              _didIteratorError5 = false;
              _iteratorError5 = undefined;
              _context30.prev = 12;

              _loop = function _loop() {
                var field = _step5.value;
                var uniqueKey = uniqueKeys.find(function (fields) {
                  return fields.includes(field);
                });

                if (uniqueKey) {
                  options.upsertKeys = uniqueKey;
                  return "break";
                }

                var indexKey = indexKeys.find(function (fields) {
                  return fields.includes(field);
                });

                if (indexKey) {
                  options.upsertKeys = indexKey;
                  return "break";
                }
              };

              _iterator5 = options.updateOnDuplicate[Symbol.iterator]();

            case 15:
              if (_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done) {
                _context30.next = 22;
                break;
              }

              _ret = _loop();

              if (!(_ret === "break")) {
                _context30.next = 19;
                break;
              }

              return _context30.abrupt("break", 22);

            case 19:
              _iteratorNormalCompletion5 = true;
              _context30.next = 15;
              break;

            case 22:
              _context30.next = 28;
              break;

            case 24:
              _context30.prev = 24;
              _context30.t0 = _context30["catch"](12);
              _didIteratorError5 = true;
              _iteratorError5 = _context30.t0;

            case 28:
              _context30.prev = 28;
              _context30.prev = 29;

              if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
                _iterator5["return"]();
              }

            case 31:
              _context30.prev = 31;

              if (!_didIteratorError5) {
                _context30.next = 34;
                break;
              }

              throw _iteratorError5;

            case 34:
              return _context30.finish(31);

            case 35:
              return _context30.finish(28);

            case 36:
              if (options.upsertKeys.length === 0 || _.intersection(options.updateOnDuplicate, primaryKeys).length) {
                options.upsertKeys = primaryKeys;
              }

              options.upsertKeys = _.uniq(options.upsertKeys);

            case 38:
              sql = this.queryGenerator.insertQuery(tableName, insertValues, model.rawAttributes, options);
              _context30.next = 41;
              return regeneratorRuntime.awrap(this.sequelize.query(sql, options));

            case 41:
              return _context30.abrupt("return", _context30.sent);

            case 42:
            case "end":
              return _context30.stop();
          }
        }
      }, null, this, [[12, 24, 28, 36], [29,, 31, 35]]);
    }
  }, {
    key: "bulkInsert",
    value: function bulkInsert(tableName, records, options, attributes) {
      var results;
      return regeneratorRuntime.async(function bulkInsert$(_context31) {
        while (1) {
          switch (_context31.prev = _context31.next) {
            case 0:
              options = __spreadValues({}, options);
              options.type = QueryTypes.INSERT;
              _context31.next = 4;
              return regeneratorRuntime.awrap(this.sequelize.query(this.queryGenerator.bulkInsertQuery(tableName, records, options, attributes), options));

            case 4:
              results = _context31.sent;
              return _context31.abrupt("return", results[0]);

            case 6:
            case "end":
              return _context31.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "update",
    value: function update(instance, tableName, values, identifier2, options) {
      var sql;
      return regeneratorRuntime.async(function update$(_context32) {
        while (1) {
          switch (_context32.prev = _context32.next) {
            case 0:
              options = __spreadValues({}, options);
              options.hasTrigger = instance && instance.constructor.options.hasTrigger;
              sql = this.queryGenerator.updateQuery(tableName, values, identifier2, options, instance.constructor.rawAttributes);
              options.type = QueryTypes.UPDATE;
              options.instance = instance;
              _context32.next = 7;
              return regeneratorRuntime.awrap(this.sequelize.query(sql, options));

            case 7:
              return _context32.abrupt("return", _context32.sent);

            case 8:
            case "end":
              return _context32.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "bulkUpdate",
    value: function bulkUpdate(tableName, values, identifier2, options, attributes) {
      var sql, table, model;
      return regeneratorRuntime.async(function bulkUpdate$(_context33) {
        while (1) {
          switch (_context33.prev = _context33.next) {
            case 0:
              options = Utils.cloneDeep(options);
              if (_typeof(identifier2) === "object") identifier2 = Utils.cloneDeep(identifier2);
              sql = this.queryGenerator.updateQuery(tableName, values, identifier2, options, attributes);
              table = _.isObject(tableName) ? tableName : {
                tableName: tableName
              };
              model = options.model ? options.model : _.find(this.sequelize.modelManager.models, {
                tableName: table.tableName
              });
              options.type = QueryTypes.BULKUPDATE;
              options.model = model;
              _context33.next = 9;
              return regeneratorRuntime.awrap(this.sequelize.query(sql, options));

            case 9:
              return _context33.abrupt("return", _context33.sent);

            case 10:
            case "end":
              return _context33.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "delete",
    value: function _delete(instance, tableName, identifier2, options) {
      var cascades, sql, keys, length, association, i, _i, _cascades, cascade, instances, _iteratorNormalCompletion6, _didIteratorError6, _iteratorError6, _iterator6, _step6, _instance;

      return regeneratorRuntime.async(function _delete$(_context34) {
        while (1) {
          switch (_context34.prev = _context34.next) {
            case 0:
              cascades = [];
              sql = this.queryGenerator.deleteQuery(tableName, identifier2, {}, instance.constructor);
              options = __spreadValues({}, options);

              if (!!instance.constructor && !!instance.constructor.associations) {
                keys = Object.keys(instance.constructor.associations);
                length = keys.length;

                for (i = 0; i < length; i++) {
                  association = instance.constructor.associations[keys[i]];

                  if (association.options && association.options.onDelete && association.options.onDelete.toLowerCase() === "cascade" && association.options.useHooks === true) {
                    cascades.push(association.accessors.get);
                  }
                }
              }

              _i = 0, _cascades = cascades;

            case 5:
              if (!(_i < _cascades.length)) {
                _context34.next = 42;
                break;
              }

              cascade = _cascades[_i];
              _context34.next = 9;
              return regeneratorRuntime.awrap(instance[cascade](options));

            case 9:
              instances = _context34.sent;

              if (instances) {
                _context34.next = 12;
                break;
              }

              return _context34.abrupt("continue", 39);

            case 12:
              if (!Array.isArray(instances)) instances = [instances];
              _iteratorNormalCompletion6 = true;
              _didIteratorError6 = false;
              _iteratorError6 = undefined;
              _context34.prev = 16;
              _iterator6 = instances[Symbol.iterator]();

            case 18:
              if (_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done) {
                _context34.next = 25;
                break;
              }

              _instance = _step6.value;
              _context34.next = 22;
              return regeneratorRuntime.awrap(_instance.destroy(options));

            case 22:
              _iteratorNormalCompletion6 = true;
              _context34.next = 18;
              break;

            case 25:
              _context34.next = 31;
              break;

            case 27:
              _context34.prev = 27;
              _context34.t0 = _context34["catch"](16);
              _didIteratorError6 = true;
              _iteratorError6 = _context34.t0;

            case 31:
              _context34.prev = 31;
              _context34.prev = 32;

              if (!_iteratorNormalCompletion6 && _iterator6["return"] != null) {
                _iterator6["return"]();
              }

            case 34:
              _context34.prev = 34;

              if (!_didIteratorError6) {
                _context34.next = 37;
                break;
              }

              throw _iteratorError6;

            case 37:
              return _context34.finish(34);

            case 38:
              return _context34.finish(31);

            case 39:
              _i++;
              _context34.next = 5;
              break;

            case 42:
              options.instance = instance;
              _context34.next = 45;
              return regeneratorRuntime.awrap(this.sequelize.query(sql, options));

            case 45:
              return _context34.abrupt("return", _context34.sent);

            case 46:
            case "end":
              return _context34.stop();
          }
        }
      }, null, this, [[16, 27, 31, 39], [32,, 34, 38]]);
    }
  }, {
    key: "bulkDelete",
    value: function bulkDelete(tableName, where, options, model) {
      return regeneratorRuntime.async(function bulkDelete$(_context35) {
        while (1) {
          switch (_context35.prev = _context35.next) {
            case 0:
              options = Utils.cloneDeep(options);
              options = _.defaults(options, {
                limit: null
              });

              if (!(options.truncate === true)) {
                _context35.next = 4;
                break;
              }

              return _context35.abrupt("return", this.sequelize.query(this.queryGenerator.truncateTableQuery(tableName, options), options));

            case 4:
              if ((typeof identifier === "undefined" ? "undefined" : _typeof(identifier)) === "object") where = Utils.cloneDeep(where);
              _context35.next = 7;
              return regeneratorRuntime.awrap(this.sequelize.query(this.queryGenerator.deleteQuery(tableName, where, options, model), options));

            case 7:
              return _context35.abrupt("return", _context35.sent);

            case 8:
            case "end":
              return _context35.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "select",
    value: function select(model, tableName, optionsArg) {
      var options;
      return regeneratorRuntime.async(function select$(_context36) {
        while (1) {
          switch (_context36.prev = _context36.next) {
            case 0:
              options = __spreadProps(__spreadValues({}, optionsArg), {
                type: QueryTypes.SELECT,
                model: model
              });
              _context36.next = 3;
              return regeneratorRuntime.awrap(this.sequelize.query(this.queryGenerator.selectQuery(tableName, options, model), options));

            case 3:
              return _context36.abrupt("return", _context36.sent);

            case 4:
            case "end":
              return _context36.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "increment",
    value: function increment(model, tableName, where, incrementAmountsByField, extraAttributesToBeUpdated, options) {
      var sql;
      return regeneratorRuntime.async(function increment$(_context37) {
        while (1) {
          switch (_context37.prev = _context37.next) {
            case 0:
              options = Utils.cloneDeep(options);
              sql = this.queryGenerator.arithmeticQuery("+", tableName, where, incrementAmountsByField, extraAttributesToBeUpdated, options);
              options.type = QueryTypes.UPDATE;
              options.model = model;
              _context37.next = 6;
              return regeneratorRuntime.awrap(this.sequelize.query(sql, options));

            case 6:
              return _context37.abrupt("return", _context37.sent);

            case 7:
            case "end":
              return _context37.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "decrement",
    value: function decrement(model, tableName, where, incrementAmountsByField, extraAttributesToBeUpdated, options) {
      var sql;
      return regeneratorRuntime.async(function decrement$(_context38) {
        while (1) {
          switch (_context38.prev = _context38.next) {
            case 0:
              options = Utils.cloneDeep(options);
              sql = this.queryGenerator.arithmeticQuery("-", tableName, where, incrementAmountsByField, extraAttributesToBeUpdated, options);
              options.type = QueryTypes.UPDATE;
              options.model = model;
              _context38.next = 6;
              return regeneratorRuntime.awrap(this.sequelize.query(sql, options));

            case 6:
              return _context38.abrupt("return", _context38.sent);

            case 7:
            case "end":
              return _context38.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "rawSelect",
    value: function rawSelect(tableName, options, attributeSelector, Model) {
      var sql, data, result, dataType;
      return regeneratorRuntime.async(function rawSelect$(_context39) {
        while (1) {
          switch (_context39.prev = _context39.next) {
            case 0:
              options = Utils.cloneDeep(options);
              options = _.defaults(options, {
                raw: true,
                plain: true,
                type: QueryTypes.SELECT
              });
              sql = this.queryGenerator.selectQuery(tableName, options, Model);

              if (!(attributeSelector === void 0)) {
                _context39.next = 5;
                break;
              }

              throw new Error("Please pass an attribute selector!");

            case 5:
              _context39.next = 7;
              return regeneratorRuntime.awrap(this.sequelize.query(sql, options));

            case 7:
              data = _context39.sent;

              if (options.plain) {
                _context39.next = 10;
                break;
              }

              return _context39.abrupt("return", data);

            case 10:
              result = data ? data[attributeSelector] : null;

              if (!(!options || !options.dataType)) {
                _context39.next = 13;
                break;
              }

              return _context39.abrupt("return", result);

            case 13:
              dataType = options.dataType;

              if (!(dataType instanceof DataTypes.DECIMAL || dataType instanceof DataTypes.FLOAT)) {
                _context39.next = 17;
                break;
              }

              if (!(result !== null)) {
                _context39.next = 17;
                break;
              }

              return _context39.abrupt("return", parseFloat(result));

            case 17:
              if (!(dataType instanceof DataTypes.INTEGER || dataType instanceof DataTypes.BIGINT)) {
                _context39.next = 20;
                break;
              }

              if (!(result !== null)) {
                _context39.next = 20;
                break;
              }

              return _context39.abrupt("return", parseInt(result, 10));

            case 20:
              if (!(dataType instanceof DataTypes.DATE)) {
                _context39.next = 23;
                break;
              }

              if (!(result !== null && !(result instanceof Date))) {
                _context39.next = 23;
                break;
              }

              return _context39.abrupt("return", new Date(result));

            case 23:
              return _context39.abrupt("return", result);

            case 24:
            case "end":
              return _context39.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "createTrigger",
    value: function createTrigger(tableName, triggerName, timingType, fireOnArray, functionName, functionParams, optionsArray, options) {
      var sql;
      return regeneratorRuntime.async(function createTrigger$(_context40) {
        while (1) {
          switch (_context40.prev = _context40.next) {
            case 0:
              sql = this.queryGenerator.createTrigger(tableName, triggerName, timingType, fireOnArray, functionName, functionParams, optionsArray);
              options = options || {};

              if (!sql) {
                _context40.next = 6;
                break;
              }

              _context40.next = 5;
              return regeneratorRuntime.awrap(this.sequelize.query(sql, options));

            case 5:
              return _context40.abrupt("return", _context40.sent);

            case 6:
            case "end":
              return _context40.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "dropTrigger",
    value: function dropTrigger(tableName, triggerName, options) {
      var sql;
      return regeneratorRuntime.async(function dropTrigger$(_context41) {
        while (1) {
          switch (_context41.prev = _context41.next) {
            case 0:
              sql = this.queryGenerator.dropTrigger(tableName, triggerName);
              options = options || {};

              if (!sql) {
                _context41.next = 6;
                break;
              }

              _context41.next = 5;
              return regeneratorRuntime.awrap(this.sequelize.query(sql, options));

            case 5:
              return _context41.abrupt("return", _context41.sent);

            case 6:
            case "end":
              return _context41.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "renameTrigger",
    value: function renameTrigger(tableName, oldTriggerName, newTriggerName, options) {
      var sql;
      return regeneratorRuntime.async(function renameTrigger$(_context42) {
        while (1) {
          switch (_context42.prev = _context42.next) {
            case 0:
              sql = this.queryGenerator.renameTrigger(tableName, oldTriggerName, newTriggerName);
              options = options || {};

              if (!sql) {
                _context42.next = 6;
                break;
              }

              _context42.next = 5;
              return regeneratorRuntime.awrap(this.sequelize.query(sql, options));

            case 5:
              return _context42.abrupt("return", _context42.sent);

            case 6:
            case "end":
              return _context42.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "createFunction",
    value: function createFunction(functionName, params, returnType, language, body, optionsArray, options) {
      var sql;
      return regeneratorRuntime.async(function createFunction$(_context43) {
        while (1) {
          switch (_context43.prev = _context43.next) {
            case 0:
              sql = this.queryGenerator.createFunction(functionName, params, returnType, language, body, optionsArray, options);
              options = options || {};

              if (!sql) {
                _context43.next = 6;
                break;
              }

              _context43.next = 5;
              return regeneratorRuntime.awrap(this.sequelize.query(sql, options));

            case 5:
              return _context43.abrupt("return", _context43.sent);

            case 6:
            case "end":
              return _context43.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "dropFunction",
    value: function dropFunction(functionName, params, options) {
      var sql;
      return regeneratorRuntime.async(function dropFunction$(_context44) {
        while (1) {
          switch (_context44.prev = _context44.next) {
            case 0:
              sql = this.queryGenerator.dropFunction(functionName, params);
              options = options || {};

              if (!sql) {
                _context44.next = 6;
                break;
              }

              _context44.next = 5;
              return regeneratorRuntime.awrap(this.sequelize.query(sql, options));

            case 5:
              return _context44.abrupt("return", _context44.sent);

            case 6:
            case "end":
              return _context44.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "renameFunction",
    value: function renameFunction(oldFunctionName, params, newFunctionName, options) {
      var sql;
      return regeneratorRuntime.async(function renameFunction$(_context45) {
        while (1) {
          switch (_context45.prev = _context45.next) {
            case 0:
              sql = this.queryGenerator.renameFunction(oldFunctionName, params, newFunctionName);
              options = options || {};

              if (!sql) {
                _context45.next = 6;
                break;
              }

              _context45.next = 5;
              return regeneratorRuntime.awrap(this.sequelize.query(sql, options));

            case 5:
              return _context45.abrupt("return", _context45.sent);

            case 6:
            case "end":
              return _context45.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "ensureEnums",
    value: function ensureEnums() {}
  }, {
    key: "setIsolationLevel",
    value: function setIsolationLevel(transaction, value, options) {
      var sql;
      return regeneratorRuntime.async(function setIsolationLevel$(_context46) {
        while (1) {
          switch (_context46.prev = _context46.next) {
            case 0:
              if (!(!transaction || !(transaction instanceof Transaction))) {
                _context46.next = 2;
                break;
              }

              throw new Error("Unable to set isolation level for a transaction without transaction object!");

            case 2:
              if (!(transaction.parent || !value)) {
                _context46.next = 4;
                break;
              }

              return _context46.abrupt("return");

            case 4:
              options = __spreadProps(__spreadValues({}, options), {
                transaction: transaction.parent || transaction
              });
              sql = this.queryGenerator.setIsolationLevelQuery(value, {
                parent: transaction.parent
              });

              if (sql) {
                _context46.next = 8;
                break;
              }

              return _context46.abrupt("return");

            case 8:
              _context46.next = 10;
              return regeneratorRuntime.awrap(this.sequelize.query(sql, options));

            case 10:
              return _context46.abrupt("return", _context46.sent);

            case 11:
            case "end":
              return _context46.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "startTransaction",
    value: function startTransaction(transaction, options) {
      var sql;
      return regeneratorRuntime.async(function startTransaction$(_context47) {
        while (1) {
          switch (_context47.prev = _context47.next) {
            case 0:
              if (!(!transaction || !(transaction instanceof Transaction))) {
                _context47.next = 2;
                break;
              }

              throw new Error("Unable to start a transaction without transaction object!");

            case 2:
              options = __spreadProps(__spreadValues({}, options), {
                transaction: transaction.parent || transaction
              });
              options.transaction.name = transaction.parent ? transaction.name : void 0;
              sql = this.queryGenerator.startTransactionQuery(transaction);
              _context47.next = 7;
              return regeneratorRuntime.awrap(this.sequelize.query(sql, options));

            case 7:
              return _context47.abrupt("return", _context47.sent);

            case 8:
            case "end":
              return _context47.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "deferConstraints",
    value: function deferConstraints(transaction, options) {
      var sql;
      return regeneratorRuntime.async(function deferConstraints$(_context48) {
        while (1) {
          switch (_context48.prev = _context48.next) {
            case 0:
              options = __spreadProps(__spreadValues({}, options), {
                transaction: transaction.parent || transaction
              });
              sql = this.queryGenerator.deferConstraintsQuery(options);

              if (!sql) {
                _context48.next = 6;
                break;
              }

              _context48.next = 5;
              return regeneratorRuntime.awrap(this.sequelize.query(sql, options));

            case 5:
              return _context48.abrupt("return", _context48.sent);

            case 6:
            case "end":
              return _context48.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "commitTransaction",
    value: function commitTransaction(transaction, options) {
      var sql, promise;
      return regeneratorRuntime.async(function commitTransaction$(_context49) {
        while (1) {
          switch (_context49.prev = _context49.next) {
            case 0:
              if (!(!transaction || !(transaction instanceof Transaction))) {
                _context49.next = 2;
                break;
              }

              throw new Error("Unable to commit a transaction without transaction object!");

            case 2:
              if (!transaction.parent) {
                _context49.next = 4;
                break;
              }

              return _context49.abrupt("return");

            case 4:
              options = __spreadProps(__spreadValues({}, options), {
                transaction: transaction.parent || transaction,
                supportsSearchPath: false,
                completesTransaction: true
              });
              sql = this.queryGenerator.commitTransactionQuery(transaction);
              promise = this.sequelize.query(sql, options);
              transaction.finished = "commit";
              _context49.next = 10;
              return regeneratorRuntime.awrap(promise);

            case 10:
              return _context49.abrupt("return", _context49.sent);

            case 11:
            case "end":
              return _context49.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "rollbackTransaction",
    value: function rollbackTransaction(transaction, options) {
      var sql, promise;
      return regeneratorRuntime.async(function rollbackTransaction$(_context50) {
        while (1) {
          switch (_context50.prev = _context50.next) {
            case 0:
              if (!(!transaction || !(transaction instanceof Transaction))) {
                _context50.next = 2;
                break;
              }

              throw new Error("Unable to rollback a transaction without transaction object!");

            case 2:
              options = __spreadProps(__spreadValues({}, options), {
                transaction: transaction.parent || transaction,
                supportsSearchPath: false,
                completesTransaction: true
              });
              options.transaction.name = transaction.parent ? transaction.name : void 0;
              sql = this.queryGenerator.rollbackTransactionQuery(transaction);
              promise = this.sequelize.query(sql, options);
              transaction.finished = "rollback";
              _context50.next = 9;
              return regeneratorRuntime.awrap(promise);

            case 9:
              return _context50.abrupt("return", _context50.sent);

            case 10:
            case "end":
              return _context50.stop();
          }
        }
      }, null, this);
    }
  }]);

  return QueryInterface;
}();

exports.QueryInterface = QueryInterface;
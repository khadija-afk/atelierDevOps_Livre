'use strict';

var PLUGIN_NAME = 'sha256_password';

var crypto = require('crypto');

var _require = require('../auth_41'),
    xorRotating = _require.xorRotating;

var REQUEST_SERVER_KEY_PACKET = Buffer.from([1]);
var STATE_INITIAL = 0;
var STATE_WAIT_SERVER_KEY = 1;
var STATE_FINAL = -1;

function encrypt(password, scramble, key) {
  var stage1 = xorRotating(Buffer.from("".concat(password, "\0"), 'utf8'), scramble);
  return crypto.publicEncrypt(key, stage1);
}

module.exports = function () {
  var pluginOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return function (_ref) {
    var connection = _ref.connection;
    var state = 0;
    var scramble = null;
    var password = connection.config.password;

    var authWithKey = function authWithKey(serverKey) {
      var _password = encrypt(password, scramble, serverKey);

      state = STATE_FINAL;
      return _password;
    };

    return function (data) {
      switch (state) {
        case STATE_INITIAL:
          scramble = data.slice(0, 20); // if client provides key we can save one extra roundrip on first connection

          if (pluginOptions.serverPublicKey) {
            return authWithKey(pluginOptions.serverPublicKey);
          }

          state = STATE_WAIT_SERVER_KEY;
          return REQUEST_SERVER_KEY_PACKET;

        case STATE_WAIT_SERVER_KEY:
          if (pluginOptions.onServerPublicKey) {
            pluginOptions.onServerPublicKey(data);
          }

          return authWithKey(data);

        case STATE_FINAL:
          throw new Error("Unexpected data in AuthMoreData packet received by ".concat(PLUGIN_NAME, " plugin in STATE_FINAL state."));
      }

      throw new Error("Unexpected data in AuthMoreData packet received by ".concat(PLUGIN_NAME, " plugin in state ").concat(state));
    };
  };
};
'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Packet = require('../packets/packet');

var TextRow =
/*#__PURE__*/
function () {
  function TextRow(columns) {
    _classCallCheck(this, TextRow);

    this.columns = columns || [];
  }

  _createClass(TextRow, null, [{
    key: "fromPacket",
    value: function fromPacket(packet) {
      // packet.reset(); // set offset to starting point?
      var columns = [];

      while (packet.haveMoreData()) {
        columns.push(packet.readLengthCodedString());
      }

      return new TextRow(columns);
    }
  }, {
    key: "toPacket",
    value: function toPacket(columns, encoding) {
      var sequenceId = 0; // TODO remove, this is calculated now in connecton

      var length = 0;
      columns.forEach(function (val) {
        if (val === null || typeof val === 'undefined') {
          ++length;
          return;
        }

        length += Packet.lengthCodedStringLength(val.toString(10), encoding);
      });
      var buffer = Buffer.allocUnsafe(length + 4);
      var packet = new Packet(sequenceId, buffer, 0, length + 4);
      packet.offset = 4;
      columns.forEach(function (val) {
        if (val === null) {
          packet.writeNull();
          return;
        }

        if (typeof val === 'undefined') {
          packet.writeInt8(0);
          return;
        }

        packet.writeLengthCodedString(val.toString(10), encoding);
      });
      return packet;
    }
  }]);

  return TextRow;
}();

module.exports = TextRow;
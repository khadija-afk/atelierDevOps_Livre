'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Connection = require('../index.js').Connection;

var PoolConnection =
/*#__PURE__*/
function (_Connection) {
  _inherits(PoolConnection, _Connection);

  function PoolConnection(pool, options) {
    var _this;

    _classCallCheck(this, PoolConnection);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(PoolConnection).call(this, options));
    _this._pool = pool; // The last active time of this connection

    _this.lastActiveTime = Date.now(); // When a fatal error occurs the connection's protocol ends, which will cause
    // the connection to end as well, thus we only need to watch for the end event
    // and we will be notified of disconnects.
    // REVIEW: Moved to `once`

    _this.once('end', function () {
      _this._removeFromPool();
    });

    _this.once('error', function () {
      _this._removeFromPool();
    });

    return _this;
  }

  _createClass(PoolConnection, [{
    key: "release",
    value: function release() {
      if (!this._pool || this._pool._closed) {
        return;
      } // update last active time


      this.lastActiveTime = Date.now();

      this._pool.releaseConnection(this);
    }
  }, {
    key: "promise",
    value: function promise(promiseImpl) {
      var PromisePoolConnection = require('../promise').PromisePoolConnection;

      return new PromisePoolConnection(this, promiseImpl);
    }
  }, {
    key: "end",
    value: function end() {
      var err = new Error('Calling conn.end() to release a pooled connection is ' + 'deprecated. In next version calling conn.end() will be ' + 'restored to default conn.end() behavior. Use ' + 'conn.release() instead.');
      this.emit('warn', err); // eslint-disable-next-line no-console

      console.warn(err.message);
      this.release();
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this._removeFromPool();

      _get(_getPrototypeOf(PoolConnection.prototype), "destroy", this).call(this);
    }
  }, {
    key: "_removeFromPool",
    value: function _removeFromPool() {
      if (!this._pool || this._pool._closed) {
        return;
      }

      var pool = this._pool;
      this._pool = null;

      pool._removeConnection(this);
    }
  }]);

  return PoolConnection;
}(Connection);

PoolConnection.statementKey = Connection.statementKey;
module.exports = PoolConnection; // TODO: Remove this when we are removing PoolConnection#end

PoolConnection.prototype._realEnd = Connection.prototype.end;
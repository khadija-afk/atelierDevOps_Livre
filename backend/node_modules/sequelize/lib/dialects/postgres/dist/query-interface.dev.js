"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;

var __defNormalProp = function __defNormalProp(obj, key, value) {
  return key in obj ? __defProp(obj, key, {
    enumerable: true,
    configurable: true,
    writable: true,
    value: value
  }) : obj[key] = value;
};

var __spreadValues = function __spreadValues(a, b) {
  for (var prop in b || (b = {})) {
    if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);
  }

  if (__getOwnPropSymbols) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = __getOwnPropSymbols(b)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var prop = _step.value;
        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }

  return a;
};

var __spreadProps = function __spreadProps(a, b) {
  return __defProps(a, __getOwnPropDescs(b));
};

var __objRest = function __objRest(source, exclude) {
  var target = {};

  for (var prop in source) {
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];
  }

  if (source != null && __getOwnPropSymbols) {
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = __getOwnPropSymbols(source)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var prop = _step2.value;
        if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
          _iterator2["return"]();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }
  }

  return target;
};

var DataTypes = require("../../data-types");

var QueryTypes = require("../../query-types");

var _require = require("../abstract/query-interface"),
    QueryInterface = _require.QueryInterface;

var Utils = require("../../utils");

var Deferrable = require("../../deferrable");

var PostgresQueryInterface =
/*#__PURE__*/
function (_QueryInterface) {
  _inherits(PostgresQueryInterface, _QueryInterface);

  function PostgresQueryInterface() {
    _classCallCheck(this, PostgresQueryInterface);

    return _possibleConstructorReturn(this, _getPrototypeOf(PostgresQueryInterface).apply(this, arguments));
  }

  _createClass(PostgresQueryInterface, [{
    key: "ensureEnums",
    value: function ensureEnums(tableName, attributes, options, model) {
      var _this = this;

      var keys, keyLen, sql, promises, i, attribute, type, results, enumIdx, addEnumValue, _loop, result;

      return regeneratorRuntime.async(function ensureEnums$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              keys = Object.keys(attributes);
              keyLen = keys.length;
              sql = "";
              promises = [];
              i = 0;

              for (i = 0; i < keyLen; i++) {
                attribute = attributes[keys[i]];
                type = attribute.type;

                if (type instanceof DataTypes.ENUM || type instanceof DataTypes.ARRAY && type.type instanceof DataTypes.ENUM) {
                  sql = this.queryGenerator.pgListEnums(tableName, attribute.field || keys[i], options);
                  promises.push(this.sequelize.query(sql, __spreadProps(__spreadValues({}, options), {
                    plain: true,
                    raw: true,
                    type: QueryTypes.SELECT
                  })));
                }
              }

              _context2.next = 8;
              return regeneratorRuntime.awrap(Promise.all(promises));

            case 8:
              results = _context2.sent;
              promises = [];
              enumIdx = 0;

              addEnumValue = function addEnumValue(field, value, relativeValue) {
                var position = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "before";
                var spliceStart = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : promises.length;

                var valueOptions = __spreadValues({}, options);

                valueOptions.before = null;
                valueOptions.after = null;

                switch (position) {
                  case "after":
                    valueOptions.after = relativeValue;
                    break;

                  case "before":
                  default:
                    valueOptions.before = relativeValue;
                    break;
                }

                promises.splice(spliceStart, 0, function () {
                  return _this.sequelize.query(_this.queryGenerator.pgEnumAdd(tableName, field, value, valueOptions), valueOptions);
                });
              };

              _loop = function _loop() {
                var attribute = attributes[keys[i]];
                var type = attribute.type;
                var enumType = type.type || type;
                var field = attribute.field || keys[i];

                if (type instanceof DataTypes.ENUM || type instanceof DataTypes.ARRAY && enumType instanceof DataTypes.ENUM) {
                  if (!results[enumIdx]) {
                    promises.push(function () {
                      return _this.sequelize.query(_this.queryGenerator.pgEnum(tableName, field, enumType, options), __spreadProps(__spreadValues({}, options), {
                        raw: true
                      }));
                    });
                  } else if (!!results[enumIdx] && !!model) {
                    var enumVals = _this.queryGenerator.fromArray(results[enumIdx].enum_value);

                    var vals = enumType.values;
                    var lastOldEnumValue;
                    var rightestPosition = -1;

                    for (var oldIndex = 0; oldIndex < enumVals.length; oldIndex++) {
                      var enumVal = enumVals[oldIndex];
                      var newIdx = vals.indexOf(enumVal);
                      lastOldEnumValue = enumVal;

                      if (newIdx === -1) {
                        continue;
                      }

                      var newValuesBefore = vals.slice(0, newIdx);
                      var promisesLength = promises.length;

                      for (var reverseIdx = newValuesBefore.length - 1; reverseIdx >= 0; reverseIdx--) {
                        if (~enumVals.indexOf(newValuesBefore[reverseIdx])) {
                          break;
                        }

                        addEnumValue(field, newValuesBefore[reverseIdx], lastOldEnumValue, "before", promisesLength);
                      }

                      if (newIdx > rightestPosition) {
                        rightestPosition = newIdx;
                      }
                    }

                    if (lastOldEnumValue && rightestPosition < vals.length - 1) {
                      var remainingEnumValues = vals.slice(rightestPosition + 1);

                      for (var _reverseIdx = remainingEnumValues.length - 1; _reverseIdx >= 0; _reverseIdx--) {
                        addEnumValue(field, remainingEnumValues[_reverseIdx], lastOldEnumValue, "after");
                      }
                    }

                    enumIdx++;
                  }
                }
              };

              for (i = 0; i < keyLen; i++) {
                _loop();
              }

              _context2.next = 16;
              return regeneratorRuntime.awrap(promises.reduce(function _callee(promise, asyncFunction) {
                return regeneratorRuntime.async(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        _context.t0 = regeneratorRuntime;
                        _context.t1 = asyncFunction;
                        _context.next = 4;
                        return regeneratorRuntime.awrap(promise);

                      case 4:
                        _context.t2 = _context.sent;
                        _context.t3 = (0, _context.t1)(_context.t2);
                        _context.next = 8;
                        return _context.t0.awrap.call(_context.t0, _context.t3);

                      case 8:
                        return _context.abrupt("return", _context.sent);

                      case 9:
                      case "end":
                        return _context.stop();
                    }
                  }
                });
              }, Promise.resolve()));

            case 16:
              result = _context2.sent;

              if (!promises.length) {
                _context2.next = 20;
                break;
              }

              _context2.next = 20;
              return regeneratorRuntime.awrap(this.sequelize.dialect.connectionManager._refreshDynamicOIDs());

            case 20:
              return _context2.abrupt("return", result);

            case 21:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "getForeignKeyReferencesForTable",
    value: function getForeignKeyReferencesForTable(table, options) {
      var queryOptions, query, result;
      return regeneratorRuntime.async(function getForeignKeyReferencesForTable$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              queryOptions = __spreadProps(__spreadValues({}, options), {
                type: QueryTypes.FOREIGNKEYS
              });
              query = this.queryGenerator.getForeignKeyReferencesQuery(table.tableName || table, this.sequelize.config.database, table.schema);
              _context3.next = 4;
              return regeneratorRuntime.awrap(this.sequelize.query(query, queryOptions));

            case 4:
              result = _context3.sent;
              return _context3.abrupt("return", result.map(function (fkMeta) {
                var _a = Utils.camelizeObjectKeys(fkMeta),
                    initiallyDeferred = _a.initiallyDeferred,
                    isDeferrable = _a.isDeferrable,
                    remaining = __objRest(_a, ["initiallyDeferred", "isDeferrable"]);

                return __spreadProps(__spreadValues({}, remaining), {
                  deferrable: isDeferrable === "NO" ? Deferrable.NOT : initiallyDeferred === "NO" ? Deferrable.INITIALLY_IMMEDIATE : Deferrable.INITIALLY_DEFERRED
                });
              }));

            case 6:
            case "end":
              return _context3.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "dropEnum",
    value: function dropEnum(enumName, options) {
      return regeneratorRuntime.async(function dropEnum$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              options = options || {};
              return _context4.abrupt("return", this.sequelize.query(this.queryGenerator.pgEnumDrop(null, null, this.queryGenerator.pgEscapeAndQuote(enumName)), __spreadProps(__spreadValues({}, options), {
                raw: true
              })));

            case 2:
            case "end":
              return _context4.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "dropAllEnums",
    value: function dropAllEnums(options) {
      var _this2 = this;

      var enums;
      return regeneratorRuntime.async(function dropAllEnums$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              options = options || {};
              _context5.next = 3;
              return regeneratorRuntime.awrap(this.pgListEnums(null, options));

            case 3:
              enums = _context5.sent;
              _context5.next = 6;
              return regeneratorRuntime.awrap(Promise.all(enums.map(function (result) {
                return _this2.sequelize.query(_this2.queryGenerator.pgEnumDrop(null, null, _this2.queryGenerator.pgEscapeAndQuote(result.enum_name)), __spreadProps(__spreadValues({}, options), {
                  raw: true
                }));
              })));

            case 6:
              return _context5.abrupt("return", _context5.sent);

            case 7:
            case "end":
              return _context5.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "pgListEnums",
    value: function pgListEnums(tableName, options) {
      var sql;
      return regeneratorRuntime.async(function pgListEnums$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              options = options || {};
              sql = this.queryGenerator.pgListEnums(tableName);
              return _context6.abrupt("return", this.sequelize.query(sql, __spreadProps(__spreadValues({}, options), {
                plain: false,
                raw: true,
                type: QueryTypes.SELECT
              })));

            case 3:
            case "end":
              return _context6.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "dropTable",
    value: function dropTable(tableName, options) {
      var promises, instanceTable, getTableName, keys, keyLen, _i, sql;

      return regeneratorRuntime.async(function dropTable$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              _context7.next = 2;
              return regeneratorRuntime.awrap(_get(_getPrototypeOf(PostgresQueryInterface.prototype), "dropTable", this).call(this, tableName, options));

            case 2:
              promises = [];
              instanceTable = this.sequelize.modelManager.getModel(tableName, {
                attribute: "tableName"
              });

              if (instanceTable) {
                _context7.next = 6;
                break;
              }

              return _context7.abrupt("return");

            case 6:
              getTableName = (!options || !options.schema || options.schema === "public" ? "" : "".concat(options.schema, "_")) + tableName;
              keys = Object.keys(instanceTable.rawAttributes);
              keyLen = keys.length;

              for (_i = 0; _i < keyLen; _i++) {
                if (instanceTable.rawAttributes[keys[_i]].type instanceof DataTypes.ENUM) {
                  sql = this.queryGenerator.pgEnumDrop(getTableName, keys[_i]);
                  options.supportsSearchPath = false;
                  promises.push(this.sequelize.query(sql, __spreadProps(__spreadValues({}, options), {
                    raw: true
                  })));
                }
              }

              _context7.next = 12;
              return regeneratorRuntime.awrap(Promise.all(promises));

            case 12:
            case "end":
              return _context7.stop();
          }
        }
      }, null, this);
    }
  }]);

  return PostgresQueryInterface;
}(QueryInterface);

exports.PostgresQueryInterface = PostgresQueryInterface;
"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function checkNamingCollision(association) {
  if (Object.prototype.hasOwnProperty.call(association.source.rawAttributes, association.as)) {
    throw new Error("Naming collision between attribute '".concat(association.as, "' and association '").concat(association.as, "' on model ").concat(association.source.name, ". To remedy this, change either foreignKey or as in your association definition"));
  }
}

exports.checkNamingCollision = checkNamingCollision;

function addForeignKeyConstraints(newAttribute, source, target, options, key) {
  if (options.foreignKeyConstraint || options.onDelete || options.onUpdate) {
    var primaryKeys = Object.keys(source.primaryKeys).map(function (primaryKeyAttribute) {
      return source.rawAttributes[primaryKeyAttribute].field || primaryKeyAttribute;
    });

    if (primaryKeys.length === 1 || !primaryKeys.includes(key)) {
      newAttribute.references = {
        model: source.getTableName(),
        key: key || primaryKeys[0]
      };
      newAttribute.onDelete = options.onDelete;
      newAttribute.onUpdate = options.onUpdate;
    }
  }
}

exports.addForeignKeyConstraints = addForeignKeyConstraints;

function mixinMethods(association, obj, methods, aliases) {
  aliases = aliases || {};
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = methods[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var method = _step.value;

      if (!Object.prototype.hasOwnProperty.call(obj, association.accessors[method])) {
        (function () {
          var realMethod = aliases[method] || method;

          obj[association.accessors[method]] = function () {
            return association[realMethod].apply(association, [this].concat(_toConsumableArray(Array.from(arguments))));
          };
        })();
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
}

exports.mixinMethods = mixinMethods;
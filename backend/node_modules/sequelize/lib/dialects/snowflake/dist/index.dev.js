"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _ = require("lodash");

var AbstractDialect = require("../abstract");

var ConnectionManager = require("./connection-manager");

var Query = require("./query");

var QueryGenerator = require("./query-generator");

var DataTypes = require("../../data-types").snowflake;

var _require = require("./query-interface"),
    SnowflakeQueryInterface = _require.SnowflakeQueryInterface;

var SnowflakeDialect =
/*#__PURE__*/
function (_AbstractDialect) {
  _inherits(SnowflakeDialect, _AbstractDialect);

  function SnowflakeDialect(sequelize) {
    var _this;

    _classCallCheck(this, SnowflakeDialect);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(SnowflakeDialect).call(this));
    _this.sequelize = sequelize;
    _this.connectionManager = new ConnectionManager(_assertThisInitialized(_this), sequelize);
    _this.queryGenerator = new QueryGenerator({
      _dialect: _assertThisInitialized(_this),
      sequelize: sequelize
    });
    _this.queryInterface = new SnowflakeQueryInterface(sequelize, _this.queryGenerator);
    return _this;
  }

  return SnowflakeDialect;
}(AbstractDialect);

SnowflakeDialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {
  "VALUES ()": true,
  "LIMIT ON UPDATE": true,
  lock: true,
  forShare: "LOCK IN SHARE MODE",
  settingIsolationLevelDuringTransaction: false,
  inserts: {
    ignoreDuplicates: " IGNORE",
    updateOnDuplicate: false
  },
  index: {
    collate: false,
    length: true,
    parser: true,
    type: true,
    using: 1
  },
  constraints: {
    dropConstraint: false,
    check: false
  },
  indexViaAlter: true,
  indexHints: true,
  NUMERIC: true,
  GEOMETRY: false,
  JSON: false,
  REGEXP: true,
  schemas: true
});
SnowflakeDialect.prototype.defaultVersion = "5.7.0";
SnowflakeDialect.prototype.Query = Query;
SnowflakeDialect.prototype.QueryGenerator = QueryGenerator;
SnowflakeDialect.prototype.DataTypes = DataTypes;
SnowflakeDialect.prototype.name = "snowflake";
SnowflakeDialect.prototype.TICK_CHAR = '"';
SnowflakeDialect.prototype.TICK_CHAR_LEFT = SnowflakeDialect.prototype.TICK_CHAR;
SnowflakeDialect.prototype.TICK_CHAR_RIGHT = SnowflakeDialect.prototype.TICK_CHAR;
module.exports = SnowflakeDialect;
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require("./../errors"),
    AssociationError = _require.AssociationError;

var Association =
/*#__PURE__*/
function () {
  function Association(source, target) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    _classCallCheck(this, Association);

    this.source = source;
    this.target = target;
    this.options = options;
    this.scope = options.scope;
    this.isSelfAssociation = this.source === this.target;
    this.as = options.as;
    this.associationType = "";

    if (source.hasAlias(options.as)) {
      throw new AssociationError("You have used the alias ".concat(options.as, " in two separate associations. Aliased associations must have unique aliases."));
    }
  }

  _createClass(Association, [{
    key: "toInstanceArray",
    value: function toInstanceArray(input) {
      var _this = this;

      if (!Array.isArray(input)) {
        input = [input];
      }

      return input.map(function (element) {
        if (element instanceof _this.target) return element;
        var tmpInstance = {};
        tmpInstance[_this.target.primaryKeyAttribute] = element;
        return _this.target.build(tmpInstance, {
          isNewRecord: false
        });
      });
    }
  }, {
    key: Symbol["for"]("nodejs.util.inspect.custom"),
    value: function value() {
      return this.as;
    }
  }]);

  return Association;
}();

module.exports = Association;
"use strict";

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;

var __defNormalProp = function __defNormalProp(obj, key, value) {
  return key in obj ? __defProp(obj, key, {
    enumerable: true,
    configurable: true,
    writable: true,
    value: value
  }) : obj[key] = value;
};

var __spreadValues = function __spreadValues(a, b) {
  for (var prop in b || (b = {})) {
    if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);
  }

  if (__getOwnPropSymbols) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = __getOwnPropSymbols(b)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var prop = _step.value;
        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }

  return a;
};

var DataTypes = require("./data-types");

var SqlString = require("./sql-string");

var _ = require("lodash");

var baseIsNative = require("lodash/_baseIsNative");

var uuidv1 = require("uuid").v1;

var uuidv4 = require("uuid").v4;

var operators = require("./operators");

var operatorsSet = new Set(Object.values(operators));

var inflection = require("inflection");

exports.classToInvokable = require("./utils/class-to-invokable").classToInvokable;
exports.joinSQLFragments = require("./utils/join-sql-fragments").joinSQLFragments;

function useInflection(_inflection) {
  inflection = _inflection;
}

exports.useInflection = useInflection;

function camelizeIf(str, condition) {
  var result = str;

  if (condition) {
    result = camelize(str);
  }

  return result;
}

exports.camelizeIf = camelizeIf;

function underscoredIf(str, condition) {
  var result = str;

  if (condition) {
    result = underscore(str);
  }

  return result;
}

exports.underscoredIf = underscoredIf;

function isPrimitive(val) {
  var type = _typeof(val);

  return ["string", "number", "boolean"].includes(type);
}

exports.isPrimitive = isPrimitive;

function mergeDefaults(a, b) {
  return _.mergeWith(a, b, function (objectValue, sourceValue) {
    if (!_.isPlainObject(objectValue) && objectValue !== void 0) {
      if (_.isFunction(objectValue) && baseIsNative(objectValue)) {
        return sourceValue || objectValue;
      }

      return objectValue;
    }
  });
}

exports.mergeDefaults = mergeDefaults;

function merge() {
  var result = {};
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = arguments[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var obj = _step2.value;

      _.forOwn(obj, function (value, key) {
        if (value !== void 0) {
          if (!result[key]) {
            result[key] = value;
          } else if (_.isPlainObject(value) && _.isPlainObject(result[key])) {
            result[key] = merge(result[key], value);
          } else if (Array.isArray(value) && Array.isArray(result[key])) {
            result[key] = value.concat(result[key]);
          } else {
            result[key] = value;
          }
        }
      });
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
        _iterator2["return"]();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  return result;
}

exports.merge = merge;

function spliceStr(str, index, count, add) {
  return str.slice(0, index) + add + str.slice(index + count);
}

exports.spliceStr = spliceStr;

function camelize(str) {
  return str.trim().replace(/[-_\s]+(.)?/g, function (match, c) {
    return c.toUpperCase();
  });
}

exports.camelize = camelize;

function underscore(str) {
  return inflection.underscore(str);
}

exports.underscore = underscore;

function singularize(str) {
  return inflection.singularize(str);
}

exports.singularize = singularize;

function pluralize(str) {
  return inflection.pluralize(str);
}

exports.pluralize = pluralize;

function format(arr, dialect) {
  var timeZone = null;
  return SqlString.format(arr[0], arr.slice(1), timeZone, dialect);
}

exports.format = format;

function formatNamedParameters(sql, parameters, dialect) {
  var timeZone = null;
  return SqlString.formatNamedParameters(sql, parameters, timeZone, dialect);
}

exports.formatNamedParameters = formatNamedParameters;

function cloneDeep(obj, onlyPlain) {
  obj = obj || {};
  return _.cloneDeepWith(obj, function (elem) {
    if (Array.isArray(elem) || _.isPlainObject(elem)) {
      return void 0;
    }

    if (onlyPlain || _typeof(elem) === "object") {
      return elem;
    }

    if (elem && typeof elem.clone === "function") {
      return elem.clone();
    }
  });
}

exports.cloneDeep = cloneDeep;

function mapFinderOptions(options, Model) {
  if (options.attributes && Array.isArray(options.attributes)) {
    options.attributes = Model._injectDependentVirtualAttributes(options.attributes);
    options.attributes = options.attributes.filter(function (v) {
      return !Model._virtualAttributes.has(v);
    });
  }

  mapOptionFieldNames(options, Model);
  return options;
}

exports.mapFinderOptions = mapFinderOptions;

function mapOptionFieldNames(options, Model) {
  if (Array.isArray(options.attributes)) {
    options.attributes = options.attributes.map(function (attr) {
      if (typeof attr !== "string") return attr;

      if (Model.rawAttributes[attr] && attr !== Model.rawAttributes[attr].field) {
        return [Model.rawAttributes[attr].field, attr];
      }

      return attr;
    });
  }

  if (options.where && _.isPlainObject(options.where)) {
    options.where = mapWhereFieldNames(options.where, Model);
  }

  return options;
}

exports.mapOptionFieldNames = mapOptionFieldNames;

function mapWhereFieldNames(attributes, Model) {
  if (attributes) {
    attributes = cloneDeep(attributes);
    getComplexKeys(attributes).forEach(function (attribute) {
      var rawAttribute = Model.rawAttributes[attribute];

      if (rawAttribute && rawAttribute.field !== rawAttribute.fieldName) {
        attributes[rawAttribute.field] = attributes[attribute];
        delete attributes[attribute];
      }

      if (_.isPlainObject(attributes[attribute]) && !(rawAttribute && (rawAttribute.type instanceof DataTypes.HSTORE || rawAttribute.type instanceof DataTypes.JSON))) {
        attributes[attribute] = mapOptionFieldNames({
          where: attributes[attribute]
        }, Model).where;
      }

      if (Array.isArray(attributes[attribute])) {
        attributes[attribute].forEach(function (where, index) {
          if (_.isPlainObject(where)) {
            attributes[attribute][index] = mapWhereFieldNames(where, Model);
          }
        });
      }
    });
  }

  return attributes;
}

exports.mapWhereFieldNames = mapWhereFieldNames;

function mapValueFieldNames(dataValues, fields, Model) {
  var values = {};
  var _iteratorNormalCompletion3 = true;
  var _didIteratorError3 = false;
  var _iteratorError3 = undefined;

  try {
    for (var _iterator3 = fields[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
      var attr = _step3.value;

      if (dataValues[attr] !== void 0 && !Model._virtualAttributes.has(attr)) {
        if (Model.rawAttributes[attr] && Model.rawAttributes[attr].field && Model.rawAttributes[attr].field !== attr) {
          values[Model.rawAttributes[attr].field] = dataValues[attr];
        } else {
          values[attr] = dataValues[attr];
        }
      }
    }
  } catch (err) {
    _didIteratorError3 = true;
    _iteratorError3 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
        _iterator3["return"]();
      }
    } finally {
      if (_didIteratorError3) {
        throw _iteratorError3;
      }
    }
  }

  return values;
}

exports.mapValueFieldNames = mapValueFieldNames;

function isColString(value) {
  return typeof value === "string" && value[0] === "$" && value[value.length - 1] === "$";
}

exports.isColString = isColString;

function canTreatArrayAsAnd(arr) {
  return arr.some(function (arg) {
    return _.isPlainObject(arg) || arg instanceof Where;
  });
}

exports.canTreatArrayAsAnd = canTreatArrayAsAnd;

function combineTableNames(tableName1, tableName2) {
  return tableName1.toLowerCase() < tableName2.toLowerCase() ? tableName1 + tableName2 : tableName2 + tableName1;
}

exports.combineTableNames = combineTableNames;

function toDefaultValue(value, dialect) {
  if (typeof value === "function") {
    var tmp = value();

    if (tmp instanceof DataTypes.ABSTRACT) {
      return tmp.toSql();
    }

    return tmp;
  }

  if (value instanceof DataTypes.UUIDV1) {
    return uuidv1();
  }

  if (value instanceof DataTypes.UUIDV4) {
    return uuidv4();
  }

  if (value instanceof DataTypes.NOW) {
    return now(dialect);
  }

  if (Array.isArray(value)) {
    return value.slice();
  }

  if (_.isPlainObject(value)) {
    return __spreadValues({}, value);
  }

  return value;
}

exports.toDefaultValue = toDefaultValue;

function defaultValueSchemable(value) {
  if (value === void 0) {
    return false;
  }

  if (value instanceof DataTypes.NOW) {
    return false;
  }

  if (value instanceof DataTypes.UUIDV1 || value instanceof DataTypes.UUIDV4) {
    return false;
  }

  return typeof value !== "function";
}

exports.defaultValueSchemable = defaultValueSchemable;

function removeNullValuesFromHash(hash, omitNull, options) {
  var result = hash;
  options = options || {};
  options.allowNull = options.allowNull || [];

  if (omitNull) {
    var _hash = {};

    _.forIn(hash, function (val, key) {
      if (options.allowNull.includes(key) || key.endsWith("Id") || val !== null && val !== void 0) {
        _hash[key] = val;
      }
    });

    result = _hash;
  }

  return result;
}

exports.removeNullValuesFromHash = removeNullValuesFromHash;
var dialects =
/* @__PURE__ */
new Set(["mariadb", "mysql", "postgres", "sqlite", "mssql", "db2", "oracle"]);

function now(dialect) {
  var d = new Date();

  if (!dialects.has(dialect)) {
    d.setMilliseconds(0);
  }

  return d;
}

exports.now = now;
var TICK_CHAR = "`";
exports.TICK_CHAR = TICK_CHAR;

function addTicks(s, tickChar) {
  tickChar = tickChar || TICK_CHAR;
  return tickChar + removeTicks(s, tickChar) + tickChar;
}

exports.addTicks = addTicks;

function removeTicks(s, tickChar) {
  tickChar = tickChar || TICK_CHAR;
  return s.replace(new RegExp(tickChar, "g"), "");
}

exports.removeTicks = removeTicks;

function flattenObjectDeep(value) {
  if (!_.isPlainObject(value)) return value;
  var flattenedObj = {};

  function flattenObject(obj, subPath) {
    Object.keys(obj).forEach(function (key) {
      var pathToProperty = subPath ? "".concat(subPath, ".").concat(key) : key;

      if (_typeof(obj[key]) === "object" && obj[key] !== null) {
        flattenObject(obj[key], pathToProperty);
      } else {
        flattenedObj[pathToProperty] = _.get(obj, key);
      }
    });
    return flattenedObj;
  }

  return flattenObject(value, void 0);
}

exports.flattenObjectDeep = flattenObjectDeep;

var SequelizeMethod = function SequelizeMethod() {
  _classCallCheck(this, SequelizeMethod);
};

exports.SequelizeMethod = SequelizeMethod;

var Fn =
/*#__PURE__*/
function (_SequelizeMethod) {
  _inherits(Fn, _SequelizeMethod);

  function Fn(fn, args) {
    var _this;

    _classCallCheck(this, Fn);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Fn).call(this));
    _this.fn = fn;
    _this.args = args;
    return _this;
  }

  _createClass(Fn, [{
    key: "clone",
    value: function clone() {
      return new Fn(this.fn, this.args);
    }
  }]);

  return Fn;
}(SequelizeMethod);

exports.Fn = Fn;

var Col =
/*#__PURE__*/
function (_SequelizeMethod2) {
  _inherits(Col, _SequelizeMethod2);

  function Col(col) {
    var _this2;

    _classCallCheck(this, Col);

    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(Col).call(this));

    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    if (args.length > 0) {
      col = args;
    }

    _this2.col = col;
    return _this2;
  }

  return Col;
}(SequelizeMethod);

exports.Col = Col;

var Cast =
/*#__PURE__*/
function (_SequelizeMethod3) {
  _inherits(Cast, _SequelizeMethod3);

  function Cast(val, type, json) {
    var _this3;

    _classCallCheck(this, Cast);

    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(Cast).call(this));
    _this3.val = val;
    _this3.type = (type || "").trim();
    _this3.json = json || false;
    return _this3;
  }

  return Cast;
}(SequelizeMethod);

exports.Cast = Cast;

var Literal =
/*#__PURE__*/
function (_SequelizeMethod4) {
  _inherits(Literal, _SequelizeMethod4);

  function Literal(val) {
    var _this4;

    _classCallCheck(this, Literal);

    _this4 = _possibleConstructorReturn(this, _getPrototypeOf(Literal).call(this));
    _this4.val = val;
    return _this4;
  }

  return Literal;
}(SequelizeMethod);

exports.Literal = Literal;

var Json =
/*#__PURE__*/
function (_SequelizeMethod5) {
  _inherits(Json, _SequelizeMethod5);

  function Json(conditionsOrPath, value) {
    var _this5;

    _classCallCheck(this, Json);

    _this5 = _possibleConstructorReturn(this, _getPrototypeOf(Json).call(this));

    if (_.isObject(conditionsOrPath)) {
      _this5.conditions = conditionsOrPath;
    } else {
      _this5.path = conditionsOrPath;

      if (value) {
        _this5.value = value;
      }
    }

    return _this5;
  }

  return Json;
}(SequelizeMethod);

exports.Json = Json;

var Where =
/*#__PURE__*/
function (_SequelizeMethod6) {
  _inherits(Where, _SequelizeMethod6);

  function Where(attribute, comparator, logic) {
    var _this6;

    _classCallCheck(this, Where);

    _this6 = _possibleConstructorReturn(this, _getPrototypeOf(Where).call(this));

    if (logic === void 0) {
      logic = comparator;
      comparator = "=";
    }

    _this6.attribute = attribute;
    _this6.comparator = comparator;
    _this6.logic = logic;
    return _this6;
  }

  return Where;
}(SequelizeMethod);

exports.Where = Where;

function getOperators(obj) {
  return Object.getOwnPropertySymbols(obj).filter(function (s) {
    return operatorsSet.has(s);
  });
}

exports.getOperators = getOperators;

function getComplexKeys(obj) {
  return getOperators(obj).concat(Object.keys(obj));
}

exports.getComplexKeys = getComplexKeys;

function getComplexSize(obj) {
  return Array.isArray(obj) ? obj.length : getComplexKeys(obj).length;
}

exports.getComplexSize = getComplexSize;

function isWhereEmpty(obj) {
  return !!obj && _.isEmpty(obj) && getOperators(obj).length === 0;
}

exports.isWhereEmpty = isWhereEmpty;

function generateEnumName(tableName, columnName) {
  return "enum_".concat(tableName, "_").concat(columnName);
}

exports.generateEnumName = generateEnumName;

function camelizeObjectKeys(obj) {
  var newObj = new Object();
  Object.keys(obj).forEach(function (key) {
    newObj[camelize(key)] = obj[key];
  });
  return newObj;
}

exports.camelizeObjectKeys = camelizeObjectKeys;

function defaults(object) {
  object = Object(object);

  for (var _len2 = arguments.length, sources = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    sources[_key2 - 1] = arguments[_key2];
  }

  sources.forEach(function (source) {
    if (source) {
      source = Object(source);
      getComplexKeys(source).forEach(function (key) {
        var value = object[key];

        if (value === void 0 || _.eq(value, Object.prototype[key]) && !Object.prototype.hasOwnProperty.call(object, key)) {
          object[key] = source[key];
        }
      });
    }
  });
  return object;
}

exports.defaults = defaults;

function nameIndex(index, tableName) {
  if (tableName.tableName) tableName = tableName.tableName;

  if (!Object.prototype.hasOwnProperty.call(index, "name")) {
    var fields = index.fields.map(function (field) {
      return typeof field === "string" ? field : field.name || field.attribute;
    });
    index.name = underscore("".concat(tableName, "_").concat(fields.join("_")));
  }

  return index;
}

exports.nameIndex = nameIndex;

function intersects(arr1, arr2) {
  return arr1.some(function (v) {
    return arr2.includes(v);
  });
}

exports.intersects = intersects;

function safeStringifyJson(value) {
  return JSON.stringify(value, function (key, value2) {
    if (typeof value2 === "bigint") {
      return String(value2);
    }

    return value2;
  });
}

exports.safeStringifyJson = safeStringifyJson;
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var momentTz = require("moment-timezone");

var moment = require("moment");

module.exports = function (BaseTypes) {
  BaseTypes.ABSTRACT.prototype.dialectTypes = "https://dev.snowflake.com/doc/refman/5.7/en/data-types.html";
  BaseTypes.DATE.types.snowflake = ["DATETIME"];
  BaseTypes.STRING.types.snowflake = ["VAR_STRING"];
  BaseTypes.CHAR.types.snowflake = ["STRING"];
  BaseTypes.TEXT.types.snowflake = ["BLOB"];
  BaseTypes.TINYINT.types.snowflake = ["TINY"];
  BaseTypes.SMALLINT.types.snowflake = ["SHORT"];
  BaseTypes.MEDIUMINT.types.snowflake = ["INT24"];
  BaseTypes.INTEGER.types.snowflake = ["LONG"];
  BaseTypes.BIGINT.types.snowflake = ["LONGLONG"];
  BaseTypes.FLOAT.types.snowflake = ["FLOAT"];
  BaseTypes.TIME.types.snowflake = ["TIME"];
  BaseTypes.DATEONLY.types.snowflake = ["DATE"];
  BaseTypes.BOOLEAN.types.snowflake = ["TINY"];
  BaseTypes.BLOB.types.snowflake = ["TINYBLOB", "BLOB", "LONGBLOB"];
  BaseTypes.DECIMAL.types.snowflake = ["NEWDECIMAL"];
  BaseTypes.UUID.types.snowflake = false;
  BaseTypes.ENUM.types.snowflake = false;
  BaseTypes.REAL.types.snowflake = ["DOUBLE"];
  BaseTypes.DOUBLE.types.snowflake = ["DOUBLE"];
  BaseTypes.GEOMETRY.types.snowflake = ["GEOMETRY"];
  BaseTypes.JSON.types.snowflake = ["JSON"];

  var DATE =
  /*#__PURE__*/
  function (_BaseTypes$DATE) {
    _inherits(DATE, _BaseTypes$DATE);

    function DATE() {
      _classCallCheck(this, DATE);

      return _possibleConstructorReturn(this, _getPrototypeOf(DATE).apply(this, arguments));
    }

    _createClass(DATE, [{
      key: "toSql",
      value: function toSql() {
        return "TIMESTAMP";
      }
    }, {
      key: "_stringify",
      value: function _stringify(date, options) {
        if (!moment.isMoment(date)) {
          date = this._applyTimezone(date, options);
        }

        if (this._length) {
          return date.format("YYYY-MM-DD HH:mm:ss.SSS");
        }

        return date.format("YYYY-MM-DD HH:mm:ss");
      }
    }], [{
      key: "parse",
      value: function parse(value, options) {
        value = value.string();

        if (value === null) {
          return value;
        }

        if (momentTz.tz.zone(options.timezone)) {
          value = momentTz.tz(value, options.timezone).toDate();
        } else {
          value = new Date("".concat(value, " ").concat(options.timezone));
        }

        return value;
      }
    }]);

    return DATE;
  }(BaseTypes.DATE);

  var DATEONLY =
  /*#__PURE__*/
  function (_BaseTypes$DATEONLY) {
    _inherits(DATEONLY, _BaseTypes$DATEONLY);

    function DATEONLY() {
      _classCallCheck(this, DATEONLY);

      return _possibleConstructorReturn(this, _getPrototypeOf(DATEONLY).apply(this, arguments));
    }

    _createClass(DATEONLY, null, [{
      key: "parse",
      value: function parse(value) {
        return value.string();
      }
    }]);

    return DATEONLY;
  }(BaseTypes.DATEONLY);

  var UUID =
  /*#__PURE__*/
  function (_BaseTypes$UUID) {
    _inherits(UUID, _BaseTypes$UUID);

    function UUID() {
      _classCallCheck(this, UUID);

      return _possibleConstructorReturn(this, _getPrototypeOf(UUID).apply(this, arguments));
    }

    _createClass(UUID, [{
      key: "toSql",
      value: function toSql() {
        return "VARCHAR(36)";
      }
    }]);

    return UUID;
  }(BaseTypes.UUID);

  var TEXT =
  /*#__PURE__*/
  function (_BaseTypes$TEXT) {
    _inherits(TEXT, _BaseTypes$TEXT);

    function TEXT() {
      _classCallCheck(this, TEXT);

      return _possibleConstructorReturn(this, _getPrototypeOf(TEXT).apply(this, arguments));
    }

    _createClass(TEXT, [{
      key: "toSql",
      value: function toSql() {
        return "TEXT";
      }
    }]);

    return TEXT;
  }(BaseTypes.TEXT);

  var BOOLEAN =
  /*#__PURE__*/
  function (_BaseTypes$BOOLEAN) {
    _inherits(BOOLEAN, _BaseTypes$BOOLEAN);

    function BOOLEAN() {
      _classCallCheck(this, BOOLEAN);

      return _possibleConstructorReturn(this, _getPrototypeOf(BOOLEAN).apply(this, arguments));
    }

    _createClass(BOOLEAN, [{
      key: "toSql",
      value: function toSql() {
        return "BOOLEAN";
      }
    }]);

    return BOOLEAN;
  }(BaseTypes.BOOLEAN);

  var JSONTYPE =
  /*#__PURE__*/
  function (_BaseTypes$JSON) {
    _inherits(JSONTYPE, _BaseTypes$JSON);

    function JSONTYPE() {
      _classCallCheck(this, JSONTYPE);

      return _possibleConstructorReturn(this, _getPrototypeOf(JSONTYPE).apply(this, arguments));
    }

    _createClass(JSONTYPE, [{
      key: "_stringify",
      value: function _stringify(value, options) {
        return options.operation === "where" && typeof value === "string" ? value : JSON.stringify(value);
      }
    }]);

    return JSONTYPE;
  }(BaseTypes.JSON);

  return {
    TEXT: TEXT,
    DATE: DATE,
    BOOLEAN: BOOLEAN,
    DATEONLY: DATEONLY,
    UUID: UUID,
    JSON: JSONTYPE
  };
};
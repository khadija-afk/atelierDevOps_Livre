"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;

var __defNormalProp = function __defNormalProp(obj, key, value) {
  return key in obj ? __defProp(obj, key, {
    enumerable: true,
    configurable: true,
    writable: true,
    value: value
  }) : obj[key] = value;
};

var __spreadValues = function __spreadValues(a, b) {
  for (var prop in b || (b = {})) {
    if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);
  }

  if (__getOwnPropSymbols) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = __getOwnPropSymbols(b)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var prop = _step.value;
        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }

  return a;
};

var __spreadProps = function __spreadProps(a, b) {
  return __defProps(a, __getOwnPropDescs(b));
};

var sequelizeErrors = require("../../errors");

var _require = require("../abstract/query-interface"),
    QueryInterface = _require.QueryInterface;

var QueryTypes = require("../../query-types");

var SnowflakeQueryInterface =
/*#__PURE__*/
function (_QueryInterface) {
  _inherits(SnowflakeQueryInterface, _QueryInterface);

  function SnowflakeQueryInterface() {
    _classCallCheck(this, SnowflakeQueryInterface);

    return _possibleConstructorReturn(this, _getPrototypeOf(SnowflakeQueryInterface).apply(this, arguments));
  }

  _createClass(SnowflakeQueryInterface, [{
    key: "removeColumn",
    value: function removeColumn(tableName, columnName, options) {
      var _this = this;

      var _ref, _ref2, results;

      return regeneratorRuntime.async(function removeColumn$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              options = options || {};
              _context.next = 3;
              return regeneratorRuntime.awrap(this.sequelize.query(this.queryGenerator.getForeignKeyQuery(tableName.tableName ? tableName : {
                tableName: tableName,
                schema: this.sequelize.config.database
              }, columnName), __spreadValues({
                raw: true
              }, options)));

            case 3:
              _ref = _context.sent;
              _ref2 = _slicedToArray(_ref, 1);
              results = _ref2[0];

              if (!(results.length && results[0].constraint_name !== "PRIMARY")) {
                _context.next = 9;
                break;
              }

              _context.next = 9;
              return regeneratorRuntime.awrap(Promise.all(results.map(function (constraint) {
                return _this.sequelize.query(_this.queryGenerator.dropForeignKeyQuery(tableName, constraint.constraint_name), __spreadValues({
                  raw: true
                }, options));
              })));

            case 9:
              _context.next = 11;
              return regeneratorRuntime.awrap(this.sequelize.query(this.queryGenerator.removeColumnQuery(tableName, columnName), __spreadValues({
                raw: true
              }, options)));

            case 11:
              return _context.abrupt("return", _context.sent);

            case 12:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "upsert",
    value: function upsert(tableName, insertValues, updateValues, where, options) {
      var model, sql;
      return regeneratorRuntime.async(function upsert$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              options = __spreadValues({}, options);
              options.type = QueryTypes.UPSERT;
              options.updateOnDuplicate = Object.keys(updateValues);
              model = options.model;
              sql = this.queryGenerator.insertQuery(tableName, insertValues, model.rawAttributes, options);
              _context2.next = 7;
              return regeneratorRuntime.awrap(this.sequelize.query(sql, options));

            case 7:
              return _context2.abrupt("return", _context2.sent);

            case 8:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "removeConstraint",
    value: function removeConstraint(tableName, constraintName, options) {
      var sql, constraints, constraint, query;
      return regeneratorRuntime.async(function removeConstraint$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              sql = this.queryGenerator.showConstraintsQuery(tableName.tableName ? tableName : {
                tableName: tableName,
                schema: this.sequelize.config.database
              }, constraintName);
              _context3.next = 3;
              return regeneratorRuntime.awrap(this.sequelize.query(sql, __spreadProps(__spreadValues({}, options), {
                type: this.sequelize.QueryTypes.SHOWCONSTRAINTS
              })));

            case 3:
              constraints = _context3.sent;
              constraint = constraints[0];

              if (!(!constraint || !constraint.constraintType)) {
                _context3.next = 7;
                break;
              }

              throw new sequelizeErrors.UnknownConstraintError({
                message: "Constraint ".concat(constraintName, " on table ").concat(tableName, " does not exist"),
                constraint: constraintName,
                table: tableName
              });

            case 7:
              if (constraint.constraintType === "FOREIGN KEY") {
                query = this.queryGenerator.dropForeignKeyQuery(tableName, constraintName);
              } else {
                query = this.queryGenerator.removeIndexQuery(constraint.tableName, constraint.constraintName);
              }

              _context3.next = 10;
              return regeneratorRuntime.awrap(this.sequelize.query(query, options));

            case 10:
              return _context3.abrupt("return", _context3.sent);

            case 11:
            case "end":
              return _context3.stop();
          }
        }
      }, null, this);
    }
  }]);

  return SnowflakeQueryInterface;
}(QueryInterface);

exports.SnowflakeQueryInterface = SnowflakeQueryInterface;
'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var LRU = require('lru-cache')["default"];

var parserCache = new LRU({
  max: 15000
});

function keyFromFields(type, fields, options, config) {
  var res = [type, _typeof(options.nestTables), options.nestTables, Boolean(options.rowsAsArray), Boolean(options.supportBigNumbers || config.supportBigNumbers), Boolean(options.bigNumberStrings || config.bigNumberStrings), _typeof(options.typeCast), options.timezone || config.timezone, Boolean(options.decimalNumbers), options.dateStrings];

  for (var i = 0; i < fields.length; ++i) {
    var field = fields[i];
    res.push([field.name, field.columnType, field.length, field.schema, field.table, field.flags, field.characterSet]);
  }

  return JSON.stringify(res, null, 0);
}

function getParser(type, fields, options, config, compiler) {
  var key = keyFromFields(type, fields, options, config);
  var parser = parserCache.get(key);

  if (parser) {
    return parser;
  }

  parser = compiler(fields, options, config);
  parserCache.set(key, parser);
  return parser;
}

function setMaxCache(max) {
  parserCache = new LRU({
    max: max
  });
}

function clearCache() {
  parserCache.clear();
}

module.exports = {
  getParser: getParser,
  setMaxCache: setMaxCache,
  clearCache: clearCache,
  _keyFromFields: keyFromFields
};
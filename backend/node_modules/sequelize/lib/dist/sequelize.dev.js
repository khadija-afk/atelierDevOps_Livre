"use strict";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;

var __defNormalProp = function __defNormalProp(obj, key, value) {
  return key in obj ? __defProp(obj, key, {
    enumerable: true,
    configurable: true,
    writable: true,
    value: value
  }) : obj[key] = value;
};

var __spreadValues = function __spreadValues(a, b) {
  for (var prop in b || (b = {})) {
    if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);
  }

  if (__getOwnPropSymbols) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = __getOwnPropSymbols(b)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var prop = _step.value;
        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }

  return a;
};

var __spreadProps = function __spreadProps(a, b) {
  return __defProps(a, __getOwnPropDescs(b));
};

var url = require("url");

var path = require("path");

var pgConnectionString = require("pg-connection-string");

var retry = require("retry-as-promised")["default"];

var _ = require("lodash");

var Utils = require("./utils");

var Model = require("./model");

var DataTypes = require("./data-types");

var Deferrable = require("./deferrable");

var ModelManager = require("./model-manager");

var Transaction = require("./transaction");

var QueryTypes = require("./query-types");

var TableHints = require("./table-hints");

var IndexHints = require("./index-hints");

var sequelizeErrors = require("./errors");

var Hooks = require("./hooks");

var Association = require("./associations/index");

var Validator = require("./utils/validator-extras").validator;

var Op = require("./operators");

var deprecations = require("./utils/deprecations");

var _require = require("./dialects/abstract/query-interface"),
    QueryInterface = _require.QueryInterface;

var _require2 = require("./associations/belongs-to"),
    BelongsTo = _require2.BelongsTo;

var HasOne = require("./associations/has-one");

var _require3 = require("./associations/belongs-to-many"),
    BelongsToMany = _require3.BelongsToMany;

var _require4 = require("./associations/has-many"),
    HasMany = _require4.HasMany;

var _require5 = require("./dialects/sqlite/sqlite-utils"),
    withSqliteForeignKeysOff = _require5.withSqliteForeignKeysOff;

var _require6 = require("./utils/sql"),
    injectReplacements = _require6.injectReplacements;

var Sequelize =
/*#__PURE__*/
function () {
  function Sequelize(database, username, password, options) {
    _classCallCheck(this, Sequelize);

    var config;

    if (arguments.length === 1 && _typeof(database) === "object") {
      options = database;
      config = _.pick(options, "host", "port", "database", "username", "password");
    } else if (arguments.length === 1 && typeof database === "string" || arguments.length === 2 && _typeof(username) === "object") {
      config = {};
      options = username || {};
      var urlParts = url.parse(arguments[0], true);
      options.dialect = urlParts.protocol.replace(/:$/, "");
      options.host = urlParts.hostname;

      if (options.dialect === "sqlite" && urlParts.pathname && !urlParts.pathname.startsWith("/:memory")) {
        var storagePath = path.join(options.host, urlParts.pathname);
        options.storage = path.resolve(options.storage || storagePath);
      }

      if (urlParts.pathname) {
        config.database = urlParts.pathname.replace(/^\//, "");
      }

      if (urlParts.port) {
        options.port = urlParts.port;
      }

      if (urlParts.auth) {
        var authParts = urlParts.auth.split(":");
        config.username = authParts[0];
        if (authParts.length > 1) config.password = authParts.slice(1).join(":");
      }

      if (urlParts.query) {
        if (urlParts.query.host) {
          options.host = urlParts.query.host;
        }

        if (options.dialectOptions) {
          Object.assign(options.dialectOptions, urlParts.query);
        } else {
          options.dialectOptions = urlParts.query;

          if (urlParts.query.options) {
            try {
              var o = JSON.parse(urlParts.query.options);
              options.dialectOptions.options = o;
            } catch (e) {}
          }
        }
      }

      if (["postgres", "postgresql"].includes(options.dialect)) {
        Object.assign(options.dialectOptions, pgConnectionString.parse(arguments[0]));
      }
    } else {
      options = options || {};
      config = {
        database: database,
        username: username,
        password: password
      };
    }

    Sequelize.runHooks("beforeInit", config, options);
    this.options = __spreadValues({
      dialect: null,
      dialectModule: null,
      dialectModulePath: null,
      host: "localhost",
      protocol: "tcp",
      define: {},
      query: {},
      sync: {},
      timezone: "+00:00",
      standardConformingStrings: true,
      logging: console.log,
      omitNull: false,
      "native": false,
      replication: false,
      ssl: void 0,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: {
        max: 5,
        match: ["SQLITE_BUSY: database is locked"]
      },
      transactionType: Transaction.TYPES.DEFERRED,
      isolationLevel: null,
      databaseVersion: 0,
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: "throw"
    }, options);

    if (!this.options.dialect) {
      throw new Error("Dialect needs to be explicitly supplied as of v4.0.0");
    }

    if (this.options.dialect === "postgresql") {
      this.options.dialect = "postgres";
    }

    if (this.options.dialect === "sqlite" && this.options.timezone !== "+00:00") {
      throw new Error("Setting a custom timezone is not supported by SQLite, dates are always returned as UTC. Please remove the custom timezone parameter.");
    }

    if (this.options.logging === true) {
      deprecations.noTrueLogging();
      this.options.logging = console.log;
    }

    this._setupHooks(options.hooks);

    this.config = {
      database: config.database || this.options.database,
      username: config.username || this.options.username,
      password: config.password || this.options.password || null,
      host: config.host || this.options.host,
      port: config.port || this.options.port,
      pool: this.options.pool,
      protocol: this.options.protocol,
      "native": this.options["native"],
      ssl: this.options.ssl,
      replication: this.options.replication,
      dialectModule: this.options.dialectModule,
      dialectModulePath: this.options.dialectModulePath,
      keepDefaultTimezone: this.options.keepDefaultTimezone,
      dialectOptions: this.options.dialectOptions
    };
    var Dialect;

    switch (this.getDialect()) {
      case "mariadb":
        Dialect = require("./dialects/mariadb");
        break;

      case "mssql":
        Dialect = require("./dialects/mssql");
        break;

      case "mysql":
        Dialect = require("./dialects/mysql");
        break;

      case "oracle":
        Dialect = require("./dialects/oracle");
        break;

      case "postgres":
        Dialect = require("./dialects/postgres");
        break;

      case "sqlite":
        Dialect = require("./dialects/sqlite");
        break;

      case "db2":
        Dialect = require("./dialects/db2");
        break;

      case "snowflake":
        Dialect = require("./dialects/snowflake");
        break;

      default:
        throw new Error("The dialect ".concat(this.getDialect(), " is not supported. Supported dialects: mssql, mariadb, mysql, oracle, postgres, db2 and sqlite."));
    }

    this.dialect = new Dialect(this);
    this.dialect.queryGenerator.typeValidation = options.typeValidation;

    if (_.isPlainObject(this.options.operatorsAliases)) {
      deprecations.noStringOperators();
      this.dialect.queryGenerator.setOperatorsAliases(this.options.operatorsAliases);
    } else if (typeof this.options.operatorsAliases === "boolean") {
      deprecations.noBoolOperatorAliases();
    }

    this.queryInterface = this.dialect.queryInterface;
    this.models = {};
    this.modelManager = new ModelManager(this);
    this.connectionManager = this.dialect.connectionManager;
    Sequelize.runHooks("afterInit", this);
  }

  _createClass(Sequelize, [{
    key: "refreshTypes",
    value: function refreshTypes() {
      this.connectionManager.refreshTypeParser(DataTypes);
    }
  }, {
    key: "getDialect",
    value: function getDialect() {
      return this.options.dialect;
    }
  }, {
    key: "getDatabaseName",
    value: function getDatabaseName() {
      return this.config.database;
    }
  }, {
    key: "getQueryInterface",
    value: function getQueryInterface() {
      return this.queryInterface;
    }
  }, {
    key: "define",
    value: function define(modelName, attributes) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      options.modelName = modelName;
      options.sequelize = this;

      var model =
      /*#__PURE__*/
      function (_Model) {
        _inherits(model, _Model);

        function model() {
          _classCallCheck(this, model);

          return _possibleConstructorReturn(this, _getPrototypeOf(model).apply(this, arguments));
        }

        return model;
      }(Model);

      model.init(attributes, options);
      return model;
    }
  }, {
    key: "model",
    value: function model(modelName) {
      if (!this.isDefined(modelName)) {
        throw new Error("".concat(modelName, " has not been defined"));
      }

      return this.modelManager.getModel(modelName);
    }
  }, {
    key: "isDefined",
    value: function isDefined(modelName) {
      return !!this.modelManager.models.find(function (model) {
        return model.name === modelName;
      });
    }
  }, {
    key: "query",
    value: function query(sql, options) {
      var _this = this;

      var bindParameters, _this$dialect$Query$f, _this$dialect$Query$f2, checkTransaction, retryOptions;

      return regeneratorRuntime.async(function query$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              options = __spreadValues(__spreadValues({}, this.options.query), options);

              if (options.instance && !options.model) {
                options.model = options.instance.constructor;
              }

              if (!options.instance && !options.model) {
                options.raw = true;
              }

              if (options.mapToModel) {
                options.fieldMap = _.get(options, "model.fieldAttributeMap", {});
              }

              options = _.defaults(options, {
                logging: Object.prototype.hasOwnProperty.call(this.options, "logging") ? this.options.logging : console.log,
                searchPath: Object.prototype.hasOwnProperty.call(this.options, "searchPath") ? this.options.searchPath : "DEFAULT"
              });

              if (!options.type) {
                if (options.model || options.nest || options.plain) {
                  options.type = QueryTypes.SELECT;
                } else {
                  options.type = QueryTypes.RAW;
                }
              }

              if (!this.dialect.supports.searchPath || !this.options.dialectOptions || !this.options.dialectOptions.prependSearchPath || options.supportsSearchPath === false) {
                delete options.searchPath;
              } else if (!options.searchPath) {
                options.searchPath = "DEFAULT";
              }

              if (!(_typeof(sql) === "object")) {
                _context2.next = 17;
                break;
              }

              if (!(sql.values !== void 0)) {
                _context2.next = 12;
                break;
              }

              if (!(options.replacements !== void 0)) {
                _context2.next = 11;
                break;
              }

              throw new Error("Both `sql.values` and `options.replacements` cannot be set at the same time");

            case 11:
              options.replacements = sql.values;

            case 12:
              if (!(sql.bind !== void 0)) {
                _context2.next = 16;
                break;
              }

              if (!(options.bind !== void 0)) {
                _context2.next = 15;
                break;
              }

              throw new Error("Both `sql.bind` and `options.bind` cannot be set at the same time");

            case 15:
              options.bind = sql.bind;

            case 16:
              if (sql.query !== void 0) {
                sql = sql.query;
              }

            case 17:
              sql = sql.trim();

              if (!(options.replacements && options.bind)) {
                _context2.next = 20;
                break;
              }

              throw new Error("Both `replacements` and `bind` cannot be set at the same time");

            case 20:
              if (options.replacements) {
                sql = injectReplacements(sql, this.dialect, options.replacements);
              }

              if (options.bind) {
                _this$dialect$Query$f = this.dialect.Query.formatBindParameters(sql, options.bind, this.options.dialect);
                _this$dialect$Query$f2 = _slicedToArray(_this$dialect$Query$f, 2);
                sql = _this$dialect$Query$f2[0];
                bindParameters = _this$dialect$Query$f2[1];
              }

              checkTransaction = function checkTransaction() {
                if (options.transaction && options.transaction.finished && !options.completesTransaction) {
                  var error = new Error("".concat(options.transaction.finished, " has been called on this transaction(").concat(options.transaction.id, "), you can no longer use it. (The rejected query is attached as the 'sql' property of this error)"));
                  error.sql = sql;
                  throw error;
                }
              };

              retryOptions = __spreadValues(__spreadValues({}, this.options.retry), options.retry);
              return _context2.abrupt("return", retry(function _callee() {
                var connection, query;
                return regeneratorRuntime.async(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        if (options.transaction === void 0 && Sequelize._cls) {
                          options.transaction = Sequelize._cls.get("transaction");
                        }

                        checkTransaction();
                        _context.next = 4;
                        return regeneratorRuntime.awrap(options.transaction ? options.transaction.connection : _this.connectionManager.getConnection(options));

                      case 4:
                        connection = _context.sent;

                        if (_this.options.dialect === "db2" && options.alter) {
                          if (options.alter.drop === false) {
                            connection.dropTable = false;
                          }
                        }

                        query = new _this.dialect.Query(connection, _this, options);
                        _context.prev = 7;
                        _context.next = 10;
                        return regeneratorRuntime.awrap(_this.runHooks("beforeQuery", options, query));

                      case 10:
                        checkTransaction();
                        _context.next = 13;
                        return regeneratorRuntime.awrap(query.run(sql, bindParameters));

                      case 13:
                        return _context.abrupt("return", _context.sent);

                      case 14:
                        _context.prev = 14;
                        _context.next = 17;
                        return regeneratorRuntime.awrap(_this.runHooks("afterQuery", options, query));

                      case 17:
                        if (!options.transaction) {
                          _this.connectionManager.releaseConnection(connection);
                        }

                        return _context.finish(14);

                      case 19:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, null, null, [[7,, 14, 19]]);
              }, retryOptions));

            case 25:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "set",
    value: function set(variables, options) {
      var query;
      return regeneratorRuntime.async(function set$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              options = __spreadValues(__spreadValues({}, this.options.set), _typeof(options) === "object" && options);

              if (["mysql", "mariadb"].includes(this.options.dialect)) {
                _context3.next = 3;
                break;
              }

              throw new Error("sequelize.set is only supported for mysql or mariadb");

            case 3:
              if (!(!options.transaction || !(options.transaction instanceof Transaction))) {
                _context3.next = 5;
                break;
              }

              throw new TypeError("options.transaction is required");

            case 5:
              options.raw = true;
              options.plain = true;
              options.type = "SET";
              query = "SET ".concat(_.map(variables, function (v, k) {
                return "@".concat(k, " := ").concat(typeof v === "string" ? "\"".concat(v, "\"") : v);
              }).join(", "));
              _context3.next = 11;
              return regeneratorRuntime.awrap(this.query(query, options));

            case 11:
              return _context3.abrupt("return", _context3.sent);

            case 12:
            case "end":
              return _context3.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "escape",
    value: function escape(value) {
      return this.dialect.queryGenerator.escape(value);
    }
  }, {
    key: "createSchema",
    value: function createSchema(schema, options) {
      return regeneratorRuntime.async(function createSchema$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return regeneratorRuntime.awrap(this.getQueryInterface().createSchema(schema, options));

            case 2:
              return _context4.abrupt("return", _context4.sent);

            case 3:
            case "end":
              return _context4.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "showAllSchemas",
    value: function showAllSchemas(options) {
      return regeneratorRuntime.async(function showAllSchemas$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return regeneratorRuntime.awrap(this.getQueryInterface().showAllSchemas(options));

            case 2:
              return _context5.abrupt("return", _context5.sent);

            case 3:
            case "end":
              return _context5.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "dropSchema",
    value: function dropSchema(schema, options) {
      return regeneratorRuntime.async(function dropSchema$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return regeneratorRuntime.awrap(this.getQueryInterface().dropSchema(schema, options));

            case 2:
              return _context6.abrupt("return", _context6.sent);

            case 3:
            case "end":
              return _context6.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "dropAllSchemas",
    value: function dropAllSchemas(options) {
      return regeneratorRuntime.async(function dropAllSchemas$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              _context7.next = 2;
              return regeneratorRuntime.awrap(this.getQueryInterface().dropAllSchemas(options));

            case 2:
              return _context7.abrupt("return", _context7.sent);

            case 3:
            case "end":
              return _context7.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "sync",
    value: function sync(options) {
      var models, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, model;

      return regeneratorRuntime.async(function sync$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              options = __spreadProps(__spreadValues(__spreadValues(__spreadValues({}, this.options), this.options.sync), options), {
                hooks: options ? options.hooks !== false : true
              });

              if (!options.match) {
                _context8.next = 4;
                break;
              }

              if (options.match.test(this.config.database)) {
                _context8.next = 4;
                break;
              }

              throw new Error("Database \"".concat(this.config.database, "\" does not match sync match parameter \"").concat(options.match, "\""));

            case 4:
              if (!options.hooks) {
                _context8.next = 7;
                break;
              }

              _context8.next = 7;
              return regeneratorRuntime.awrap(this.runHooks("beforeBulkSync", options));

            case 7:
              if (!options.force) {
                _context8.next = 10;
                break;
              }

              _context8.next = 10;
              return regeneratorRuntime.awrap(this.drop(options));

            case 10:
              if (!(this.modelManager.models.length === 0)) {
                _context8.next = 15;
                break;
              }

              _context8.next = 13;
              return regeneratorRuntime.awrap(this.authenticate(options));

            case 13:
              _context8.next = 45;
              break;

            case 15:
              models = this.modelManager.getModelsTopoSortedByForeignKey();

              if (!(models == null)) {
                _context8.next = 18;
                break;
              }

              return _context8.abrupt("return", this._syncModelsWithCyclicReferences(options));

            case 18:
              models.reverse();
              _iteratorNormalCompletion2 = true;
              _didIteratorError2 = false;
              _iteratorError2 = undefined;
              _context8.prev = 22;
              _iterator2 = models[Symbol.iterator]();

            case 24:
              if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                _context8.next = 31;
                break;
              }

              model = _step2.value;
              _context8.next = 28;
              return regeneratorRuntime.awrap(model.sync(options));

            case 28:
              _iteratorNormalCompletion2 = true;
              _context8.next = 24;
              break;

            case 31:
              _context8.next = 37;
              break;

            case 33:
              _context8.prev = 33;
              _context8.t0 = _context8["catch"](22);
              _didIteratorError2 = true;
              _iteratorError2 = _context8.t0;

            case 37:
              _context8.prev = 37;
              _context8.prev = 38;

              if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                _iterator2["return"]();
              }

            case 40:
              _context8.prev = 40;

              if (!_didIteratorError2) {
                _context8.next = 43;
                break;
              }

              throw _iteratorError2;

            case 43:
              return _context8.finish(40);

            case 44:
              return _context8.finish(37);

            case 45:
              if (!options.hooks) {
                _context8.next = 48;
                break;
              }

              _context8.next = 48;
              return regeneratorRuntime.awrap(this.runHooks("afterBulkSync", options));

            case 48:
              return _context8.abrupt("return", this);

            case 49:
            case "end":
              return _context8.stop();
          }
        }
      }, null, this, [[22, 33, 37, 45], [38,, 40, 44]]);
    }
  }, {
    key: "_syncModelsWithCyclicReferences",
    value: function _syncModelsWithCyclicReferences(options) {
      var _this2 = this;

      var _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, model, _iteratorNormalCompletion5, _didIteratorError5, _iteratorError5, _iterator5, _step5, _model;

      return regeneratorRuntime.async(function _syncModelsWithCyclicReferences$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              if (!(this.dialect.name === "sqlite")) {
                _context10.next = 4;
                break;
              }

              _context10.next = 3;
              return regeneratorRuntime.awrap(withSqliteForeignKeysOff(this, options, function _callee2() {
                var _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, model;

                return regeneratorRuntime.async(function _callee2$(_context9) {
                  while (1) {
                    switch (_context9.prev = _context9.next) {
                      case 0:
                        _iteratorNormalCompletion3 = true;
                        _didIteratorError3 = false;
                        _iteratorError3 = undefined;
                        _context9.prev = 3;
                        _iterator3 = _this2.modelManager.models[Symbol.iterator]();

                      case 5:
                        if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {
                          _context9.next = 12;
                          break;
                        }

                        model = _step3.value;
                        _context9.next = 9;
                        return regeneratorRuntime.awrap(model.sync(options));

                      case 9:
                        _iteratorNormalCompletion3 = true;
                        _context9.next = 5;
                        break;

                      case 12:
                        _context9.next = 18;
                        break;

                      case 14:
                        _context9.prev = 14;
                        _context9.t0 = _context9["catch"](3);
                        _didIteratorError3 = true;
                        _iteratorError3 = _context9.t0;

                      case 18:
                        _context9.prev = 18;
                        _context9.prev = 19;

                        if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                          _iterator3["return"]();
                        }

                      case 21:
                        _context9.prev = 21;

                        if (!_didIteratorError3) {
                          _context9.next = 24;
                          break;
                        }

                        throw _iteratorError3;

                      case 24:
                        return _context9.finish(21);

                      case 25:
                        return _context9.finish(18);

                      case 26:
                      case "end":
                        return _context9.stop();
                    }
                  }
                }, null, null, [[3, 14, 18, 26], [19,, 21, 25]]);
              }));

            case 3:
              return _context10.abrupt("return");

            case 4:
              _iteratorNormalCompletion4 = true;
              _didIteratorError4 = false;
              _iteratorError4 = undefined;
              _context10.prev = 7;
              _iterator4 = this.modelManager.models[Symbol.iterator]();

            case 9:
              if (_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done) {
                _context10.next = 16;
                break;
              }

              model = _step4.value;
              _context10.next = 13;
              return regeneratorRuntime.awrap(model.sync(__spreadProps(__spreadValues({}, options), {
                withoutForeignKeyConstraints: true
              })));

            case 13:
              _iteratorNormalCompletion4 = true;
              _context10.next = 9;
              break;

            case 16:
              _context10.next = 22;
              break;

            case 18:
              _context10.prev = 18;
              _context10.t0 = _context10["catch"](7);
              _didIteratorError4 = true;
              _iteratorError4 = _context10.t0;

            case 22:
              _context10.prev = 22;
              _context10.prev = 23;

              if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
                _iterator4["return"]();
              }

            case 25:
              _context10.prev = 25;

              if (!_didIteratorError4) {
                _context10.next = 28;
                break;
              }

              throw _iteratorError4;

            case 28:
              return _context10.finish(25);

            case 29:
              return _context10.finish(22);

            case 30:
              _iteratorNormalCompletion5 = true;
              _didIteratorError5 = false;
              _iteratorError5 = undefined;
              _context10.prev = 33;
              _iterator5 = this.modelManager.models[Symbol.iterator]();

            case 35:
              if (_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done) {
                _context10.next = 42;
                break;
              }

              _model = _step5.value;
              _context10.next = 39;
              return regeneratorRuntime.awrap(_model.sync(__spreadProps(__spreadValues({}, options), {
                force: false,
                alter: true
              })));

            case 39:
              _iteratorNormalCompletion5 = true;
              _context10.next = 35;
              break;

            case 42:
              _context10.next = 48;
              break;

            case 44:
              _context10.prev = 44;
              _context10.t1 = _context10["catch"](33);
              _didIteratorError5 = true;
              _iteratorError5 = _context10.t1;

            case 48:
              _context10.prev = 48;
              _context10.prev = 49;

              if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
                _iterator5["return"]();
              }

            case 51:
              _context10.prev = 51;

              if (!_didIteratorError5) {
                _context10.next = 54;
                break;
              }

              throw _iteratorError5;

            case 54:
              return _context10.finish(51);

            case 55:
              return _context10.finish(48);

            case 56:
            case "end":
              return _context10.stop();
          }
        }
      }, null, this, [[7, 18, 22, 30], [23,, 25, 29], [33, 44, 48, 56], [49,, 51, 55]]);
    }
  }, {
    key: "truncate",
    value: function truncate(options) {
      var sortedModels, models, hasCyclicDependencies, _iteratorNormalCompletion6, _didIteratorError6, _iteratorError6, _iterator6, _step6, model;

      return regeneratorRuntime.async(function truncate$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              sortedModels = this.modelManager.getModelsTopoSortedByForeignKey();
              models = sortedModels || this.modelManager.models;
              hasCyclicDependencies = sortedModels == null;

              if (!(hasCyclicDependencies && (!options || !options.cascade))) {
                _context12.next = 5;
                break;
              }

              throw new Error('Sequelize#truncate: Some of your models have cyclic references (foreign keys). You need to use the "cascade" option to be able to delete rows from models that have cyclic references.');

            case 5:
              if (!(hasCyclicDependencies && this.dialect.name === "sqlite")) {
                _context12.next = 7;
                break;
              }

              return _context12.abrupt("return", withSqliteForeignKeysOff(this, options, function _callee3() {
                return regeneratorRuntime.async(function _callee3$(_context11) {
                  while (1) {
                    switch (_context11.prev = _context11.next) {
                      case 0:
                        _context11.next = 2;
                        return regeneratorRuntime.awrap(Promise.all(models.map(function (model) {
                          return model.truncate(options);
                        })));

                      case 2:
                      case "end":
                        return _context11.stop();
                    }
                  }
                });
              }));

            case 7:
              if (!(options && options.cascade)) {
                _context12.next = 36;
                break;
              }

              _iteratorNormalCompletion6 = true;
              _didIteratorError6 = false;
              _iteratorError6 = undefined;
              _context12.prev = 11;
              _iterator6 = models[Symbol.iterator]();

            case 13:
              if (_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done) {
                _context12.next = 20;
                break;
              }

              model = _step6.value;
              _context12.next = 17;
              return regeneratorRuntime.awrap(model.truncate(options));

            case 17:
              _iteratorNormalCompletion6 = true;
              _context12.next = 13;
              break;

            case 20:
              _context12.next = 26;
              break;

            case 22:
              _context12.prev = 22;
              _context12.t0 = _context12["catch"](11);
              _didIteratorError6 = true;
              _iteratorError6 = _context12.t0;

            case 26:
              _context12.prev = 26;
              _context12.prev = 27;

              if (!_iteratorNormalCompletion6 && _iterator6["return"] != null) {
                _iterator6["return"]();
              }

            case 29:
              _context12.prev = 29;

              if (!_didIteratorError6) {
                _context12.next = 32;
                break;
              }

              throw _iteratorError6;

            case 32:
              return _context12.finish(29);

            case 33:
              return _context12.finish(26);

            case 34:
              _context12.next = 38;
              break;

            case 36:
              _context12.next = 38;
              return regeneratorRuntime.awrap(Promise.all(models.map(function (model) {
                return model.truncate(options);
              })));

            case 38:
            case "end":
              return _context12.stop();
          }
        }
      }, null, this, [[11, 22, 26, 34], [27,, 29, 33]]);
    }
  }, {
    key: "drop",
    value: function drop(options) {
      var _this3 = this;

      var _iteratorNormalCompletion7, _didIteratorError7, _iteratorError7, _iterator7, _step7, model, sortedModels, _iteratorNormalCompletion8, _didIteratorError8, _iteratorError8, _iterator8, _step8, _model2, _iteratorNormalCompletion10, _didIteratorError10, _iteratorError10, _loop, _iterator10, _step10, _iteratorNormalCompletion11, _didIteratorError11, _iteratorError11, _iterator11, _step11, _model4;

      return regeneratorRuntime.async(function drop$(_context15) {
        while (1) {
          switch (_context15.prev = _context15.next) {
            case 0:
              if (!(options && options.cascade)) {
                _context15.next = 27;
                break;
              }

              _iteratorNormalCompletion7 = true;
              _didIteratorError7 = false;
              _iteratorError7 = undefined;
              _context15.prev = 4;
              _iterator7 = this.modelManager.models[Symbol.iterator]();

            case 6:
              if (_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done) {
                _context15.next = 13;
                break;
              }

              model = _step7.value;
              _context15.next = 10;
              return regeneratorRuntime.awrap(model.drop(options));

            case 10:
              _iteratorNormalCompletion7 = true;
              _context15.next = 6;
              break;

            case 13:
              _context15.next = 19;
              break;

            case 15:
              _context15.prev = 15;
              _context15.t0 = _context15["catch"](4);
              _didIteratorError7 = true;
              _iteratorError7 = _context15.t0;

            case 19:
              _context15.prev = 19;
              _context15.prev = 20;

              if (!_iteratorNormalCompletion7 && _iterator7["return"] != null) {
                _iterator7["return"]();
              }

            case 22:
              _context15.prev = 22;

              if (!_didIteratorError7) {
                _context15.next = 25;
                break;
              }

              throw _iteratorError7;

            case 25:
              return _context15.finish(22);

            case 26:
              return _context15.finish(19);

            case 27:
              sortedModels = this.modelManager.getModelsTopoSortedByForeignKey();

              if (!sortedModels) {
                _context15.next = 55;
                break;
              }

              _iteratorNormalCompletion8 = true;
              _didIteratorError8 = false;
              _iteratorError8 = undefined;
              _context15.prev = 32;
              _iterator8 = sortedModels[Symbol.iterator]();

            case 34:
              if (_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done) {
                _context15.next = 41;
                break;
              }

              _model2 = _step8.value;
              _context15.next = 38;
              return regeneratorRuntime.awrap(_model2.drop(options));

            case 38:
              _iteratorNormalCompletion8 = true;
              _context15.next = 34;
              break;

            case 41:
              _context15.next = 47;
              break;

            case 43:
              _context15.prev = 43;
              _context15.t1 = _context15["catch"](32);
              _didIteratorError8 = true;
              _iteratorError8 = _context15.t1;

            case 47:
              _context15.prev = 47;
              _context15.prev = 48;

              if (!_iteratorNormalCompletion8 && _iterator8["return"] != null) {
                _iterator8["return"]();
              }

            case 50:
              _context15.prev = 50;

              if (!_didIteratorError8) {
                _context15.next = 53;
                break;
              }

              throw _iteratorError8;

            case 53:
              return _context15.finish(50);

            case 54:
              return _context15.finish(47);

            case 55:
              if (!(this.dialect.name === "sqlite")) {
                _context15.next = 59;
                break;
              }

              _context15.next = 58;
              return regeneratorRuntime.awrap(withSqliteForeignKeysOff(this, options, function _callee4() {
                var _iteratorNormalCompletion9, _didIteratorError9, _iteratorError9, _iterator9, _step9, _model3;

                return regeneratorRuntime.async(function _callee4$(_context13) {
                  while (1) {
                    switch (_context13.prev = _context13.next) {
                      case 0:
                        _iteratorNormalCompletion9 = true;
                        _didIteratorError9 = false;
                        _iteratorError9 = undefined;
                        _context13.prev = 3;
                        _iterator9 = _this3.modelManager.models[Symbol.iterator]();

                      case 5:
                        if (_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done) {
                          _context13.next = 12;
                          break;
                        }

                        _model3 = _step9.value;
                        _context13.next = 9;
                        return regeneratorRuntime.awrap(_model3.drop(options));

                      case 9:
                        _iteratorNormalCompletion9 = true;
                        _context13.next = 5;
                        break;

                      case 12:
                        _context13.next = 18;
                        break;

                      case 14:
                        _context13.prev = 14;
                        _context13.t0 = _context13["catch"](3);
                        _didIteratorError9 = true;
                        _iteratorError9 = _context13.t0;

                      case 18:
                        _context13.prev = 18;
                        _context13.prev = 19;

                        if (!_iteratorNormalCompletion9 && _iterator9["return"] != null) {
                          _iterator9["return"]();
                        }

                      case 21:
                        _context13.prev = 21;

                        if (!_didIteratorError9) {
                          _context13.next = 24;
                          break;
                        }

                        throw _iteratorError9;

                      case 24:
                        return _context13.finish(21);

                      case 25:
                        return _context13.finish(18);

                      case 26:
                      case "end":
                        return _context13.stop();
                    }
                  }
                }, null, null, [[3, 14, 18, 26], [19,, 21, 25]]);
              }));

            case 58:
              return _context15.abrupt("return");

            case 59:
              _iteratorNormalCompletion10 = true;
              _didIteratorError10 = false;
              _iteratorError10 = undefined;
              _context15.prev = 62;

              _loop = function _loop() {
                var model, tableName, foreignKeys;
                return regeneratorRuntime.async(function _loop$(_context14) {
                  while (1) {
                    switch (_context14.prev = _context14.next) {
                      case 0:
                        model = _step10.value;
                        tableName = model.getTableName();
                        _context14.next = 4;
                        return regeneratorRuntime.awrap(_this3.queryInterface.getForeignKeyReferencesForTable(tableName, options));

                      case 4:
                        foreignKeys = _context14.sent;
                        _context14.next = 7;
                        return regeneratorRuntime.awrap(Promise.all(foreignKeys.map(function (foreignKey) {
                          return _this3.queryInterface.removeConstraint(tableName, foreignKey.constraintName, options);
                        })));

                      case 7:
                      case "end":
                        return _context14.stop();
                    }
                  }
                });
              };

              _iterator10 = this.modelManager.models[Symbol.iterator]();

            case 65:
              if (_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done) {
                _context15.next = 71;
                break;
              }

              _context15.next = 68;
              return regeneratorRuntime.awrap(_loop());

            case 68:
              _iteratorNormalCompletion10 = true;
              _context15.next = 65;
              break;

            case 71:
              _context15.next = 77;
              break;

            case 73:
              _context15.prev = 73;
              _context15.t2 = _context15["catch"](62);
              _didIteratorError10 = true;
              _iteratorError10 = _context15.t2;

            case 77:
              _context15.prev = 77;
              _context15.prev = 78;

              if (!_iteratorNormalCompletion10 && _iterator10["return"] != null) {
                _iterator10["return"]();
              }

            case 80:
              _context15.prev = 80;

              if (!_didIteratorError10) {
                _context15.next = 83;
                break;
              }

              throw _iteratorError10;

            case 83:
              return _context15.finish(80);

            case 84:
              return _context15.finish(77);

            case 85:
              _iteratorNormalCompletion11 = true;
              _didIteratorError11 = false;
              _iteratorError11 = undefined;
              _context15.prev = 88;
              _iterator11 = this.modelManager.models[Symbol.iterator]();

            case 90:
              if (_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done) {
                _context15.next = 97;
                break;
              }

              _model4 = _step11.value;
              _context15.next = 94;
              return regeneratorRuntime.awrap(_model4.drop(options));

            case 94:
              _iteratorNormalCompletion11 = true;
              _context15.next = 90;
              break;

            case 97:
              _context15.next = 103;
              break;

            case 99:
              _context15.prev = 99;
              _context15.t3 = _context15["catch"](88);
              _didIteratorError11 = true;
              _iteratorError11 = _context15.t3;

            case 103:
              _context15.prev = 103;
              _context15.prev = 104;

              if (!_iteratorNormalCompletion11 && _iterator11["return"] != null) {
                _iterator11["return"]();
              }

            case 106:
              _context15.prev = 106;

              if (!_didIteratorError11) {
                _context15.next = 109;
                break;
              }

              throw _iteratorError11;

            case 109:
              return _context15.finish(106);

            case 110:
              return _context15.finish(103);

            case 111:
            case "end":
              return _context15.stop();
          }
        }
      }, null, this, [[4, 15, 19, 27], [20,, 22, 26], [32, 43, 47, 55], [48,, 50, 54], [62, 73, 77, 85], [78,, 80, 84], [88, 99, 103, 111], [104,, 106, 110]]);
    }
  }, {
    key: "authenticate",
    value: function authenticate(options) {
      return regeneratorRuntime.async(function authenticate$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              options = __spreadValues({
                raw: true,
                plain: true,
                type: QueryTypes.SELECT
              }, options);
              _context16.next = 3;
              return regeneratorRuntime.awrap(this.query(this.dialect.queryGenerator.authTestQuery(), options));

            case 3:
              return _context16.abrupt("return");

            case 4:
            case "end":
              return _context16.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "databaseVersion",
    value: function databaseVersion(options) {
      return regeneratorRuntime.async(function databaseVersion$(_context17) {
        while (1) {
          switch (_context17.prev = _context17.next) {
            case 0:
              _context17.next = 2;
              return regeneratorRuntime.awrap(this.getQueryInterface().databaseVersion(options));

            case 2:
              return _context17.abrupt("return", _context17.sent);

            case 3:
            case "end":
              return _context17.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "random",
    value: function random() {
      if (["postgres", "sqlite", "snowflake"].includes(this.getDialect())) {
        return this.fn("RANDOM");
      }

      return this.fn("RAND");
    }
  }, {
    key: "transaction",
    value: function transaction(options, autoCallback) {
      var transaction;
      return regeneratorRuntime.async(function transaction$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              if (typeof options === "function") {
                autoCallback = options;
                options = void 0;
              }

              transaction = new Transaction(this, options);

              if (autoCallback) {
                _context19.next = 6;
                break;
              }

              _context19.next = 5;
              return regeneratorRuntime.awrap(transaction.prepareEnvironment(false));

            case 5:
              return _context19.abrupt("return", transaction);

            case 6:
              return _context19.abrupt("return", Sequelize._clsRun(function _callee5() {
                var result;
                return regeneratorRuntime.async(function _callee5$(_context18) {
                  while (1) {
                    switch (_context18.prev = _context18.next) {
                      case 0:
                        _context18.next = 2;
                        return regeneratorRuntime.awrap(transaction.prepareEnvironment(true));

                      case 2:
                        _context18.prev = 2;
                        _context18.next = 5;
                        return regeneratorRuntime.awrap(autoCallback(transaction));

                      case 5:
                        result = _context18.sent;
                        _context18.next = 18;
                        break;

                      case 8:
                        _context18.prev = 8;
                        _context18.t0 = _context18["catch"](2);
                        _context18.prev = 10;
                        _context18.next = 13;
                        return regeneratorRuntime.awrap(transaction.rollback());

                      case 13:
                        _context18.next = 17;
                        break;

                      case 15:
                        _context18.prev = 15;
                        _context18.t1 = _context18["catch"](10);

                      case 17:
                        throw _context18.t0;

                      case 18:
                        _context18.next = 20;
                        return regeneratorRuntime.awrap(transaction.commit());

                      case 20:
                        return _context18.abrupt("return", result);

                      case 21:
                      case "end":
                        return _context18.stop();
                    }
                  }
                }, null, null, [[2, 8], [10, 15]]);
              }));

            case 7:
            case "end":
              return _context19.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "log",
    value: function log() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var options;

      var last = _.last(args);

      if (last && _.isPlainObject(last) && Object.prototype.hasOwnProperty.call(last, "logging")) {
        options = last;

        if (options.logging === console.log) {
          args.splice(args.length - 1, 1);
        }
      } else {
        options = this.options;
      }

      if (options.logging) {
        var _options;

        if (options.logging === true) {
          deprecations.noTrueLogging();
          options.logging = console.log;
        }

        if ((this.options.benchmark || options.benchmark) && options.logging === console.log) {
          args = ["".concat(args[0], " Elapsed time: ").concat(args[1], "ms")];
        }

        (_options = options).logging.apply(_options, _toConsumableArray(args));
      }
    }
  }, {
    key: "close",
    value: function close() {
      return this.connectionManager.close();
    }
  }, {
    key: "normalizeDataType",
    value: function normalizeDataType(Type) {
      var type = typeof Type === "function" ? new Type() : Type;
      var dialectTypes = this.dialect.DataTypes || {};

      if (dialectTypes[type.key]) {
        type = dialectTypes[type.key].extend(type);
      }

      if (type instanceof DataTypes.ARRAY) {
        if (!type.type) {
          throw new Error("ARRAY is missing type definition for its values.");
        }

        if (dialectTypes[type.type.key]) {
          type.type = dialectTypes[type.type.key].extend(type.type);
        }
      }

      return type;
    }
  }, {
    key: "normalizeAttribute",
    value: function normalizeAttribute(attribute) {
      if (!_.isPlainObject(attribute)) {
        attribute = {
          type: attribute
        };
      }

      if (!attribute.type) return attribute;
      attribute.type = this.normalizeDataType(attribute.type);

      if (Object.prototype.hasOwnProperty.call(attribute, "defaultValue")) {
        if (typeof attribute.defaultValue === "function" && [DataTypes.NOW, DataTypes.UUIDV1, DataTypes.UUIDV4].includes(attribute.defaultValue)) {
          attribute.defaultValue = new attribute.defaultValue();
        }
      }

      if (attribute.type instanceof DataTypes.ENUM) {
        if (attribute.values) {
          attribute.type.values = attribute.type.options.values = attribute.values;
        } else {
          attribute.values = attribute.type.values;
        }

        if (!attribute.values.length) {
          throw new Error("Values for ENUM have not been defined.");
        }
      }

      return attribute;
    }
  }], [{
    key: "fn",
    value: function fn(_fn) {
      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      return new Utils.Fn(_fn, args);
    }
  }, {
    key: "col",
    value: function col(_col) {
      return new Utils.Col(_col);
    }
  }, {
    key: "cast",
    value: function cast(val, type) {
      return new Utils.Cast(val, type);
    }
  }, {
    key: "literal",
    value: function literal(val) {
      return new Utils.Literal(val);
    }
  }, {
    key: "and",
    value: function and() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      return _defineProperty({}, Op.and, args);
    }
  }, {
    key: "or",
    value: function or() {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }

      return _defineProperty({}, Op.or, args);
    }
  }, {
    key: "json",
    value: function json(conditionsOrPath, value) {
      return new Utils.Json(conditionsOrPath, value);
    }
  }, {
    key: "where",
    value: function where(attr, comparator, logic) {
      return new Utils.Where(attr, comparator, logic);
    }
  }, {
    key: "useCLS",
    value: function useCLS(ns) {
      if (!ns || _typeof(ns) !== "object" || typeof ns.bind !== "function" || typeof ns.run !== "function") throw new Error("Must provide CLS namespace");
      Sequelize._cls = ns;
      return this;
    }
  }, {
    key: "_clsRun",
    value: function _clsRun(fn) {
      var ns = Sequelize._cls;
      if (!ns) return fn();
      var res;
      ns.run(function (context) {
        return res = fn(context);
      });
      return res;
    }
  }]);

  return Sequelize;
}();

Sequelize.prototype.fn = Sequelize.fn;
Sequelize.prototype.col = Sequelize.col;
Sequelize.prototype.cast = Sequelize.cast;
Sequelize.prototype.literal = Sequelize.literal;
Sequelize.prototype.and = Sequelize.and;
Sequelize.prototype.or = Sequelize.or;
Sequelize.prototype.json = Sequelize.json;
Sequelize.prototype.where = Sequelize.where;
Sequelize.prototype.validate = Sequelize.prototype.authenticate;
Object.defineProperty(Sequelize, "version", {
  enumerable: true,
  get: function get() {
    return require("../package.json").version;
  }
});
Sequelize.options = {
  hooks: {}
};
Sequelize.Utils = Utils;
Sequelize.Op = Op;
Sequelize.TableHints = TableHints;
Sequelize.IndexHints = IndexHints;
Sequelize.Transaction = Transaction;
Sequelize.prototype.Sequelize = Sequelize;
Sequelize.prototype.QueryTypes = Sequelize.QueryTypes = QueryTypes;
Sequelize.prototype.Validator = Sequelize.Validator = Validator;
Sequelize.Model = Model;
Sequelize.QueryInterface = QueryInterface;
Sequelize.BelongsTo = BelongsTo;
Sequelize.HasOne = HasOne;
Sequelize.HasMany = HasMany;
Sequelize.BelongsToMany = BelongsToMany;
Sequelize.DataTypes = DataTypes;

for (var dataType in DataTypes) {
  Sequelize[dataType] = DataTypes[dataType];
}

Sequelize.Deferrable = Deferrable;
Sequelize.prototype.Association = Sequelize.Association = Association;
Sequelize.useInflection = Utils.useInflection;
Hooks.applyTo(Sequelize);
Hooks.applyTo(Sequelize.prototype);
Sequelize.Error = sequelizeErrors.BaseError;

for (var _i2 = 0, _Object$keys = Object.keys(sequelizeErrors); _i2 < _Object$keys.length; _i2++) {
  var error = _Object$keys[_i2];
  Sequelize[error] = sequelizeErrors[error];
}

module.exports = Sequelize;
module.exports.Sequelize = Sequelize;
module.exports["default"] = Sequelize;
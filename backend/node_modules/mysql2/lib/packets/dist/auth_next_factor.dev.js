// Copyright (c) 2021, Oracle and/or its affiliates.
'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Packet = require('../packets/packet');

var AuthNextFactor =
/*#__PURE__*/
function () {
  function AuthNextFactor(opts) {
    _classCallCheck(this, AuthNextFactor);

    this.pluginName = opts.pluginName;
    this.pluginData = opts.pluginData;
  }

  _createClass(AuthNextFactor, [{
    key: "toPacket",
    value: function toPacket(encoding) {
      var length = 6 + this.pluginName.length + this.pluginData.length;
      var buffer = Buffer.allocUnsafe(length);
      var packet = new Packet(0, buffer, 0, length);
      packet.offset = 4;
      packet.writeInt8(0x02);
      packet.writeNullTerminatedString(this.pluginName, encoding);
      packet.writeBuffer(this.pluginData);
      return packet;
    }
  }], [{
    key: "fromPacket",
    value: function fromPacket(packet, encoding) {
      packet.readInt8(); // marker

      var name = packet.readNullTerminatedString(encoding);
      var data = packet.readBuffer();
      return new AuthNextFactor({
        pluginName: name,
        pluginData: data
      });
    }
  }]);

  return AuthNextFactor;
}();

module.exports = AuthNextFactor;
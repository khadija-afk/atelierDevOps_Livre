"use strict";

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;

var __defNormalProp = function __defNormalProp(obj, key, value) {
  return key in obj ? __defProp(obj, key, {
    enumerable: true,
    configurable: true,
    writable: true,
    value: value
  }) : obj[key] = value;
};

var __markAsModule = function __markAsModule(target) {
  return __defProp(target, "__esModule", {
    value: true
  });
};

var __export = function __export(target, all) {
  __markAsModule(target);

  for (var name in all) {
    __defProp(target, name, {
      get: all[name],
      enumerable: true
    });
  }
};

var __reExport = function __reExport(target, module2, desc) {
  if (module2 && _typeof(module2) === "object" || typeof module2 === "function") {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      var _loop = function _loop() {
        var key = _step.value;
        if (!__hasOwnProp.call(target, key) && key !== "default") __defProp(target, key, {
          get: function get() {
            return module2[key];
          },
          enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable
        });
      };

      for (var _iterator = __getOwnPropNames(module2)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        _loop();
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }

  return target;
};

var __toModule = function __toModule(module2) {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {
    get: function get() {
      return module2["default"];
    },
    enumerable: true
  } : {
    value: module2,
    enumerable: true
  })), module2);
};

var __publicField = function __publicField(obj, key, value) {
  __defNormalProp(obj, _typeof(key) !== "symbol" ? key + "" : key, value);

  return value;
};

__export(exports, {
  ValidationErrorItem: function ValidationErrorItem() {
    return _ValidationErrorItem;
  },
  ValidationErrorItemOrigin: function ValidationErrorItemOrigin() {
    return _ValidationErrorItemOrigin;
  },
  ValidationErrorItemType: function ValidationErrorItemType() {
    return _ValidationErrorItemType;
  },
  "default": function _default() {
    return validation_error_default;
  }
});

var import_base_error = __toModule(require("./base-error"));

var _ValidationErrorItemType =
/* @__PURE__ */
function (ValidationErrorItemType2) {
  ValidationErrorItemType2["notnull violation"] = "CORE";
  ValidationErrorItemType2["string violation"] = "CORE";
  ValidationErrorItemType2["unique violation"] = "DB";
  ValidationErrorItemType2["validation error"] = "FUNCTION";
  return ValidationErrorItemType2;
}(_ValidationErrorItemType || {});

var _ValidationErrorItemOrigin =
/* @__PURE__ */
function (ValidationErrorItemOrigin2) {
  ValidationErrorItemOrigin2["CORE"] = "CORE";
  ValidationErrorItemOrigin2["DB"] = "DB";
  ValidationErrorItemOrigin2["FUNCTION"] = "FUNCTION";
  return ValidationErrorItemOrigin2;
}(_ValidationErrorItemOrigin || {});

var _ValidationErrorItem =
/*#__PURE__*/
function () {
  function _ValidationErrorItem(message, type, path, value, instance, validatorKey, fnName, fnArgs) {
    _classCallCheck(this, _ValidationErrorItem);

    __publicField(this, "message");

    __publicField(this, "type");

    __publicField(this, "path");

    __publicField(this, "value");

    __publicField(this, "origin");

    __publicField(this, "instance");

    __publicField(this, "validatorKey");

    __publicField(this, "validatorName");

    __publicField(this, "validatorArgs");

    this.message = message || "";
    this.type = null;
    this.path = path || null;
    this.value = value !== void 0 ? value : null;
    this.origin = null;
    this.instance = instance || null;
    this.validatorKey = validatorKey || null;
    this.validatorName = fnName || null;
    this.validatorArgs = fnArgs || [];

    if (type) {
      if (this.isValidationErrorItemOrigin(type)) {
        this.origin = type;
      } else {
        var lowercaseType = this.normalizeString(type);
        var realType = _ValidationErrorItemType[lowercaseType];

        if (realType && _ValidationErrorItemOrigin[realType]) {
          this.origin = realType;
          this.type = type;
        }
      }
    }
  }

  _createClass(_ValidationErrorItem, [{
    key: "isValidationErrorItemOrigin",
    value: function isValidationErrorItemOrigin(origin) {
      return _ValidationErrorItemOrigin[origin] !== void 0;
    }
  }, {
    key: "normalizeString",
    value: function normalizeString(str) {
      return str.toLowerCase().trim();
    }
  }, {
    key: "getValidatorKey",
    value: function getValidatorKey(useTypeAsNS, NSSeparator) {
      var useTANS = useTypeAsNS === void 0 || !!useTypeAsNS;
      var NSSep = NSSeparator === void 0 ? "." : NSSeparator;
      var type = this.origin;
      var key = this.validatorKey || this.validatorName;
      var useNS = useTANS && type && _ValidationErrorItemOrigin[type];

      if (useNS && (typeof NSSep !== "string" || !NSSep.length)) {
        throw new Error("Invalid namespace separator given, must be a non-empty string");
      }

      if (!(typeof key === "string" && key.length)) {
        return "";
      }

      return (useNS ? [this.origin, key].join(NSSep) : key).toLowerCase().trim();
    }
  }]);

  return _ValidationErrorItem;
}();

__publicField(_ValidationErrorItem, "TypeStringMap", _ValidationErrorItemType);

__publicField(_ValidationErrorItem, "Origins", _ValidationErrorItemOrigin);

var ValidationError =
/*#__PURE__*/
function (_import_base_error$de) {
  _inherits(ValidationError, _import_base_error$de);

  function ValidationError(message, errors) {
    var _this;

    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    _classCallCheck(this, ValidationError);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ValidationError).call(this, message));

    __publicField(_assertThisInitialized(_this), "errors");

    _this.name = "SequelizeValidationError";
    _this.message = "Validation Error";
    _this.errors = errors || [];

    if (message) {
      _this.message = message;
    } else if (_this.errors.length > 0 && _this.errors[0].message) {
      _this.message = _this.errors.map(function (err) {
        return "".concat(err.type || err.origin, ": ").concat(err.message);
      }).join(",\n");
    }

    if (options.stack) {
      _this.stack = options.stack;
    }

    return _this;
  }

  _createClass(ValidationError, [{
    key: "get",
    value: function get(path) {
      return this.errors.reduce(function (reduced, error) {
        if (error.path === path) {
          reduced.push(error);
        }

        return reduced;
      }, []);
    }
  }]);

  return ValidationError;
}(import_base_error["default"]);

var validation_error_default = ValidationError;
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _ = require("lodash");

var _require = require("../abstract"),
    AbstractDialect = _require.AbstractDialect;

var _require2 = require("./connection-manager"),
    OracleConnectionManager = _require2.OracleConnectionManager;

var _require3 = require("./query"),
    OracleQuery = _require3.OracleQuery;

var _require4 = require("./query-generator"),
    OracleQueryGenerator = _require4.OracleQueryGenerator;

var DataTypes = require("../../data-types").oracle;

var _require5 = require("./query-interface"),
    OracleQueryInterface = _require5.OracleQueryInterface;

var OracleDialect =
/*#__PURE__*/
function (_AbstractDialect) {
  _inherits(OracleDialect, _AbstractDialect);

  function OracleDialect(sequelize) {
    var _this;

    _classCallCheck(this, OracleDialect);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(OracleDialect).call(this));
    _this.sequelize = sequelize;
    _this.connectionManager = new OracleConnectionManager(_assertThisInitialized(_this), sequelize);

    _this.connectionManager.initPools();

    _this.queryGenerator = new OracleQueryGenerator({
      _dialect: _assertThisInitialized(_this),
      sequelize: sequelize
    });
    _this.queryInterface = new OracleQueryInterface(sequelize, _this.queryGenerator);
    return _this;
  }

  return OracleDialect;
}(AbstractDialect);

OracleDialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {
  "VALUES ()": true,
  "LIMIT ON UPDATE": true,
  IGNORE: " IGNORE",
  lock: true,
  lockOuterJoinFailure: true,
  forShare: "FOR UPDATE",
  skipLocked: true,
  index: {
    collate: false,
    length: false,
    parser: false,
    type: false,
    using: false
  },
  constraints: {
    restrict: false
  },
  returnValues: false,
  returnIntoValues: true,
  "ORDER NULLS": true,
  schemas: true,
  updateOnDuplicate: false,
  indexViaAlter: false,
  NUMERIC: true,
  JSON: true,
  upserts: true,
  bulkDefault: true,
  topLevelOrderByRequired: true,
  GEOMETRY: false
});
OracleDialect.prototype.defaultVersion = "18.0.0";
OracleDialect.prototype.Query = OracleQuery;
OracleDialect.prototype.queryGenerator = OracleQueryGenerator;
OracleDialect.prototype.DataTypes = DataTypes;
OracleDialect.prototype.name = "oracle";
OracleDialect.prototype.TICK_CHAR = '"';
OracleDialect.prototype.TICK_CHAR_LEFT = OracleDialect.prototype.TICK_CHAR;
OracleDialect.prototype.TICK_CHAR_RIGHT = OracleDialect.prototype.TICK_CHAR;
module.exports = OracleDialect;
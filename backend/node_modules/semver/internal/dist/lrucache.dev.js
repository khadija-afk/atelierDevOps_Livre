"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var LRUCache =
/*#__PURE__*/
function () {
  function LRUCache() {
    _classCallCheck(this, LRUCache);

    this.max = 1000;
    this.map = new Map();
  }

  _createClass(LRUCache, [{
    key: "get",
    value: function get(key) {
      var value = this.map.get(key);

      if (value === undefined) {
        return undefined;
      } else {
        // Remove the key from the map and add it to the end
        this.map["delete"](key);
        this.map.set(key, value);
        return value;
      }
    }
  }, {
    key: "delete",
    value: function _delete(key) {
      return this.map["delete"](key);
    }
  }, {
    key: "set",
    value: function set(key, value) {
      var deleted = this["delete"](key);

      if (!deleted && value !== undefined) {
        // If cache is full, delete the least recently used item
        if (this.map.size >= this.max) {
          var firstKey = this.map.keys().next().value;
          this["delete"](firstKey);
        }

        this.map.set(key, value);
      }

      return this;
    }
  }]);

  return LRUCache;
}();

module.exports = LRUCache;